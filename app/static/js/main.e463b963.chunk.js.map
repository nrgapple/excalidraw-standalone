{"version":3,"sources":["utils.ts","element/newElement.ts","math.ts","element/bounds.ts","element/handlerRectangles.ts","element/collision.ts","element/resizeTest.ts","element/typeChecks.ts","keys.ts","element/textWysiwyg.tsx","element/textElement.ts","element/sizeHelpers.ts","scene/scrollbars.ts","scene/selection.ts","appState.ts","renderer/roundRect.ts","scene/zoom.ts","renderer/renderElement.ts","renderer/renderScene.ts","scene/export.ts","i18n.ts","clipboard.ts","scene/data.ts","scene/comparisons.ts","scene/createScene.ts","shapes.tsx","history.ts","components/Popover.tsx","components/ContextMenu.tsx","actions/manager.tsx","actions/actionDeleteSelected.tsx","zindex.ts","actions/actionZindex.tsx","actions/actionSelectAll.ts","components/ButtonSelect.tsx","components/ColorPicker.tsx","actions/actionProperties.tsx","components/icons.tsx","components/ToolButton.tsx","actions/actionCanvas.tsx","actions/actionFinalize.tsx","components/ProjectName.tsx","actions/actionExport.tsx","actions/actionStyles.ts","components/Island.tsx","components/Stack.tsx","components/FixedSideContainer.tsx","components/LockIcon.tsx","components/Modal.tsx","components/ExportDialog.tsx","components/LanguageList.tsx","components/HintViewer.tsx","index.tsx"],"names":["SVG_NS","capitalizeString","str","charAt","toUpperCase","slice","isWritableElement","target","HTMLElement","dataset","type","HTMLBRElement","HTMLTextAreaElement","HTMLInputElement","measureText","text","font","line","document","createElement","body","style","position","whiteSpace","appendChild","innerText","width","offsetWidth","height","offsetHeight","span","display","overflow","baseline","offsetTop","removeChild","selectNode","node","selection","window","getSelection","range","createRange","selectNodeContents","removeAllRanges","addRange","removeSelection","distance","x","y","Math","abs","resetCursor","documentElement","cursor","newElement","strokeColor","backgroundColor","fillStyle","strokeWidth","roughness","opacity","element","id","nanoid","isSelected","seed","randomSeed","shape","points","newTextElement","metrics","duplicateElement","copy","Array","isArray","JSON","parse","stringify","distanceBetweenPointAndSegment","x1","y1","x2","y2","xx","yy","C","D","lenSquare","param","dx","dy","hypot","rotate","angle","cos","sin","getElementAbsoluteCoords","getLinearElementAbsoluteBounds","getDiamondPoints","topX","floor","rightX","rightY","length","reduce","limits","minY","min","minX","maxX","max","maxY","Infinity","ops","sets","currentP","op","data","p1","p2","p3","p0","equation","t","idx","pow","getCommonBounds","elements","forEach","handlerRectangles","zoom","handlerWidth","handlerHeight","handlerMarginX","handlerMarginY","elementX1","elementY1","elementX2","elementY2","elementWidth","elementHeight","dashedLineMargin","handlers","nw","ne","sw","se","minimumSizeForEightHandlers","n","s","w","e","isElementDraggableFromInside","hitTest","lineThreshold","px","py","tx","ty","a","b","ex","ey","rx","ry","qx","qy","r","q","topY","bottomX","bottomY","leftX","leftY","relX","relY","some","hitTestRoughShape","console","warn","Error","opSet","mx","my","sqrt","pointInBezierEquation","getElementWithResizeHandler","result","resizeHandle","filter","Object","keys","key","handler","resizeTest","getCursorForResizingElement","resizingElement","shouldSwapCursors","sign","isTextElement","KEYS","ARROW_LEFT","ARROW_RIGHT","ARROW_DOWN","ARROW_UP","ENTER","ESCAPE","DELETE","BACKSPACE","test","navigator","platform","TAB","SPACE","isArrowKey","keyCode","textWysiwyg","initText","onSubmit","onCancel","editable","stopEvent","ev","stopPropagation","handleSubmit","trim","cleanup","onblur","onkeydown","onpaste","removeEventListener","contentEditable","tabIndex","assign","color","top","left","transform","textAlign","padding","outline","minHeight","backfaceVisibility","rangeCount","deleteFromDocument","clipboardData","getData","replace","getRangeAt","insertNode","setStart","childNodes","setEnd","preventDefault","err","error","shiftKey","isComposing","addEventListener","focus","redrawTextBoundingBox","isInvisiblySmallElement","getPerfectElementSize","elementType","absWidth","absHeight","normalizeDimensions","getScrollBars","viewportWidth","viewportHeight","scrollX","scrollY","elementsMinX","elementsMinY","elementsMaxX","elementsMaxY","viewportWidthWithZoom","viewportHeightWithZoom","viewportMinX","viewportMinY","viewportMaxX","viewportMaxY","sceneMinX","sceneMinY","sceneMaxX","sceneMaxY","horizontal","SCROLLBAR_MARGIN","vertical","clearSelection","someWasSelected","deleteSelectedElements","el","getSelectedIndices","selectedIndices","index","push","isSomeElementSelected","getSelectedElements","DEFAULT_PROJECT_NAME","date","Date","year","getFullYear","month","getMonth","day","getDate","hr","getHours","getMinutes","secs","getSeconds","getDateTime","getDefaultAppState","draggingElement","multiElement","editingElement","elementLocked","exportBackground","currentItemStrokeColor","currentItemBackgroundColor","currentItemFillStyle","currentItemStrokeWidth","currentItemRoughness","currentItemOpacity","currentItemFont","viewBackgroundColor","cursorX","cursorY","scrolledOutside","name","isResizing","selectionElement","clearAppStatePropertiesForHistory","appState","cleanAppStateForExport","roundRect","context","radius","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fill","stroke","getZoomOrigin","canvas","getContext","getTransform","d","getZoomTranslation","diffMiddleOfTheCanvas","parseFloat","toFixed","getNormalizedZoom","normalizedZoom","generateElement","generator","rectangle","undefined","polygon","ellipse","curveFitting","options","curve","prevOp","nx","ny","arrowLength","total","cx","cy","minSize","xs","ys","PI","x3","y3","getArrowPoints","x4","y4","renderElement","rc","fillRect","globalAlpha","draw","lines","split","lineHeight","offset","i","fillText","renderElementToSvg","rsvg","svgRoot","offsetX","offsetY","setAttribute","group","ownerDocument","createElementNS","fontSplit","fontFamily","fontSize","textContent","renderScene","sceneState","renderScrollbars","renderSelection","initialContextTransform","normalizedCanvasWidth","getContextTransformScaleX","normalizedCanvasHeight","getContextTransformScaleY","scaleContextToZoom","setTransform","getContextTransformTranslateX","getContextTransformTranslateY","zoomTranslation","translateContextToZoom","save","hasTransparence","clearRect","restore","visibleElements","isVisibleElement","translate","selectedElements","dashledLinePadding","initialLineDash","getLineDash","setLineDash","strokeRect","values","scrollBars","strokeStyle","scrollBar","SCROLLBAR_WIDTH","viewportWidthDiff","viewportHeightDiff","f","exportToCanvas","exportPadding","scale","createCanvas","tempCanvas","rough","exportToSvg","innerHTML","rect","renderSceneToSvg","svg","languages","lng","label","require","currentLanguage","fallbackLanguage","setLanguage","newLng","find","language","languageDetector","cacheUserLanguage","findPartsForData","parts","part","path","replacement","translation","LanguageDetector","init","languageUtils","formatLanguageCode","isWhitelisted","checkWhitelist","detect","CLIPBOARD","PREFER_APP_CLIPBOARD","probablySupportsClipboardReadText","clipboard","probablySupportsClipboardWriteText","probablySupportsClipboardBlob","HTMLCanvasElement","prototype","copyToAppClipboard","map","copyTextToSystemClipboard","getAppClipboard","clipboardElements","getClipboardContent","readText","copyCanvasToClipboardAsPng","Promise","resolve","reject","toBlob","blob","write","ClipboardItem","copied","writeText","copyTextViaExecCommand","isRTL","getAttribute","textarea","border","margin","yPosition","pageYOffset","scrollTop","value","success","select","setSelectionRange","execCommand","remove","serializeAsJSON","version","source","location","origin","calculateScrollCenter","centerX","centerY","innerWidth","innerHeight","serialized","fileSave","Blob","fileName","description","handle","fileOpen","extensions","mimeTypes","loadFromBlob","updateAppState","contents","defaultAppState","reader","FileReader","readAsText","onloadend","readyState","DONE","scrollToContent","exportCanvas","alert","tempSvg","outerHTML","savedElements","savedState","opts","restoreFromLocalStorage","localStorage","getItem","saveToLocalStorage","setItem","clearAppStateForLocalStorage","loadScene","hasBackground","hasStroke","hasText","getElementAtPosition","hitElement","SHAPES","icon","viewBox","strokeLinecap","shapesShortcutKeys","toString","flat","SceneHistory","recording","stateHistory","redoStack","newEntry","this","generateEntry","clearRedoStack","entry","splice","entryToRestore","pop","restoreEntry","currentEntry","Popover","children","onCloseRequest","fitInViewport","popoverRef","useRef","useLayoutEffect","current","getBoundingClientRect","className","ref","onClick","onContextMenu","contextMenuNode","ContextMenu","option","ContextMenuOption","action","getContextMenuNode","div","handleClose","unmountComponentAtNode","params","of","render","ActionManager","updater","getAppState","getElements","actions","event","sort","keyPriority","keyTest","commitToHistory","perform","actionFilter","contextMenuOrder","contextItemLabel","PanelComponent","updateData","formState","actionDeleteSelected","_","swap","indexA","indexB","moveOneLeft","indicesToMove","isSorted","moveOneRight","reversedIndicesToMove","moveAllLeft","leftMostElements","reverse","concat","pos","moveAllRight","rightMostElements","ICONS","bringForward","sendBackward","bringToFront","sendToBack","strokeLinejoin","actionSendBackward","META","altKey","title","actionBringForward","actionSendToBack","actionBringToFront","actionSelectAll","elem","ButtonSelect","onChange","checked","keyBindings","Picker","colors","onClose","firstItem","React","activeItem","gallery","colorInput","useEffect","role","aria-modal","aria-label","onKeyDown","activeElement","indexOf","call","nextIndex","includes","toLowerCase","nativeEvent","stopImmediatePropagation","_color","aria-keyshortcuts","onFocus","ColorInput","forwardRef","colorRegex","useState","innerValue","setInnerValue","inputRef","useImperativeHandle","spellCheck","match","onPaste","onBlur","ColorPicker","isActive","setActive","pickerButton","Suspense","fallback","changedColor","canvasBackground","elementBackground","elementStroke","changeProperty","callback","getFormValue","defaultValue","attributes","from","Set","getCommonAttributeOfSelectedElements","actionChangeStrokeColor","aria-hidden","actionChangeBackgroundColor","actionChangeFillStyle","actionChangeStrokeWidth","actionChangeSloppiness","actionChangeOpacity","step","onWheel","deltaY","actionChangeFontSize","actionChangeFontFamily","focusable","load","trash","exportFile","zoomIn","zoomOut","ToolButton","props","innerRef","sizeCn","size","keyBindingLabel","actionChangeViewBackgroundColor","actionClearCanvas","confirm","KEY_CODES","actionZoomIn","code","actionZoomOut","actionResetZoom","actionFinalize","newElements","blur","ProjectName","handleFocus","currentTarget","handleBlur","handleKeyDown","suppressContentEditableWarning","data-type","Component","actionChangeProjectName","actionChangeExportBackground","actionSaveScene","saveAsJSON","catch","actionLoadScene","loadFromJSON","then","copiedStyles","actionCopyStyles","actionPasteStyles","pastedElement","Island","gap","align","justifyContent","alignItems","justifyItems","FixedSideContainer","side","CHECKED","xmlns","UNCHECKED","LockIcon","Modal","modalRoot","useBodyRoot","createPortal","aria-labelledby","labelledBy","maxWidth","scales","defaultScale","devicePixelRatio","ExportModal","actionManager","onExportToPng","onExportToSvg","onExportToClipboard","someElementIsSelected","setScale","exportSelected","setExportSelected","previewRef","pngButton","closeButton","onlySelectedInput","exportedElements","previewNode","renderAction","ExportDialog","modalIsShown","setModalIsShown","triggerButton","useCallback","LanguageList","Fragment","HintViewer","hint","multiMode","getHints","history","setCursorForShape","CURSOR_TYPE","TEXT","CROSSHAIR","GRABBING","MOUSE_BUTTON","lastMouseUp","viewportCoordsToSceneCoords","clientX","clientY","zoomOrigin","sceneCoordsToViewportCoords","sceneX","sceneY","isHoldingSpace","isPanning","isHoldingMouseButton","LayerUI","memo","setAppState","setElements","targetElements","renderSelectedShapeActions","marginLeft","prev","next","getNecessaryObj","prevAppState","nextAppState","every","k","App","canvasOnlyActions","syncActionResult","res","unmounted","resumeRecording","setState","onCut","onCopy","onUnload","saveDebounced","flush","disableEvent","state","onResize","updateCurrentCursorPosition","HTMLSelectElement","findShapeByKey","ctrlKey","metaKey","redoOnce","undoOnce","selectShapeTool","onKeyUp","pasteFromClipboard","elementUnderCursor","elementFromPoint","addElementsFromPaste","obj","elements_","handleWheel","deltaX","delta","elementsCenterX","elementsCenterY","duplicate","fn","timeout","lastArgs","ret","args","clearTimeout","setTimeout","debounce","registerAction","passive","scene","canvasDOMWidth","canvasDOMHeight","canvasScale","canvasWidth","canvasHeight","getContextMenuItems","onMouseDown","button","lastX","lastY","onMouseMove","teardown","isOverHorizontalScrollBar","isOverVerticalScrollBar","isOverScrollBars","originX","originY","isResizingElements","draggingOccurred","elementIsAddedToSelection","resizeElement","textX","textY","snappedToCenterPosition","getTextWysiwygSnappedToCenterPosition","elementCenterX","elementCenterY","wysiwygX","wysiwygY","resetSelection","resizeArrowFn","arrowResizeOrigin","mouseX","mouseY","perfect","absPx","absPy","arrowResizeEnd","xd","yd","distance2d","isLinear","len","normalizeResizeHandle","pnt","selectionX1","selectionY1","selectionX2","selectionY2","getElementsWithinSelection","onMouseUp","onDoubleClick","elementAtPosition","centerElementX","centerElementY","hasDeselectedButton","Boolean","buttons","onDrop","file","dataTransfer","files","elementClickedInside","getElementContainingPosition","isRecording","pushEntry","skipRecording","rootElement","getElementById","TopErrorBoundary","hasError","stack","templateStr","default","encodeURIComponent","open","reload","clear","createGithubIssue","rows","selectTextArea","ReactDOM"],"mappings":"uhsBAAaA,EAAS,6BAcf,SAASC,EAAiBC,GAC/B,OAAOA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,GA0B1C,SAASC,EACdC,GAMA,OACGA,aAAkBC,aAAuC,YAAxBD,EAAOE,QAAQC,MACjDH,aAAkBI,eAClBJ,aAAkBK,qBACjBL,aAAkBM,mBACA,SAAhBN,EAAOG,MAAmC,WAAhBH,EAAOG,MAKjC,SAASI,EAAYC,EAAcC,GACxC,IAAMC,EAAOC,SAASC,cAAc,OAC9BC,EAAOF,SAASE,KACtBH,EAAKI,MAAMC,SAAW,WACtBL,EAAKI,MAAME,WAAa,SACxBN,EAAKI,MAAML,KAAOA,EAClBI,EAAKI,YAAYP,GAEjBA,EAAKQ,UAAYV,EACjB,IAAMW,EAAQT,EAAKU,YACbC,EAASX,EAAKY,aAGdC,EAAOZ,SAASC,cAAc,QACpCW,EAAKT,MAAMU,QAAU,eACrBD,EAAKT,MAAMW,SAAW,SACtBF,EAAKT,MAAMK,MAAQ,MACnBI,EAAKT,MAAMO,OAAS,MACpBX,EAAKO,YAAYM,GAEjB,IAAMG,EAAWH,EAAKI,UAAYJ,EAAKD,aAGvC,OAFAX,SAASE,KAAKe,YAAYlB,GAEnB,CAAES,QAAOE,SAAQK,YAqBnB,SAASG,EAAWC,GACzB,IAAMC,EAAYC,OAAOC,eACzB,GAAIF,EAAW,CACb,IAAMG,EAAQvB,SAASwB,cACvBD,EAAME,mBAAmBN,GACzBC,EAAUM,kBACVN,EAAUO,SAASJ,IAIhB,SAASK,IACd,IAAMR,EAAYC,OAAOC,eACrBF,GACFA,EAAUM,kBAIP,SAASG,EAASC,EAAWC,GAClC,OAAOC,KAAKC,IAAIH,EAAIC,GASf,SAASG,IACdlC,SAASmC,gBAAgBhC,MAAMiC,OAAS,GC1HnC,SAASC,EACd7C,EACAsC,EACAC,EACAO,EACAC,EACAC,EACAC,EACAC,EACAC,GAGC,IAFDnC,EAEA,uDAFQ,EACRE,EACA,0DADS,EAEHkC,EAAU,CACdC,GAAIC,MACJtD,OACAsC,IACAC,IACAvB,QACAE,SACA4B,cACAC,kBACAC,YACAC,cACAC,YACAC,UACAI,YAAY,EACZC,KAAMC,cACNC,MAAO,KACPC,OAAQ,IAEV,OAAOP,EAGF,SAASQ,EACdR,EACA/C,EACAC,GAEA,IAAMuD,EAAUzD,EAAYC,EAAMC,GAclC,OAbwC,eACnC8C,EADmC,CAEtCpD,KAAM,OACNK,KAAMA,EACNC,KAAMA,EAENgC,EAAGc,EAAQd,EAAIuB,EAAQ7C,MAAQ,EAC/BuB,EAAGa,EAAQb,EAAIsB,EAAQ3C,OAAS,EAChCF,MAAO6C,EAAQ7C,MACfE,OAAQ2C,EAAQ3C,OAChBK,SAAUsC,EAAQtC,WAMf,SAASuC,EAAiBV,GAC/B,IAAMW,EAAI,eACLX,GAWL,MATI,WAAYW,IACdA,EAAKJ,OAASK,MAAMC,QAAQb,EAAQO,QAChCO,KAAKC,MAAMD,KAAKE,UAAUhB,EAAQO,SAClCP,EAAQO,eAGPI,EAAKL,MACZK,EAAKV,GAAKC,MACVS,EAAKP,KAAOC,cACLM,E,MC1EF,SAASM,EACd/B,EACAC,EACA+B,EACAC,EACAC,EACAC,GAEA,IAaIC,EAAIC,EAXFC,EAAIJ,EAAKF,EACTO,EAAIJ,EAAKF,EAGTO,EAAYF,EAAIA,EAAIC,EAAIA,EAC1BE,GAAS,EACK,IAAdD,IAEFC,IAVQzC,EAAIgC,GAKEM,GAJNrC,EAAIgC,GAIUM,GAKRC,GAIZC,EAAQ,GACVL,EAAKJ,EACLK,EAAKJ,GACIQ,EAAQ,GACjBL,EAAKF,EACLG,EAAKF,IAELC,EAAKJ,EAAKS,EAAQH,EAClBD,EAAKJ,EAAKQ,EAAQF,GAGpB,IAAMG,EAAK1C,EAAIoC,EACTO,EAAK1C,EAAIoC,EACf,OAAOnC,KAAK0C,MAAMF,EAAIC,GAGjB,SAASE,EACdb,EACAC,EACAC,EACAC,EACAW,GAKA,MAAO,EACJd,EAAKE,GAAMhC,KAAK6C,IAAID,IAAUb,EAAKE,GAAMjC,KAAK8C,IAAIF,GAASZ,GAC3DF,EAAKE,GAAMhC,KAAK8C,IAAIF,IAAUb,EAAKE,GAAMjC,KAAK6C,IAAID,GAASX,GC9CzD,SAASc,EAAyBnC,GACvC,MAAqB,UAAjBA,EAAQpD,MAAqC,SAAjBoD,EAAQpD,KAC/BwF,EAA+BpC,GAEjC,CACLA,EAAQd,EACRc,EAAQb,EACRa,EAAQd,EAAIc,EAAQpC,MACpBoC,EAAQb,EAAIa,EAAQlC,QAIjB,SAASuE,EAAiBrC,GAG/B,IAAMsC,EAAOlD,KAAKmD,MAAMvC,EAAQpC,MAAQ,GAAK,EAEvC4E,EAASxC,EAAQpC,MACjB6E,EAASrD,KAAKmD,MAAMvC,EAAQlC,OAAS,GAAK,EAMhD,MAAO,CAACwE,EARK,EAQOE,EAAQC,EALZH,EACAtC,EAAQlC,OAJX,EAMC2E,GAKT,SAASL,EAA+BpC,GAC7C,GAAIA,EAAQO,OAAOmC,OAAS,IAAM1C,EAAQM,MAAO,CAAC,IAAD,EACZN,EAAQO,OAAOoC,QAChD,SAACC,EAAD,GAAqB,IAAD,mBAAV1D,EAAU,KAAPC,EAAO,KAOlB,OANAyD,EAAOC,KAAOzD,KAAK0D,IAAIF,EAAOC,KAAM1D,GACpCyD,EAAOG,KAAO3D,KAAK0D,IAAIF,EAAOG,KAAM7D,GAEpC0D,EAAOI,KAAO5D,KAAK6D,IAAIL,EAAOI,KAAM9D,GACpC0D,EAAOM,KAAO9D,KAAK6D,IAAIL,EAAOM,KAAM/D,GAE7ByD,IAET,CAAEG,KAAMI,IAAUN,KAAMM,IAAUH,MAAOG,IAAUD,MAAOC,MAVpDJ,EADuC,EACvCA,KAAMF,EADiC,EACjCA,KAAMG,EAD2B,EAC3BA,KAAME,EADqB,EACrBA,KAY1B,MAAO,CACLH,EAAO/C,EAAQd,EACf2D,EAAO7C,EAAQb,EACf6D,EAAOhD,EAAQd,EACfgE,EAAOlD,EAAQb,GAInB,IAGMiE,EAHQpD,EAAQM,MAGJ,GAAG+C,KAAK,GAAGD,IAEzBE,EAAkB,CAAC,EAAG,GA3B+C,EA6BtCF,EAAIT,QACrC,SAACC,EAAD,GAA2B,IAAhBW,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KAGb,GAAW,SAAPD,EAEFD,EAAWE,OAGN,GAAW,aAAPD,EAAmB,CAI5B,IAAME,EAAK,CAACD,EAAK,GAAIA,EAAK,IACpBE,EAAK,CAACF,EAAK,GAAIA,EAAK,IACpBG,EAAK,CAACH,EAAK,GAAIA,EAAK,IAEpBI,EAAKN,EACXA,EAAWK,EASX,IAPA,IAAME,EAAW,SAACC,EAAWC,GAAZ,OACf3E,KAAK4E,IAAI,EAAIF,EAAG,GAAKH,EAAGI,GACxB,EAAID,EAAI1E,KAAK4E,IAAI,EAAIF,EAAG,GAAKJ,EAAGK,GAChC,EAAI3E,KAAK4E,IAAIF,EAAG,IAAM,EAAIA,GAAKL,EAAGM,GAClCH,EAAGG,GAAO3E,KAAK4E,IAAIF,EAAG,IAEpBA,EAAI,EACDA,GAAK,GAAK,CACf,IAAM5E,EAAI2E,EAASC,EAAG,GAChB3E,EAAI0E,EAASC,EAAG,GAEtBlB,EAAOC,KAAOzD,KAAK0D,IAAIF,EAAOC,KAAM1D,GACpCyD,EAAOG,KAAO3D,KAAK0D,IAAIF,EAAOG,KAAM7D,GAEpC0D,EAAOI,KAAO5D,KAAK6D,IAAIL,EAAOI,KAAM9D,GACpC0D,EAAOM,KAAO9D,KAAK6D,IAAIL,EAAOM,KAAM/D,GAEpC2E,GAAK,IAOT,OAAOlB,IAET,CAAEG,KAAMI,IAAUN,KAAMM,IAAUH,MAAOG,IAAUD,MAAOC,MA9CpDJ,EA7BiE,EA6BjEA,KAAMF,EA7B2D,EA6B3DA,KAAMG,EA7BqD,EA6BrDA,KAAME,EA7B+C,EA6B/CA,KAiD1B,MAAO,CACLH,EAAO/C,EAAQd,EACf2D,EAAO7C,EAAQb,EACf6D,EAAOhD,EAAQd,EACfgE,EAAOlD,EAAQb,GAkEZ,SAAS8E,EAAgBC,GAC9B,IAAInB,EAAOI,IACPH,GAAQG,IACRN,EAAOM,IACPD,GAAQC,IAUZ,OARAe,EAASC,SAAQ,SAAAnE,GAAY,IAAD,EACDmC,EAAyBnC,GADxB,mBACnBkB,EADmB,KACfC,EADe,KACXC,EADW,KACPC,EADO,KAE1B0B,EAAO3D,KAAK0D,IAAIC,EAAM7B,GACtB2B,EAAOzD,KAAK0D,IAAID,EAAM1B,GACtB6B,EAAO5D,KAAK6D,IAAID,EAAM5B,GACtB8B,EAAO9D,KAAK6D,IAAIC,EAAM7B,MAGjB,CAAC0B,EAAMF,EAAMG,EAAME,GC9LrB,SAASkB,EAAkBpE,EAA4BqE,GAC5D,IAAMC,EAAe,EAAID,EACnBE,EAAgB,EAAIF,EAEpBG,EAAiB,EAAIH,EACrBI,EAAiB,EAAIJ,EAL+C,EAOrBlC,EACnDnC,GARwE,mBAOnE0E,EAPmE,KAOxDC,EAPwD,KAO7CC,EAP6C,KAOlCC,EAPkC,KAWpEC,EAAeF,EAAYF,EAC3BK,EAAgBF,EAAYF,EAE5BK,EAAmB,EAAIX,EAEvBY,EAAW,CACfC,GAAI,CACFR,EAAYM,EAAmBR,EAC/BG,EAAYK,EAAmBP,EAC/BH,EACAC,GAEFY,GAAI,CACFP,EAAYI,EACZL,EAAYK,EAAmBP,EAC/BH,EACAC,GAEFa,GAAI,CACFV,EAAYM,EAAmBR,EAC/BK,EAAYG,EACZV,EACAC,GAEFc,GAAI,CACFT,EAAYI,EACZH,EAAYG,EACZV,EACAC,IAKEe,EAA8B,GAAKjB,EA8BzC,GA7BIjF,KAAKC,IAAIyF,GAAgBQ,IAC3BL,EAAQ,EAAQ,CACdP,EAAYI,EAAe,EAC3BH,EAAYK,EAAmBP,EAC/BH,EACAC,GAEFU,EAAQ,EAAQ,CACdP,EAAYI,EAAe,EAC3BD,EAAYG,EACZV,EACAC,IAGAnF,KAAKC,IAAI0F,GAAiBO,IAC5BL,EAAQ,EAAQ,CACdP,EAAYM,EAAmBR,EAC/BG,EAAYI,EAAgB,EAC5BT,EACAC,GAEFU,EAAQ,EAAQ,CACdL,EAAYI,EACZL,EAAYI,EAAgB,EAC5BT,EACAC,IAIiB,UAAjBvE,EAAQpD,MAAqC,SAAjBoD,EAAQpD,KAAiB,CACvD,GAA8B,IAA1BoD,EAAQO,OAAOmC,OAAc,KAEtBe,EAFsB,YAEhBzD,EAAQO,OAFQ,MAI/B,GAAc,IAAVkD,EAAG,IAAsB,IAAVA,EAAG,GACpB,MAAO,CACLyB,GAAID,EAASC,GACbG,GAAIJ,EAASI,IAIjB,GAAI5B,EAAG,GAAK,GAAKA,EAAG,GAAK,EACvB,MAAO,CACL0B,GAAIF,EAASE,GACbC,GAAIH,EAASG,IAIjB,GAAI3B,EAAG,GAAK,GAAKA,EAAG,GAAK,EACvB,MAAO,CACLyB,GAAID,EAASC,GACbG,GAAIJ,EAASI,IAIjB,GAAI5B,EAAG,GAAK,GAAKA,EAAG,GAAK,EACvB,MAAO,CACL0B,GAAIF,EAASE,GACbC,GAAIH,EAASG,IAIjB,GAAI3B,EAAG,GAAK,GAAKA,EAAG,GAAK,EACvB,MAAO,CACLyB,GAAID,EAASC,GACbG,GAAIJ,EAASI,IAKnB,MAAO,CACLE,EAAGN,EAASM,EACZC,EAAGP,EAASO,EACZC,EAAGR,EAASQ,EACZC,EAAGT,EAASS,GAIhB,OAAOT,ECrHT,SAASU,EAA6B3F,GACpC,MAAmC,gBAA5BA,EAAQL,iBAAqCK,EAAQG,WAGvD,SAASyF,EACd5F,EACAd,EACAC,EACAkF,GAIA,IAAMwB,EAAgB,GAAKxB,EAE3B,GAAqB,YAAjBrE,EAAQpD,KAAoB,CAE9B,IAAMkJ,EAAK1G,KAAKC,IAAIH,EAAIc,EAAQd,EAAIc,EAAQpC,MAAQ,GAC9CmI,EAAK3G,KAAKC,IAAIF,EAAIa,EAAQb,EAAIa,EAAQlC,OAAS,GAEjDkI,EAAK,KACLC,EAAK,KAEHC,EAAI9G,KAAKC,IAAIW,EAAQpC,OAAS,EAC9BuI,EAAI/G,KAAKC,IAAIW,EAAQlC,QAAU,EAyBrC,MAvBA,CAAC,EAAG,EAAG,EAAG,GAAGqG,SAAQ,SAAAjF,GACnB,IAAMoC,EAAK4E,EAAIF,EACTzE,EAAK4E,EAAIF,EAETG,GAAOF,EAAIA,EAAIC,EAAIA,GAAb,SAAkBH,EAAM,GAAKE,EACnCG,GAAOF,EAAIA,EAAID,EAAIA,GAAb,SAAkBD,EAAM,GAAKE,EAEnCG,EAAKhF,EAAK8E,EACVG,EAAKhF,EAAK8E,EAEVG,EAAKV,EAAKM,EACVK,EAAKV,EAAKM,EAEVK,EAAItH,KAAK0C,MAAMyE,EAAID,GACnBK,EAAIvH,KAAK0C,MAAM2E,EAAID,GAEzBR,EAAK5G,KAAK0D,IAAI,EAAG1D,KAAK6D,IAAI,GAAKuD,EAAKE,EAAKC,EAAIP,GAAMF,IACnDD,EAAK7G,KAAK0D,IAAI,EAAG1D,KAAK6D,IAAI,GAAKwD,EAAKC,EAAKC,EAAIN,GAAMF,IACnD,IAAMrC,EAAI1E,KAAK0C,MAAMmE,EAAID,GACzBA,GAAMlC,EACNmC,GAAMnC,KAGJ6B,EAA6B3F,GAE7BkG,EAAIF,GAAMF,EAAKD,IAAkB,GAAKM,EAAIF,GAAMF,EAAKF,IAAkB,EAGpEzG,KAAK0C,MAAMoE,EAAIF,EAAKF,EAAIK,EAAIF,EAAKF,GAAMF,EACzC,GAAqB,cAAjB7F,EAAQpD,KAAsB,CAAC,IAAD,EACduF,EAAyBnC,GADX,mBAChCkB,EADgC,KAC5BC,EAD4B,KACxBC,EADwB,KACpBC,EADoB,KAGvC,OAAIsE,EAA6B3F,GAE7Bd,EAAIgC,EAAK2E,GACT3G,EAAIkC,EAAKyE,GACT1G,EAAIgC,EAAK0E,GACT1G,EAAIkC,EAAKwE,EAQX5E,EAA+B/B,EAAGC,EAAG+B,EAAIC,EAAIC,EAAID,GAAM0E,GACvD5E,EAA+B/B,EAAGC,EAAGiC,EAAID,EAAIC,EAAIC,GAAMwE,GACvD5E,EAA+B/B,EAAGC,EAAGiC,EAAIC,EAAIH,EAAIG,GAAMwE,GACvD5E,EAA+B/B,EAAGC,EAAG+B,EAAIG,EAAIH,EAAIC,GAAM0E,EAEpD,GAAqB,YAAjB7F,EAAQpD,KAAoB,CACrCsC,GAAKc,EAAQd,EACbC,GAAKa,EAAQb,EAFwB,MAYjCkD,EAAiBrC,GAZgB,mBAInCsC,EAJmC,KAKnCsE,EALmC,KAMnCpE,EANmC,KAOnCC,EAPmC,KAQnCoE,EARmC,KASnCC,EATmC,KAUnCC,EAVmC,KAWnCC,EAXmC,KAcrC,GAAIrB,EAA6B3F,GAAU,CAEzC,GAAI4G,EAAOE,EAAS,CAAC,IAAD,EACA,CAACF,EAAME,GAAxBA,EADiB,KACRF,EADQ,KAGpB,GAAIpE,EAASuE,EAAO,CAAC,IAAD,EACA,CAACvE,EAAQuE,GAA1BA,EADiB,KACVvE,EADU,KAqBpB,OAhBAsE,GAAWjB,EAEXrD,GAAUqD,IADVkB,GAASlB,GAiBEvD,IAASnD,EAAI6H,IAAUD,EAAQ7H,KAnB1C0H,GAAQf,GAmB+CmB,IAAU,IAE9D1E,EAAOE,IAAWrD,EAAIsD,IAAWvD,EAAIsD,IAAWoE,EAAOnE,IAAW,IAElED,EAASqE,IAAY1H,EAAI2H,IACvB5H,EAAI2H,IAAYpE,EAASqE,IAC1B,IAEDD,EAAUE,IAAU5H,EAAI6H,IAAU9H,EAAI6H,IAAUD,EAAUE,IAAU,EAIzE,OACE/F,EAA+B/B,EAAGC,EAAGmD,EAAMsE,EAAMpE,EAAQC,GACvDoD,GACF5E,EAA+B/B,EAAGC,EAAGqD,EAAQC,EAAQoE,EAASC,GAC5DjB,GACF5E,EAA+B/B,EAAGC,EAAG0H,EAASC,EAASC,EAAOC,GAC5DnB,GACF5E,EAA+B/B,EAAGC,EAAG4H,EAAOC,EAAO1E,EAAMsE,GACvDf,EAEC,GAAqB,UAAjB7F,EAAQpD,MAAqC,SAAjBoD,EAAQpD,KAAiB,CAC9D,IAAKoD,EAAQM,MACX,OAAO,EAET,IAAMA,EAAQN,EAAQM,MAJwC,EAMrC8B,EAA+BpC,GANM,mBAMvDkB,EANuD,KAMnDC,EANmD,KAM/CC,EAN+C,KAM3CC,EAN2C,KAO9D,GAAInC,EAAIgC,GAAM/B,EAAIgC,EAAK,IAAMjC,EAAIkC,GAAMjC,EAAIkC,EAAK,GAC9C,OAAO,EAGT,IAAM4F,EAAO/H,EAAIc,EAAQd,EACnBgI,EAAO/H,EAAIa,EAAQb,EAGzB,OAAOmB,EAAM6G,MAAK,SAAA3B,GAAC,OAAI4B,EAAkB5B,EAAEnC,KAAM4D,EAAMC,MAClD,GAAqB,SAAjBlH,EAAQpD,KAAiB,CAAC,IAAD,EACTuF,EAAyBnC,GADhB,mBAC3BkB,EAD2B,KACvBC,EADuB,KACnBC,EADmB,KACfC,EADe,KAGlC,OAAOnC,GAAKgC,GAAMhC,GAAKkC,GAAMjC,GAAKgC,GAAMhC,GAAKkC,EACxC,GAAqB,cAAjBrB,EAAQpD,KAEjB,OADAyK,QAAQC,KAAK,gEACN,EAET,MAAM,IAAIC,MAAJ,6BAAgCvH,EAAQpD,OAGhD,IAiCMwK,EAAoB,SAACI,EAAgBtI,EAAWC,GAEpD,IAAMiE,EAAMoE,EAAM,GAAGpE,IAIjBE,EAAkB,CAAC,EAAG,GAE1B,OAAOF,EAAI+D,MAAK,WAAepD,GAAS,IAArBR,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,KAGrB,GAAW,SAAPD,EAEFD,EAAWE,OAGN,GAAW,aAAPD,EAAmB,CAI5B,IAAME,EAAK,CAACD,EAAK,GAAIA,EAAK,IACpBE,EAAK,CAACF,EAAK,GAAIA,EAAK,IACpBG,EAAK,CAACH,EAAK,GAAIA,EAAK,IAEpBI,EAAKN,EAWX,OAVAA,EAAWK,EA1Da,SAC5BC,EACAH,EACAC,EACAC,EAJ4B,GAiB5B,IAXI,IAAD,mBADF8D,EACE,KADEC,EACF,KAEG7D,EAAW,SAACC,EAAWC,GAAZ,OACf3E,KAAK4E,IAAI,EAAIF,EAAG,GAAKH,EAAGI,GACxB,EAAID,EAAI1E,KAAK4E,IAAI,EAAIF,EAAG,GAAKJ,EAAGK,GAChC,EAAI3E,KAAK4E,IAAIF,EAAG,IAAM,EAAIA,GAAKL,EAAGM,GAClCH,EAAGG,GAAO3E,KAAK4E,IAAIF,EAAG,IAIpBA,EAAI,EACDA,GAAK,GAAK,CACf,IAAMkC,EAAKnC,EAASC,EAAG,GACjBmC,EAAKpC,EAASC,EAAG,GAIvB,GAFa1E,KAAKuI,KAAKvI,KAAK4E,IAAIgC,EAAKyB,EAAI,GAAKrI,KAAK4E,IAAIiC,EAAKyB,EAAI,IAPlD,GAUZ,OAAO,EAGT5D,GAAK,IAGP,OAAO,EAiCY8D,CAAsBhE,EAAIH,EAAIC,EAAIC,EAAI,CAACzE,EAAGC,IAY3D,OAAO,MCtNJ,SAAS0I,EACd3D,EADK,EAGLG,GACC,IAFCnF,EAEF,EAFEA,EAAGC,EAEL,EAFKA,EAGL,OAAO+E,EAASvB,QAAO,SAACmF,EAAQ9H,GAC9B,GAAI8H,EACF,OAAOA,EAET,IAAMC,EA1CH,SACL/H,EACAd,EACAC,EACAkF,GAEA,IAAKrE,EAAQG,YAA+B,SAAjBH,EAAQpD,KACjC,OAAO,EAGT,IAAMqI,EAAWb,EAAkBpE,EAASqE,GAEtC2D,EAASC,OAAOC,KAAKjD,GAAU+C,QAAO,SAAAG,GAC1C,IAAMC,EAAUnD,EAASkD,GACzB,QAAKC,IAKHlJ,GAAKkJ,EAAQ,IACblJ,GAAKkJ,EAAQ,GAAKA,EAAQ,IAC1BjJ,GAAKiJ,EAAQ,IACbjJ,GAAKiJ,EAAQ,GAAKA,EAAQ,OAI9B,OAAIJ,EAAOtF,OAAS,GACXsF,EAAO,GAeOK,CAAWrI,EAASd,EAAGC,EAAGkF,GAC/C,OAAO0D,EAAe,CAAE/H,UAAS+H,gBAAiB,OACjD,MAME,SAASO,EAA4BC,GAGhC,IACFvI,EAA0BuI,EAA1BvI,QAAS+H,EAAiBQ,EAAjBR,aACXS,EACJpJ,KAAKqJ,KAAKzI,EAAQlC,QAAUsB,KAAKqJ,KAAKzI,EAAQpC,UAAY,EACxD4B,EAAS,KAEb,OAAQuI,GACN,IAAK,IACL,IAAK,IACHvI,EAAS,KACT,MACF,IAAK,IACL,IAAK,IACHA,EAAS,KACT,MACF,IAAK,KACL,IAAK,KAEDA,EADEgJ,EACO,OAEA,OAEX,MACF,IAAK,KACL,IAAK,KAEDhJ,EADEgJ,EACO,OAEA,OAKf,OAAOhJ,EAAM,UAAMA,EAAN,WAAwB,GC1FhC,SAASkJ,EACd1I,GAEA,MAAwB,SAAjBA,EAAQpD,KCLV,IAAM+L,EAAO,CAClBC,WAAY,YACZC,YAAa,aACbC,WAAY,YACZC,SAAU,UACVC,MAAO,QACPC,OAAQ,SACRC,OAAQ,SACRC,UAAW,YACX,WACE,MAAO,uBAAuBC,KAAK3K,OAAO4K,UAAUC,UAChD,UACA,WAENC,IAAK,MACLC,MAAO,KAGF,SAASC,EAAWC,GACzB,OACEA,IAAYf,EAAKC,YACjBc,IAAYf,EAAKE,aACjBa,IAAYf,EAAKG,YACjBY,IAAYf,EAAKI,SCFd,SAASY,EAAT,GAUgB,IATrBC,EASoB,EATpBA,SACA1K,EAQoB,EARpBA,EACAC,EAOoB,EAPpBA,EACAO,EAMoB,EANpBA,YACAxC,EAKoB,EALpBA,KACA6C,EAIoB,EAJpBA,QACAsE,EAGoB,EAHpBA,KACAwF,EAEoB,EAFpBA,SACAC,EACoB,EADpBA,SAKMC,EAAW3M,SAASC,cAAc,OAyExC,SAAS2M,EAAUC,GACjBA,EAAGC,kBAGL,SAASC,IACHJ,EAASpM,UACXkM,EAAkBE,EAASpM,UAhGnByM,QAkGRN,IAEFO,IAGF,SAASA,IACPN,EAASO,OAAS,KAClBP,EAASQ,UAAY,KACrBR,EAASS,QAAU,KACnB/L,OAAOgM,oBAAoB,QAAST,GAAW,GAC/C5M,SAASE,KAAKe,YAAY0L,GA1F5BA,EAASW,gBAAkB,OAC3BX,EAASY,SAAW,EACpBZ,EAASpM,UAAYiM,EACrBG,EAASpN,QAAQC,KAAO,UAExBqL,OAAO2C,OAAOb,EAASxM,MAAO,CAC5BsN,MAAOnL,EACPlC,SAAU,QACVuC,QAASA,EAAU,IACnB+K,IAAI,GAAD,OAAK3L,EAAL,MACH4L,KAAK,GAAD,OAAK7L,EAAL,MACJ8L,UAAU,+BAAD,OAAiC3G,EAAjC,KACT4G,UAAW,OACXhN,QAAS,eACTf,KAAMA,EACNgO,QAAS,MAGTC,QAAS,wBACT1N,WAAY,SACZ2N,UAAW,MACXC,mBAAoB,WAGtBtB,EAASS,QAAU,SAAAP,GACjB,IACE,IAAMzL,EAAYC,OAAOC,eACzB,KAAI,OAACF,QAAD,IAACA,OAAD,EAACA,EAAW8M,YACd,OAEF9M,EAAU+M,qBAEV,IAAMtO,EAAOgN,EAAGuB,cAAeC,QAAQ,QAAQC,QAAQ,SAAU,MAE3D1N,EAAOZ,SAASC,cAAc,QACpCW,EAAKL,UAAYV,EACjB,IAAM0B,EAAQH,EAAUmN,WAAW,GACnChN,EAAMiN,WAAW5N,GAGjBS,OAAOC,eAAgBI,kBACvBH,EAAMkN,SAAS7N,EAAMA,EAAK8N,WAAWpJ,QACrC/D,EAAMoN,OAAO/N,EAAMA,EAAK8N,WAAWpJ,QACnClE,EAAUO,SAASJ,GAEnBsL,EAAG+B,iBACH,MAAOC,GACP5E,QAAQ6E,MAAMD,KAIlBlC,EAASQ,UAAY,SAAAN,GACnB,GAAIA,EAAG9B,MAAQQ,EAAKM,OAElB,OADAgB,EAAG+B,iBACCpC,GACFG,EAASpM,UAAYiM,OACrBO,UAGFE,IAGF,GAAIJ,EAAG9B,MAAQQ,EAAKK,QAAUiB,EAAGkC,SAAU,CAEzC,GADAlC,EAAG+B,iBACC/B,EAAGmC,aAA8B,MAAfnC,EAAGP,QACvB,OAEFS,MAGJJ,EAASO,OAASH,EAuBlB1L,OAAO4N,iBAAiB,QAASrC,GAAW,GAC5C5M,SAASE,KAAKI,YAAYqM,GAC1BA,EAASuC,QACThO,EAAWyL,GCjIN,IAAMwC,EAAwB,SAACvM,GACpC,IAAMS,EAAUzD,EAAYgD,EAAQ/C,KAAM+C,EAAQ9C,MAClD8C,EAAQpC,MAAQ6C,EAAQ7C,MACxBoC,EAAQlC,OAAS2C,EAAQ3C,OACzBkC,EAAQ7B,SAAWsC,EAAQtC,UCLtB,SAASqO,EAAwBxM,GACtC,MAAqB,UAAjBA,EAAQpD,MAAqC,SAAjBoD,EAAQpD,KAC/BoD,EAAQO,OAAOmC,OAAS,EAER,IAAlB1C,EAAQpC,OAAkC,IAAnBoC,EAAQlC,OAMjC,SAAS2O,EACdC,EACA9O,EACAE,GAEA,IAAM6O,EAAWvN,KAAKC,IAAIzB,GACpBgP,EAAYxN,KAAKC,IAAIvB,GAc3B,MAZoB,SAAhB4O,GAA0C,UAAhBA,EACxBE,EAAYD,EAAW,EACzB7O,EAAS,EACA6O,EAAWC,EAAY,EAChChP,EAAQ,EAERE,EAAS6O,EAAWvN,KAAKqJ,KAAK3K,GAEP,cAAhB4O,IACT5O,EAAS6O,EAAWvN,KAAKqJ,KAAK3K,IAGzB,CAAEF,QAAOE,UAkCX,SAAS+O,EACd7M,GAEA,SACGA,GACAA,EAAQpC,OAAS,GAAKoC,EAAQlC,QAAU,GACxB,SAAjBkC,EAAQpD,MACS,UAAjBoD,EAAQpD,QAKNoD,EAAQpC,MAAQ,IAClBoC,EAAQpC,MAAQwB,KAAKC,IAAIW,EAAQpC,OACjCoC,EAAQd,GAAKc,EAAQpC,OAGnBoC,EAAQlC,OAAS,IACnBkC,EAAQlC,OAASsB,KAAKC,IAAIW,EAAQlC,QAClCkC,EAAQb,GAAKa,EAAQlC,QAGvBkC,EAAQM,MAAQ,MAET,GCnFF,SAASwM,GACd5I,EACA6I,EACAC,EAHK,GAaJ,IARCC,EAQF,EAREA,QACAC,EAOF,EAPEA,QACA7I,EAMF,EANEA,KAMF,EAOIJ,EAAgBC,GAPpB,mBAGEiJ,EAHF,KAIEC,EAJF,KAKEC,EALF,KAMEC,EANF,KAUMC,EAAwBR,EAAgB1I,EACxCmJ,EAAyBR,EAAiB3I,EAM1CoJ,GAJoBV,EAAgBQ,GAIU,EAA9BN,EAChBS,GAJqBV,EAAiBQ,GAIS,EAA/BN,EAChBS,EAAeF,EAAeF,EAC9BK,EAAeF,EAAeF,EAG9BK,EAAYzO,KAAK0D,IAAIqK,EAAcM,GACnCK,EAAY1O,KAAK0D,IAAIsK,EAAcM,GACnCK,EAAY3O,KAAK6D,IAAIoK,EAAcM,GACnCK,EAAY5O,KAAK6D,IAAIqK,EAAcM,GAIzC,MAAO,CACLK,WACER,IAAiBI,GAAaF,IAAiBI,EAC3C,KACA,CACE7O,GACIuO,EAAeI,IAAcE,EAAYF,GACzCd,EAtDS,EAwDb5N,EAAG6N,EAvDgB,EADN,EAyDbpP,OACI+P,EAAeF,IAAiBM,EAAYF,GAC5Cd,EACFmB,EACFpQ,OA5DmB,GA8D3BqQ,SACET,IAAiBI,GAAaF,IAAiBI,EAC3C,KACA,CACE9O,EAAG6N,EAlEgB,EADN,EAoEb5N,GACIuO,EAAeI,IAAcE,EAAYF,GACzCd,EAtES,EAwEbpP,MAvEmB,EAwEnBE,QACI8P,EAAeF,IAAiBM,EAAYF,GAC5Cd,EACFkB,IChDP,SAASE,GAAelK,GAC7B,IAAImK,GAAkB,EAQtB,OAPAnK,EAASC,SAAQ,SAAAnE,GACXA,EAAQG,aACVkO,GAAkB,EAClBrO,EAAQG,YAAa,MAIlBkO,EAAkBnK,EAAS3H,QAAU2H,EAGvC,SAASoK,GAAuBpK,GACrC,OAAOA,EAAS8D,QAAO,SAAAuG,GAAE,OAAKA,EAAGpO,cAG5B,SAASqO,GAAmBtK,GACjC,IAAMuK,EAA4B,GAMlC,OALAvK,EAASC,SAAQ,SAACnE,EAAS0O,GACrB1O,EAAQG,YACVsO,EAAgBE,KAAKD,MAGlBD,EAGF,SAASG,GACd1K,GAEA,OAAOA,EAASiD,MAAK,SAAAnH,GAAO,OAAIA,EAAQG,cAmBnC,SAAS0O,GACd3K,GAEA,OAAOA,EAAS8D,QAAO,SAAAhI,GAAO,OAAIA,EAAQG,cC/E5C,IAAM2O,GAAoB,qBdDnB,WACL,IAAMC,EAAO,IAAIC,KACXC,EAAOF,EAAKG,cACZC,EAAQJ,EAAKK,WAAa,EAC1BC,EAAMN,EAAKO,UACXC,EAAKR,EAAKS,WACV1M,EAAMiM,EAAKU,aACXC,EAAOX,EAAKY,aAElB,MAAM,GAAN,OAAUV,GAAV,OAAiBE,GAAjB,OAAyBE,GAAzB,OAA+BE,GAA/B,OAAoCzM,GAApC,OAA0C4M,GcRDE,IAEpC,SAASC,KACd,MAAO,CACLC,gBAAiB,KACjBvH,gBAAiB,KACjBwH,aAAc,KACdC,eAAgB,KAChBtD,YAAa,YACbuD,eAAe,EACfC,kBAAkB,EAClBC,uBAAwB,UACxBC,2BAA4B,cAC5BC,qBAAsB,UACtBC,uBAAwB,EACxBC,qBAAsB,EACtBC,mBAAoB,IACpBC,gBAAiB,cACjBC,oBAAqB,UACrBzD,QAAS,EACTC,QAAS,EACTyD,QAAS,EACTC,QAAS,EACTC,iBAAiB,EACjBC,KAAMhC,GACNiC,YAAY,EACZC,iBAAkB,KAClB3M,KAAM,GAiBH,SAAS4M,GACdC,GAEA,MAAO,CACLhB,iBAAkBgB,EAAShB,iBAC3BC,uBAAwBe,EAASf,uBACjCC,2BAA4Bc,EAASd,2BACrCC,qBAAsBa,EAASb,qBAC/BC,uBAAwBY,EAASZ,uBACjCC,qBAAsBW,EAASX,qBAC/BC,mBAAoBU,EAASV,mBAC7BC,gBAAiBS,EAAST,gBAC1BC,oBAAqBQ,EAASR,oBAC9BI,KAAMI,EAASJ,MAIZ,SAASK,GAAuBD,GACrC,MAAO,CACLR,oBAAqBQ,EAASR,qBCxD3B,SAASU,GACdC,EACAnS,EACAC,EACAvB,EACAE,EACAwT,GAEAD,EAAQE,YACRF,EAAQG,OAAOtS,EAAIoS,EAAQnS,GAC3BkS,EAAQI,OAAOvS,EAAItB,EAAQ0T,EAAQnS,GACnCkS,EAAQK,iBAAiBxS,EAAItB,EAAOuB,EAAGD,EAAItB,EAAOuB,EAAImS,GACtDD,EAAQI,OAAOvS,EAAItB,EAAOuB,EAAIrB,EAASwT,GACvCD,EAAQK,iBACNxS,EAAItB,EACJuB,EAAIrB,EACJoB,EAAItB,EAAQ0T,EACZnS,EAAIrB,GAENuT,EAAQI,OAAOvS,EAAIoS,EAAQnS,EAAIrB,GAC/BuT,EAAQK,iBAAiBxS,EAAGC,EAAIrB,EAAQoB,EAAGC,EAAIrB,EAASwT,GACxDD,EAAQI,OAAOvS,EAAGC,EAAImS,GACtBD,EAAQK,iBAAiBxS,EAAGC,EAAGD,EAAIoS,EAAQnS,GAC3CkS,EAAQM,YACRN,EAAQO,OACRP,EAAQQ,SCnCH,SAASC,GAAcC,GAC5B,GAAe,OAAXA,EACF,MAAO,CAAE7S,EAAG,EAAGC,EAAG,GAEpB,IAAMkS,EAAUU,EAAOC,WAAW,MAClC,OAAgB,OAAZX,EACK,CAAEnS,EAAG,EAAGC,EAAG,GAMb,CACLD,EAJ4B6S,EAAOnU,MAAQyT,EAAQY,eAAe/L,EAIvC,EAC3B/G,EAJ6B4S,EAAOjU,OAASuT,EAAQY,eAAeC,EAIxC,GAIzB,SAASC,GAAmBJ,EAA2B1N,GAC5D,IAAM+N,EAAwB,CAC5BlT,EAAI6S,EAAOnU,MAAQ,GAAMyG,EAAO,GAChClF,EAAI4S,EAAOjU,OAAS,GAAMuG,EAAO,IAInC,MAAO,CACLnF,EAAGmT,WAAWD,EAAsBlT,EAAEoT,QAAQ,IAC9CnT,EAAGkT,WAAWD,EAAsBjT,EAAEmT,QAAQ,KAI3C,SAASC,GAAkBlO,GAChC,IAAMmO,EAAiBH,WAAWhO,EAAKiO,QAAQ,IAE/C,OADoBlT,KAAK6D,IAAI,GAAK7D,KAAK0D,IAAI0P,EAAgB,ICvB7D,SAASC,GACPzS,EACA0S,GAEA,IAAK1S,EAAQM,MACX,OAAQN,EAAQpD,MACd,IAAK,YACHoD,EAAQM,MAAQoS,EAAUC,UACxB,EACA,EACA3S,EAAQpC,MACRoC,EAAQlC,OACR,CACE+T,OAAQ7R,EAAQN,YAChBkS,KAC8B,gBAA5B5R,EAAQL,qBACJiT,EACA5S,EAAQL,gBACdC,UAAWI,EAAQJ,UACnBC,YAAaG,EAAQH,YACrBC,UAAWE,EAAQF,UACnBM,KAAMJ,EAAQI,OAGlB,MACF,IAAK,UAAY,IAAD,EAUViC,EAAiBrC,GAVP,mBAEZsC,EAFY,KAGZsE,EAHY,KAIZpE,EAJY,KAKZC,EALY,KAMZoE,EANY,KAOZC,EAPY,KAQZC,EARY,KASZC,EATY,KAWdhH,EAAQM,MAAQoS,EAAUG,QACxB,CACE,CAACvQ,EAAMsE,GACP,CAACpE,EAAQC,GACT,CAACoE,EAASC,GACV,CAACC,EAAOC,IAEV,CACE6K,OAAQ7R,EAAQN,YAChBkS,KAC8B,gBAA5B5R,EAAQL,qBACJiT,EACA5S,EAAQL,gBACdC,UAAWI,EAAQJ,UACnBC,YAAaG,EAAQH,YACrBC,UAAWE,EAAQF,UACnBM,KAAMJ,EAAQI,OAGlB,MAEF,IAAK,UACHJ,EAAQM,MAAQoS,EAAUI,QACxB9S,EAAQpC,MAAQ,EAChBoC,EAAQlC,OAAS,EACjBkC,EAAQpC,MACRoC,EAAQlC,OACR,CACE+T,OAAQ7R,EAAQN,YAChBkS,KAC8B,gBAA5B5R,EAAQL,qBACJiT,EACA5S,EAAQL,gBACdC,UAAWI,EAAQJ,UACnBC,YAAaG,EAAQH,YACrBC,UAAWE,EAAQF,UACnBM,KAAMJ,EAAQI,KACd2S,aAAc,IAGlB,MACF,IAAK,OACL,IAAK,QACH,IAAMC,EAAU,CACdnB,OAAQ7R,EAAQN,YAChBG,YAAaG,EAAQH,YACrBC,UAAWE,EAAQF,UACnBM,KAAMJ,EAAQI,MAIVG,EAAkBP,EAAQO,OAAOmC,OACnC1C,EAAQO,OACR,CAAC,CAAC,EAAG,IAOT,GAHAP,EAAQM,MAAQ,CAACoS,EAAUO,MAAM1S,EAAQyS,IAGpB,UAAjBhT,EAAQpD,KAAkB,CAAC,IAAD,Idc/B,SAAwBoD,GAC7B,IACMoD,EADQpD,EAAQM,MACJ,GAAG+C,KAAK,GAAGD,IAEvBI,EAAOJ,EAAIA,EAAIV,OAAS,GAAGc,KAC3BG,EAAK,CAACH,EAAK,GAAIA,EAAK,IACpBE,EAAK,CAACF,EAAK,GAAIA,EAAK,IACpBC,EAAK,CAACD,EAAK,GAAIA,EAAK,IAKpB0P,EAAS9P,EAAIA,EAAIV,OAAS,GAC5BkB,EAAY,CAAC,EAAG,GACF,SAAdsP,EAAO3P,GACTK,EAAKsP,EAAO1P,KACW,aAAd0P,EAAO3P,KAChBK,EAAK,CAACsP,EAAO1P,KAAK,GAAI0P,EAAO1P,KAAK,KAIpC,IAAMK,EAAW,SAACC,EAAWC,GAAZ,OACf3E,KAAK4E,IAAI,EAAIF,EAAG,GAAKH,EAAGI,GACxB,EAAID,EAAI1E,KAAK4E,IAAI,EAAIF,EAAG,GAAKJ,EAAGK,GAChC,EAAI3E,KAAK4E,IAAIF,EAAG,IAAM,EAAIA,GAAKL,EAAGM,GAClCH,EAAGG,GAAO3E,KAAK4E,IAAIF,EAAG,IAGjB1C,EAAUuC,EA5BwC,GA4B9CtC,EAAMsC,EA5BwC,KAkCxC,CAACE,EAAS,GAAK,GAAIA,EAAS,GAAK,IAA3C3C,EAlCkD,KAkC9CC,EAlC8C,KAsCnDlC,EAAWG,KAAK0C,MAAMV,EAAKF,EAAIG,EAAKF,GACpCgS,GAAM/R,EAAKF,GAAMjC,EACjBmU,GAAM/R,EAAKF,GAAMlC,EAGjBoU,EAAcrT,EAAQO,OAAOoC,QAAO,SAAC2Q,EAAD,EAAkBvP,EAAKxD,GAAY,IAAD,mBAAzBgT,EAAyB,KAArBC,EAAqB,OACzDzP,EAAM,EAAIxD,EAAOwD,EAAM,GAAK,CAAC,EAAG,GADyB,mBACnE+B,EADmE,KAC/DC,EAD+D,KAE1E,OAAOuN,EAAQlU,KAAK0C,MAAMyR,EAAKzN,EAAI0N,EAAKzN,KACvC,GAKG0N,EAAUrU,KAAK0D,IATR,GASkBuQ,EAAc,GACvCK,EAAKtS,EAAK+R,EAAKM,EACfE,EAAKtS,EAAK+R,EAAKK,EArDoC,EAwDxC1R,EAAO2R,EAAIC,EAAIvS,EAAIC,GADtB,GACoCjC,KAAKwU,GAAM,KAxDJ,mBAwDlDC,EAxDkD,KAwD9CC,EAxD8C,OAyDxC/R,EAAO2R,EAAIC,EAAIvS,EAAIC,EAFtB,GAEmCjC,KAAKwU,GAAM,KAzDH,mBA2DzD,MAAO,CAACxS,EAAIC,EAAIwS,EAAIC,EA3DqC,WcbhBC,CAAe/T,GADpB,mBACrBoB,EADqB,KACjBC,EADiB,KACbwS,EADa,KACTC,EADS,KACLE,EADK,KACDC,EADC,MAE5B,EAAAjU,EAAQM,OAAMqO,KAAd,QACK,CACD+D,EAAUvV,KAAK0W,EAAIC,EAAI1S,EAAIC,EAAI2R,GAC/BN,EAAUvV,KAAK6W,EAAIC,EAAI7S,EAAIC,EAAI2R,OAUtC,SAASkB,GACdlU,EACAmU,EACA9C,GAEA,IAAMqB,EAAYyB,EAAGzB,UACrB,OAAQ1S,EAAQpD,MACd,IAAK,YACH,IAAMgD,EAAYyR,EAAQzR,UAC1ByR,EAAQzR,UAAY,wBACpByR,EAAQ+C,SAAS,EAAG,EAAGpU,EAAQpC,MAAOoC,EAAQlC,QAC9CuT,EAAQzR,UAAYA,EACpB,MAEF,IAAK,YACL,IAAK,UACL,IAAK,UACH6S,GAAgBzS,EAAS0S,GACzBrB,EAAQgD,YAAcrU,EAAQD,QAAU,IACxCoU,EAAGG,KAAKtU,EAAQM,OAChB+Q,EAAQgD,YAAc,EACtB,MACF,IAAK,OACL,IAAK,QACH5B,GAAgBzS,EAAS0S,GACzBrB,EAAQgD,YAAcrU,EAAQD,QAAU,IACvCC,EAAQM,MAAqB6D,SAAQ,SAAA7D,GAAK,OAAI6T,EAAGG,KAAKhU,MACvD+Q,EAAQgD,YAAc,EACtB,MAEF,QACE,IAAI3L,EAAc1I,GAiBhB,MAAM,IAAIuH,MAAJ,6BAAgCvH,EAAQpD,OAhB9CyU,EAAQgD,YAAcrU,EAAQD,QAAU,IACxC,IAAM7C,EAAOmU,EAAQnU,KACrBmU,EAAQnU,KAAO8C,EAAQ9C,KACvB,IAAM0C,EAAYyR,EAAQzR,UAC1ByR,EAAQzR,UAAYI,EAAQN,YAK5B,IAHA,IAAM6U,EAAQvU,EAAQ/C,KAAKyO,QAAQ,SAAU,MAAM8I,MAAM,MACnDC,EAAazU,EAAQlC,OAASyW,EAAM7R,OACpCgS,EAAS1U,EAAQlC,OAASkC,EAAQ7B,SAC/BwW,EAAI,EAAGA,EAAIJ,EAAM7R,OAAQiS,IAChCtD,EAAQuD,SAASL,EAAMI,GAAI,GAAIA,EAAI,GAAKF,EAAaC,GAEvDrD,EAAQzR,UAAYA,EACpByR,EAAQnU,KAAOA,EACfmU,EAAQgD,YAAc,GAQvB,SAASQ,GACd7U,EACA8U,EACAC,EACAC,EACAC,GAEA,IAAMvC,EAAYoC,EAAKpC,UACvB,OAAQ1S,EAAQpD,MACd,IAAK,YAGH,MAAM,IAAI2K,MAAM,gDAElB,IAAK,YACL,IAAK,UACL,IAAK,UACL,IAAK,OACHkL,GAAgBzS,EAAS0S,GACzB,IAAMnU,EAAOuW,EAAKR,KAAKtU,EAAQM,OACzBP,EAAUC,EAAQD,QAAU,IAClB,IAAZA,IACFxB,EAAK2W,aAAa,iBAAlB,UAAuCnV,IACvCxB,EAAK2W,aAAa,eAAlB,UAAqCnV,KAEvCxB,EAAK2W,aACH,YADF,oBAEeF,GAAW,EAF1B,YAE+BC,GAAW,EAF1C,MAIAF,EAAQrX,YAAYa,GACpB,MAEF,IAAK,QACHkU,GAAgBzS,EAAS0S,GACzB,IAAMyC,EAAQJ,EAAQK,cAAeC,gBAAgBnZ,EAAQ,KACvD6D,EAAUC,EAAQD,QAAU,IACjCC,EAAQM,MAAqB6D,SAAQ,SAAA7D,GACpC,IAAM/B,EAAOuW,EAAKR,KAAKhU,GACP,IAAZP,IACFxB,EAAK2W,aAAa,iBAAlB,UAAuCnV,IACvCxB,EAAK2W,aAAa,eAAlB,UAAqCnV,KAEvCxB,EAAK2W,aACH,YADF,oBAEeF,GAAW,EAF1B,YAE+BC,GAAW,EAF1C,MAIAE,EAAMzX,YAAYa,MAEpBwW,EAAQrX,YAAYyX,GACpB,MAEF,QACE,IAAIzM,EAAc1I,GAiChB,MAAM,IAAIuH,MAAJ,6BAAgCvH,EAAQpD,OAhC9C,IAAMmD,EAAUC,EAAQD,QAAU,IAC5BxB,EAAOwW,EAAQK,cAAeC,gBAAgBnZ,EAAQ,KAC5C,IAAZ6D,IACFxB,EAAK2W,aAAa,iBAAlB,UAAuCnV,IACvCxB,EAAK2W,aAAa,eAAlB,UAAqCnV,KAEvCxB,EAAK2W,aACH,YADF,oBAEeF,GAAW,EAF1B,YAE+BC,GAAW,EAF1C,MAIA,IAAMV,EAAQvU,EAAQ/C,KAAKyO,QAAQ,SAAU,MAAM8I,MAAM,MACnDC,EAAazU,EAAQlC,OAASyW,EAAM7R,OACpCgS,EAAS1U,EAAQlC,OAASkC,EAAQ7B,SAClCmX,EAAYtV,EAAQ9C,KAAKsX,MAAM,KAAKxM,QAAO,SAAAkK,GAAC,QAAMA,EAAE9H,UACtDmL,EAAaD,EAAU,GACvBE,EAAW,OACXF,EAAU5S,OAAS,IACrB6S,EAAaD,EAAU,GACvBE,EAAWF,EAAU,IAEvB,IAAK,IAAIX,EAAI,EAAGA,EAAIJ,EAAM7R,OAAQiS,IAAK,CACrC,IAAM1X,EAAO8X,EAAQK,cAAeC,gBAAgBnZ,EAAQ,QAC5De,EAAKwY,YAAclB,EAAMI,GACzB1X,EAAKiY,aAAa,IAAK,KACvBjY,EAAKiY,aAAa,IAAlB,WAA2BP,EAAI,GAAKF,EAAaC,IACjDzX,EAAKiY,aAAa,cAAeK,GACjCtY,EAAKiY,aAAa,YAAaM,GAC/BvY,EAAKiY,aAAa,OAAQlV,EAAQN,aAClCnB,EAAKb,YAAYT,GAEnB8X,EAAQrX,YAAYa,IChPrB,SAASmX,GACdxR,EACA8M,EACAmD,EACApC,EACA4D,GAaU,IAAD,yDADL,GATFX,EAUO,EAVPA,QACAC,EASO,EATPA,QASO,IARPW,wBAQO,aAPPC,uBAOO,SACT,IAAK9D,EACH,OAAO,EAIT4D,EAAU,eACLA,EADK,CAER1I,QAA4B,kBAAZ+H,EAAuBA,EAAUW,EAAW1I,QAC5DC,QAA4B,kBAAZ+H,EAAuBA,EAAUU,EAAWzI,UAG9D,IAAMmE,EAAUU,EAAOC,WAAW,MAG5B8D,EAA0BzE,EAAQY,eAGlC8D,EACJhE,EAAOnU,MAAQoY,GAA0BF,GACrCG,EACJlE,EAAOjU,OAASoY,GAA0BJ,GAG5C,SAASK,IACP9E,EAAQ+E,aACNJ,GAA0BF,GAA2BH,EAAWtR,KAChE,EACA,EACA6R,GAA0BJ,GAA2BH,EAAWtR,KAChEgS,GAA8BhF,EAAQY,gBACtCqE,GAA8BjF,EAAQY,iBAK1C,IAAMsE,EAAkBpE,GAAmBJ,EAAQ4D,EAAWtR,MAC9D,SAASmS,IACPnF,EAAQ+E,aACNJ,GAA0B3E,EAAQY,gBAClC,EACA,EACAiE,GAA0B7E,EAAQY,gBAClCoE,GAA8BP,GAC5BS,EAAgBrX,EAClBoX,GAA8BR,GAC5BS,EAAgBpX,GAMtB,GADAkS,EAAQoF,OACsC,kBAAnCd,EAAWjF,oBAAkC,CACtD,IAAMgG,EAC+B,gBAAnCf,EAAWjF,qBAC+B,IAA1CiF,EAAWjF,oBAAoBhO,QACW,IAA1CiT,EAAWjF,oBAAoBhO,OAC7BgU,GACFrF,EAAQsF,UAAU,EAAG,EAAGZ,EAAuBE,GAEjD5E,EAAQzR,UAAY+V,EAAWjF,oBAC/BW,EAAQ+C,SAAS,EAAG,EAAG2B,EAAuBE,QAE9C5E,EAAQsF,UAAU,EAAG,EAAGZ,EAAuBE,GAEjD5E,EAAQuF,UAGR,IAAMC,EAAkB3S,EAAS8D,QAAO,SAAAhI,GAAO,OAC7C8W,GACE9W,EACA+V,EACAE,EACAN,MA4BJ,GAxBAtE,EAAQoF,OACRN,IACAK,IACAnF,EAAQ0F,UAAUpB,EAAW1I,QAAS0I,EAAWzI,SACjD2J,EAAgB1S,SAAQ,SAAAnE,GACtBqR,EAAQoF,OACRpF,EAAQ0F,UAAU/W,EAAQd,EAAGc,EAAQb,GACrC+U,GAAclU,EAASmU,EAAI9C,GAC3BA,EAAQuF,aAEVvF,EAAQuF,UAGJ5F,IACFK,EAAQoF,OACRN,IACAK,IACAnF,EAAQ0F,UAAUpB,EAAW1I,QAAS0I,EAAWzI,SACjDmE,EAAQ0F,UAAU/F,EAAiB9R,EAAG8R,EAAiB7R,GACvD+U,GAAclD,EAAkBmD,EAAI9C,GACpCA,EAAQuF,WAINf,EAAiB,CACnB,IAAMmB,EAAmBnI,GAAoB3K,GACvC+S,EAAqB,EAAItB,EAAWtR,KA8B1C,GA5BAgN,EAAQoF,OACRN,IACAK,IACAnF,EAAQ0F,UAAUpB,EAAW1I,QAAS0I,EAAWzI,SACjD8J,EAAiB7S,SAAQ,SAAAnE,GAAY,IAAD,EAM9BmC,EAAyBnC,GANK,mBAEhC0E,EAFgC,KAGhCC,EAHgC,KAQ5BG,EAR4B,KAQDJ,EAC3BK,EAT4B,KASAJ,EAE5BuS,EAAkB7F,EAAQ8F,cAChC9F,EAAQ+F,YAAY,CAAC,EAAIzB,EAAWtR,KAAM,EAAIsR,EAAWtR,OACzDgN,EAAQgG,WACN3S,EAAYuS,EACZtS,EAAYsS,EACZnS,EAAoC,EAArBmS,EACflS,EAAqC,EAArBkS,GAElB5F,EAAQ+F,YAAYF,MAEtB7F,EAAQuF,UAGwB,IAA5BI,EAAiBtU,QAA6C,SAA7BsU,EAAiB,GAAGpa,KAAiB,CACxEyU,EAAQoF,OACRN,IACAK,IACAnF,EAAQ0F,UAAUpB,EAAW1I,QAAS0I,EAAWzI,SACjD,IAAMjI,EAAWb,EAAkB4S,EAAiB,GAAIrB,EAAWtR,MACnE4D,OAAOqP,OAAOrS,GACX+C,QAAO,SAAAI,GAAO,YAAgBwK,IAAZxK,KAClBjE,SAAQ,SAAAiE,GACPiJ,EAAQgG,WAAWjP,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,OAEnEiJ,EAAQuF,WAKZ,GAAIhB,EAAkB,CACpB,IAAM2B,EAAazK,GACjB5I,EACA6R,EACAE,EACAN,GAGFtE,EAAQoF,OACRpF,EAAQzR,UN7LmB,kBM8L3ByR,EAAQmG,YAAc,wBACtB,CAACD,EAAWtJ,WAAYsJ,EAAWpJ,UAAUhK,SAAQ,SAAAsT,GAC/CA,GACFrG,GACEC,EACAoG,EAAUvY,EACVuY,EAAUtY,EACVsY,EAAU7Z,MACV6Z,EAAU3Z,OACV4Z,MAINrG,EAAQuF,UAGV,OAAOC,EAAgBnU,OAAS,EAGlC,SAASoU,GACP9W,EACA+M,EACAC,EAHF,GAaG,IARCC,EAQF,EAREA,QACAC,EAOF,EAPEA,QACA7I,EAMF,EANEA,KAMF,EACyBlC,EAAyBnC,GADlD,mBACOkB,EADP,KACWC,EADX,KACeC,EADf,KACmBC,EADnB,KAIMkM,EAAwBR,EAAgB1I,EACxCmJ,EAAyBR,EAAiB3I,EAE1CsT,EAAoB5K,EAAgBQ,EACpCqK,EAAqB5K,EAAiBQ,EAE5C,OACEpM,EAAK6L,EAAU0K,EAAoB,GAAK,GACxCzW,EAAK+L,EAAU0K,EAAoB,GAAKpK,GACxClM,EAAK6L,EAAU0K,EAAqB,GAAK,GACzCzW,EAAK+L,EAAU0K,EAAqB,GAAKpK,EAgC7C,SAASwI,GAA0BhL,GACjC,OAAOA,EAAU9E,EAEnB,SAASgQ,GAA0BlL,GACjC,OAAOA,EAAUkH,EAEnB,SAASmE,GAA8BrL,GACrC,OAAOA,EAAUtF,EAEnB,SAAS4Q,GAA8BtL,GACrC,OAAOA,EAAU6M,ECrRZ,SAASC,GACd5T,EADK,OAGHgM,EAHG,EAGHA,iBAHG,IAIH6H,qBAJG,MAIa,GAJb,EAKHrH,EALG,EAKHA,oBALG,IAMHsH,aANG,MAMK,EANL,EAaLC,EAbK,uDAakD,SACrDra,EACAE,GAEA,IAAMoa,EAAa9a,SAASC,cAAc,UAG1C,OAFA6a,EAAWta,MAAQA,EAAQoa,EAC3BE,EAAWpa,OAASA,EAASka,EACtBE,GApBJ,kBAsBJ,IAAD,IAEiCjU,EAAgBC,GAFjD,mBAEOnB,EAFP,KAEaF,EAFb,KAEmBG,EAFnB,KAEyBE,EAFzB,KAGMtF,EAAQqB,EAAS8D,EAAMC,GAAwB,EAAhB+U,EAC/Bja,EAASmB,EAAS4D,EAAMK,GAAwB,EAAhB6U,EAEhCG,EAAkBD,EAAara,EAAOE,GAqB5C,OApBA,UAAAoa,EAAWlG,WAAW,aAAtB,SAA6BgG,MAAMA,EAAOA,GAE1CtC,GACExR,EACA,KACAiU,IAAMpG,OAAOmG,GACbA,EACA,CACExH,oBAAqBR,EAAmBQ,EAAsB,KAC9DzD,QAAS,EACTC,QAAS,EACT7I,KAAM,GAER,CACE2Q,SAAUjS,EAAOgV,EACjB9C,SAAUpS,EAAOkV,EACjBnC,kBAAkB,EAClBC,iBAAiB,IAGdqC,EAjDF,GAoDA,SAASE,GACdlU,EADK,GAWW,IARdgM,EAQa,EARbA,iBAQa,IAPb6H,qBAOa,MAPG,GAOH,EANbrH,EAMa,EANbA,oBAMa,EAEkBzM,EAAgBC,GAFlC,mBAERnB,EAFQ,KAEFF,EAFE,KAEIG,EAFJ,KAEUE,EAFV,KAGTtF,EAAQqB,EAAS8D,EAAMC,GAAwB,EAAhB+U,EAC/Bja,EAASmB,EAAS4D,EAAMK,GAAwB,EAAhB6U,EAGhChD,EAAU3X,SAASiY,gBAAgBnZ,EAAQ,OAqBjD,GApBA6Y,EAAQG,aAAa,UAAW,OAChCH,EAAQG,aAAa,QAAShZ,GAC9B6Y,EAAQG,aAAa,UAArB,cAAuCtX,EAAvC,YAAgDE,IAEhDiX,EAAQsD,UAAR,wSAgBInI,GAAoBQ,EAAqB,CAC3C,IAAM4H,EAAOvD,EAAQK,cAAeC,gBAAgBnZ,EAAQ,QAC5Doc,EAAKpD,aAAa,IAAK,KACvBoD,EAAKpD,aAAa,IAAK,KACvBoD,EAAKpD,aAAa,QAAlB,UAA8BtX,IAC9B0a,EAAKpD,aAAa,SAAlB,UAA+BpX,IAC/Bwa,EAAKpD,aAAa,OAAQxE,GAC1BqE,EAAQrX,YAAY4a,GAQtB,ODsIK,SACLpU,EACA4Q,EACAC,GAQC,IAAD,yDADI,GACJ,IANEC,eAMF,MANY,EAMZ,MALEC,eAKF,MALY,EAKZ,EACKF,GAIL7Q,EAASC,SAAQ,SAAAnE,GACf6U,GACE7U,EACA8U,EACAC,EACA/U,EAAQd,EAAI8V,EACZhV,EAAQb,EAAI8V,MChKhBsD,CAAiBrU,EADJiU,IAAMK,IAAIzD,GACUA,EAAS,CACxCC,SAAUjS,EAAOgV,EACjB9C,SAAUpS,EAAOkV,IAEZhD,E,sBC9GI0D,GAAY,CACvB,CAAEC,IAAK,KAAMC,MAAO,UAAWnV,KAAMoV,EAAQ,KAC7C,CAAEF,IAAK,KAAMC,MAAO,UAAWnV,KAAMoV,EAAQ,KAC7C,CAAEF,IAAK,KAAMC,MAAO,aAAWnV,KAAMoV,EAAQ,KAC7C,CAAEF,IAAK,KAAMC,MAAO,cAAYnV,KAAMoV,EAAQ,KAC9C,CACEF,IAAK,QACLC,MAAO,kBACPnV,KAAMoV,EAAQ,KAEhB,CAAEF,IAAK,KAAMC,MAAO,SAAUnV,KAAMoV,EAAQ,KAC5C,CAAEF,IAAK,KAAMC,MAAO,eAAanV,KAAMoV,EAAQ,KAC/C,CAAEF,IAAK,KAAMC,MAAO,6CAAWnV,KAAMoV,EAAQ,MAG3CC,GAAkBJ,GAAU,GAC1BK,GAAmBL,GAAU,GAE5B,SAASM,GAAYC,GAC1BH,GACEJ,GAAUQ,MAAK,SAAAC,GAAQ,OAAIA,EAASR,MAAQM,MAAWF,GAEzDK,GAAiBC,kBAAkBP,GAAgBH,KAOrD,SAASW,GAAiB7V,EAAW8V,GACnC,IAAK,IAAI3E,EAAI,EAAGA,EAAI2E,EAAM5W,SAAUiS,EAAG,CACrC,IAAM4E,EAAOD,EAAM3E,GACnB,QAAmB/B,IAAfpP,EAAK+V,GACP,OAEF/V,EAAOA,EAAK+V,GAEd,GAAoB,kBAAT/V,EAGX,OAAOA,EAGF,SAASM,GAAE0V,EAAcC,GAC9B,IAAMH,EAAQE,EAAKhF,MAAM,KACrBkF,EACFL,GAAiBR,GAAgBrV,KAAM8V,IACvCD,GAAiBP,GAAiBtV,KAAM8V,GAC1C,QAAoB1G,IAAhB8G,EACF,MAAM,IAAInS,MAAJ,qCAAwCiS,IAGhD,GAAIC,EACF,IAAK,IAAItR,KAAOsR,EACdC,EAAcA,EAAYhO,QAAZ,YAAyBvD,EAAzB,MAAkCsR,EAAYtR,IAGhE,OAAOuR,EAGT,IAAMP,GAAmB,IAAIQ,KAC7BR,GAAiBS,KAAK,CACpBC,cAAe,CACbC,mBAAoB,SAASpB,GAC3B,OAAOA,GAETqB,cAAe,kBAAM,IAEvBC,gBAAgB,IAGlBjB,GAAYI,GAAiBc,UCtE7B,IAAIC,GAAY,GACZC,IAAuB,EAEdC,GACX,cAAe/Q,WAAa,aAAcA,UAAUgR,UAEzCC,GACX,cAAejR,WAAa,cAAeA,UAAUgR,UAE1CE,GACX,cAAelR,WACf,UAAWA,UAAUgR,WACrB,kBAAmB5b,QACnB,WAAY+b,kBAAkBC,UAEzB,SAAeC,GAAtB,mC,8CAAO,WACLxW,GADK,SAAAgC,EAAA,6DAGLgU,GAAYpZ,KAAKE,UACf6N,GAAoB3K,GAAUyW,KAAI,cAAGra,MAAH,oCAJ/B,kBAUGsa,GAA0B,MAV7B,OAWHT,IAAuB,EAXpB,gDAgBHA,IAAuB,EAhBpB,0D,sBAoBA,SAASU,KAGd,IACE,IAAMC,EAAoBha,KAAKC,MAAMmZ,IAErC,GACEtZ,MAAMC,QAAQia,IACdA,EAAkBpY,OAAS,GAC3BoY,EAAkB,GAAGle,KAErB,MAAO,CAAEsH,SAAU4W,GAErB,MAAO7O,GACP5E,QAAQ6E,MAAMD,GAGhB,MAAO,GAGF,SAAe8O,GAAtB,mC,8CAAO,WACLrV,GADK,iBAAAQ,EAAA,mEAOUR,EAPV,+BAQCA,EAAE8F,qBARH,aAQC,EAAiBC,QAAQ,cAAcrB,OARxC,+BASCgQ,IATD,sCAUQ/Q,UAAUgR,UAAUW,WAV5B,kDAOG/d,EAPH,OAYUkd,GAZV,0CAaM,CAAEld,SAbR,0DAgBHoK,QAAQ6E,MAAR,MAhBG,iCAmBE2O,MAnBF,2D,sBAsBA,SAAeI,GAAtB,mC,8CAAO,WAA0ClJ,GAA1C,SAAA7L,EAAA,+EACE,IAAIgV,SAAQ,SAACC,EAASC,GAC3B,IACErJ,EAAOsJ,OAAP,uCAAc,WAAeC,GAAf,SAAApV,EAAA,+EAEJmD,UAAUgR,UAAUkB,MAAM,CAC9B,IAAI9c,OAAO+c,cAAc,CAAE,YAAaF,MAHhC,OAKVH,IALU,+CAOVC,EAAO,EAAD,IAPI,wDAAd,uDAUA,MAAOnP,GACPmP,EAAOnP,QAdN,4C,sBAmBA,SAAe2O,GAAtB,mC,8CAAO,WAAyC3d,GAAzC,eAAAiJ,EAAA,yDACDuV,GAAS,GACTnB,GAFC,0CAMKjR,UAAUgR,UAAUqB,UAAUze,GAAQ,IAN3C,OAODwe,GAAS,EAPR,2DAaAA,GAAWE,GAAuB1e,GAAQ,KAb1C,uBAcG,IAAIsK,MAAM,iBAdb,0D,sBAmBP,SAASoU,GAAuB1e,GAC9B,IAAM2e,EAAyD,QAAjDxe,SAASmC,gBAAgBsc,aAAa,OAE9CC,EAAW1e,SAASC,cAAc,YAExCye,EAASve,MAAMwe,OAAS,IACxBD,EAASve,MAAM2N,QAAU,IACzB4Q,EAASve,MAAMye,OAAS,IACxBF,EAASve,MAAMC,SAAW,WAC1Bse,EAASve,MAAMqe,EAAQ,QAAU,QAAU,UAC3C,IAAMK,EAAYxd,OAAOyd,aAAe9e,SAASmC,gBAAgB4c,UACjEL,EAASve,MAAMuN,IAAf,UAAwBmR,EAAxB,MAEAH,EAASve,MAAMiY,SAAW,OAE1BsG,EAAS5G,aAAa,WAAY,IAClC4G,EAASM,MAAQnf,EAEjBG,SAASE,KAAKI,YAAYoe,GAE1B,IAAIO,GAAU,EAEd,IACEP,EAASQ,SACTR,EAASS,kBAAkB,EAAGT,EAASM,MAAM1Z,QAE7C2Z,EAAUjf,SAASof,YAAY,QAC/B,MAAOvQ,IAIT,OAFA6P,EAASW,SAEFJ,EC7GF,SAASK,GACdxY,EACAgN,GAEA,OAAOpQ,KAAKE,UACV,CACEpE,KAAM,aACN+f,QAAS,EACTC,OAAQne,OAAOoe,SAASC,OACxB5Y,SAAUA,EAASyW,KAAI,cAAGra,MAAH,EAAUH,WAAV,gDACvB+Q,SAAUC,GAAuBD,IAEnC,KACA,GAIG,SAAS6L,GACd7Y,GACuC,IAAD,EACbD,EAAgBC,GADH,mBAC/BhD,EAD+B,KAC3BC,EAD2B,KAGhC6b,GAAW9b,EAHqB,MAGV,EACtB+b,GAAW9b,EAJqB,MAIV,EAE5B,MAAO,CACL8L,QAASxO,OAAOye,WAAa,EAAIF,EACjC9P,QAASzO,OAAO0e,YAAc,EAAIF,G,8CAI/B,WACL/Y,EACAgN,GAFK,iBAAAhL,EAAA,6DAICkX,EAAaV,GAAgBxY,EAAUgN,GAEvCJ,EAND,UAMWI,EAASJ,KANpB,kBAOCuM,aACJ,IAAIC,KAAK,CAACF,GAAa,CAAExgB,KAAM,qBAC/B,CACE2gB,SAAUzM,EACV0M,YAAa,mBAEd/e,OAAegf,QAbb,4C,oEAgBA,4BAAAvX,EAAA,sEACcwX,aAAS,CAC1BF,YAAa,mBACbG,WAAY,CAAC,QACbC,UAAW,CAAC,sBAJT,cACCtC,EADD,yBAMEuC,GAAavC,IANf,4C,sBASA,SAAeuC,GAAtB,mC,8CAAO,WAA4BvC,GAA5B,uBAAApV,EAAA,yDACC4X,EAAiB,SAACC,GACtB,IAAMC,EAAkBnO,KACpB3L,EAAW,GACXgN,EAAW8M,EACf,IACE,IAAMxa,EAAO1C,KAAKC,MAAMgd,GACxB,GAAkB,eAAdva,EAAK5G,KACP,MAAM,IAAI2K,MAAM,4BAElBrD,EAAWV,EAAKU,UAAY,GAC5BgN,EAAQ,eAAQ8M,EAAR,GAA4Bxa,EAAK0N,UACzC,MAAOxL,IAGT,MAAO,CAAExB,WAAUgN,aAGjBoK,EAAKmC,SACNhf,OAAegf,OAASnC,EAAKmC,UAG5B,SAAUH,MAtBT,gCAuBchC,EAAKre,OAvBnB,OAuBH8gB,EAvBG,+CAyBc,IAAI7C,SAAQ,SAAAC,GAC3B,IAAM8C,EAAS,IAAIC,WACnBD,EAAOE,WAAW7C,EAAM,QACxB2C,EAAOG,UAAY,WACbH,EAAOI,aAAeH,WAAWI,MACnCnD,EAAQ8C,EAAOnW,YA9BlB,QAyBHiW,EAzBG,oBAmC0BD,EAAeC,GAAtC7Z,EAnCH,EAmCGA,SAAUgN,EAnCb,EAmCaA,SACbhN,EAASxB,OApCT,0CAqCIwY,QAAQE,OAAO,6BArCnB,iCAuCE,IAAIF,SAAmB,SAAAC,GAC5BA,EAAQvE,GAAQ1S,EAAUgN,EAAU,CAAEqN,iBAAiB,SAxCpD,6C,sBA4CA,SAAeC,GAAtB,yC,8CAAO,WACL5hB,EACAsH,EACA6N,EAHK,oCAAA7L,EAAA,yDAKHgK,EALG,EAKHA,iBALG,IAMH6H,qBANG,MAMa,GANb,EAOHrH,EAPG,EAOHA,oBACAI,EARG,EAQHA,KARG,IASHkH,aATG,MASK,EATL,EAkBA9T,EAASxB,OAlBT,yCAmBIjE,OAAOggB,MAAM3a,GAAE,oCAnBnB,UAuBQ,QAATlH,EAvBC,uBAwBG8hB,EAAUtG,GAAYlU,EAAU,CACpCgM,mBACAQ,sBACAqH,kBA3BC,SA6BGsF,aAAS,IAAIC,KAAK,CAACoB,EAAQC,WAAY,CAAE/hB,KAAM,kBAAoB,CACvE2gB,SAAS,GAAD,OAAKzM,EAAL,UA9BP,wCA4CL,IATMoH,EAAaJ,GAAe5T,EAAU,CAC1CgM,mBACAQ,sBACAqH,gBACAC,WAESza,MAAMU,QAAU,OAC3Bb,SAASE,KAAKI,YAAYwa,GAEb,QAATtb,EACI2gB,EADY,UACEzM,EADF,QAElBoH,EAAWmD,OAAX,uCAAkB,WAAOC,GAAP,SAAApV,EAAA,0DACZoV,EADY,gCAER+B,aAAS/B,EAAM,CACnBiC,SAAUA,IAHE,2CAAlB,4DAOK,GAAa,cAAT3gB,EACT,IACEqe,GAA2B/C,GAC3B,MAAOjM,GACPxN,OAAOggB,MAAM3a,GAAE,mCAKfoU,IAAenG,GACjBmG,EAAWuE,SA/DR,6C,sBAmEP,SAAS7F,GACPgI,EACAC,EACAC,GAEA,IAAM5a,EAAW0a,EACd5W,QAAO,SAAAuG,GAAE,OAAK/B,EAAwB+B,MACtCoM,KAAI,SAAA3a,GACH,IAAIO,EAAkB,GA+BtB,MA9BqB,UAAjBP,EAAQpD,KAKR2D,EAJEK,MAAMC,QAAQb,EAAQO,QAIfP,EAAQO,OAAOmC,OAAS,EAAI1C,EAAQO,OAAS,CAAC,CAAC,EAAG,IAKlD,CACP,CAAC,EAAG,GACJ,CAACP,EAAQpC,MAAOoC,EAAQlC,SAGF,SAAjBkC,EAAQpD,KASf2D,EANGK,MAAMC,QAAQb,EAAQO,SAAqC,IAA1BP,EAAQO,OAAOmC,OAM1C1C,EAAQO,OALR,CACP,CAAC,EAAG,GACJ,CAACP,EAAQpC,MAAOoC,EAAQlC,SAM5B+O,EAAoB7M,GAGf,eACFA,EADL,CAEEC,GAAID,EAAQC,IAAMC,MAClBN,UAAWI,EAAQJ,WAAa,UAChCC,YAAaG,EAAQH,aAAe,EACpCC,UAAWE,EAAQF,WAAa,EAChCC,QACsB,OAApBC,EAAQD,cAAwC6S,IAApB5S,EAAQD,QAChC,IACAC,EAAQD,QACdQ,cAQN,OAJQ,OAAJue,QAAI,IAAJA,OAAA,EAAAA,EAAMP,kBAAmBM,IAC3BA,EAAU,eAAQA,EAAR,GAAuB9B,GAAsB7Y,KAGlD,CACLA,SAAUA,EACVgN,SAAU2N,GAIP,SAASE,KACd,IAAMH,EAAgBI,aAAaC,QAxPX,cAyPlBJ,EAAaG,aAAaC,QAxPF,oBA0P1B/a,EAAW,GACf,GAAI0a,EACF,IACE1a,EAAWpD,KAAKC,MAAM6d,GAAejE,KACnC,cAAGra,MAAH,mCAEF,MAAOoF,IAKX,IAAIwL,EAAW,KACf,GAAI2N,EACF,IACE3N,EAAWpQ,KAAKC,MAAM8d,GACtB,MAAOnZ,IAKX,OAAOkR,GAAQ1S,EAAUgN,GAGpB,SAASgO,GACdhb,EACAgN,GAEA8N,aAAaG,QAtRW,aAwRtBre,KAAKE,UACHkD,EAASyW,KAAI,cAAGra,MAAH,qCAGjB0e,aAAaG,QA3RiB,mBA6R5Bre,KAAKE,URnRF,SAAsCkQ,GAU3C,OADIA,EAPFpB,gBAOEoB,EANF3I,gBAME2I,EALFnB,aAKEmB,EAJFlB,eAIEkB,EAHFF,iBAGEE,EAFFH,WAP6D,YAS3DG,EAT2D,uGQmR9CkO,CAA6BlO,KAIzC,SAAemO,KAAtB,gC,8CAAO,4BAAAnZ,EAAA,6DACC1C,EAAOub,KADR,kBAGE,CACL7a,SAAUV,EAAKU,SACfgN,SAAU1N,EAAK0N,UAAL,eAAsB1N,EAAK0N,SAA3B,CAAqC0B,qBAL5C,4C,sBA5RNnU,OAAegf,OAAS,KCzBlB,IAAM6B,GAAgB,SAAC1iB,GAAD,MAClB,cAATA,GAAiC,YAATA,GAA+B,YAATA,GAEnC2iB,GAAY,SAAC3iB,GAAD,MACd,cAATA,GACS,YAATA,GACS,YAATA,GACS,UAATA,GACS,SAATA,GAEW4iB,GAAU,SAAC5iB,GAAD,MAA2B,SAATA,GAElC,SAAS6iB,GACdvb,EACAhF,EACAC,EACAkF,GAIA,IAFA,IAAIqb,EAAa,KAER/K,EAAIzQ,EAASxB,OAAS,EAAGiS,GAAK,IAAKA,EAC1C,GAAI/O,EAAQ1B,EAASyQ,GAAIzV,EAAGC,EAAGkF,GAAO,CACpCqb,EAAaxb,EAASyQ,GACtB,MAIJ,OAAO+K,EC7BF,ICCMC,GAAS,CACpB,CACEC,KAEE,yBAAKC,QAAQ,eACX,0BAAM3N,EAAE,oSAGZkK,MAAO,aAET,CACEwD,KAEE,yBAAKC,QAAQ,eACX,0BAAM3N,EAAE,+GAGZkK,MAAO,aAET,CACEwD,KAEE,yBAAKC,QAAQ,uBACX,0BAAM3N,EAAE,gEAGZkK,MAAO,WAET,CACEwD,KAEE,yBAAKC,QAAQ,eACX,0BAAM3N,EAAE,2EAGZkK,MAAO,WAET,CACEwD,KAEE,yBAAKC,QAAQ,eACX,0BAAM3N,EAAE,wOAGZkK,MAAO,SAET,CACEwD,KAEE,yBAAKC,QAAQ,WACX,0BAAM3e,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIwQ,OAAO,OAAOiO,cAAc,WAGlE1D,MAAO,QAET,CACEwD,KAEE,yBAAKC,QAAQ,eACX,0BAAM3N,EAAE,8UAGZkK,MAAO,SAIE2D,GAAqBJ,GAAOhF,KAAI,SAACra,EAAOoO,GAAR,MAAkB,CAC7DpO,EAAM8b,MAAM,IACX1N,EAAQ,GAAGsR,eACXC,KAAK,G,ICpEFC,G,iDACIC,WAAqB,E,KACrBC,aAAyB,G,KACzBC,UAAsB,G,0DAG5BnP,EACAhN,GAEA,OAAOpD,KAAKE,UAAU,CACpBkQ,SAAUD,GAAkCC,GAC5ChN,SAAUA,EAASyW,KAAI,cAAGra,MAAH,IAAaN,EAAb,+CAClBA,EADkB,CAErBM,MAAO,KACPC,OACE2Q,EAASnB,cAAgBmB,EAASnB,aAAa9P,KAAOD,EAAQC,GAC1DD,EAAQO,OAAOhE,MAAM,GAAI,GACzByD,EAAQO,gB,gCAKV2Q,EAAoBhN,GAC5B,IAAMoc,EAAWC,KAAKC,cAActP,EAAUhN,GAE5Cqc,KAAKH,aAAa1d,OAAS,GAC3B6d,KAAKH,aAAaG,KAAKH,aAAa1d,OAAS,KAAO4d,IAMtDC,KAAKH,aAAazR,KAAK2R,GAGvBC,KAAKE,oB,mCAGMC,GACX,IACE,OAAO5f,KAAKC,MAAM2f,GAClB,SACA,OAAO,Q,uCAKTH,KAAKF,UAAUM,OAAO,EAAGJ,KAAKF,UAAU3d,U,iCAIxC,GAA8B,IAA1B6d,KAAKF,UAAU3d,OACjB,OAAO,KAGT,IAAMke,EAAiBL,KAAKF,UAAUQ,MAEtC,YAAuBjO,IAAnBgO,GACFL,KAAKH,aAAazR,KAAKiS,GAChBL,KAAKO,aAAaF,IAGpB,O,iCAIP,GAAiC,IAA7BL,KAAKH,aAAa1d,OACpB,OAAO,KAGT,IAAMqe,EAAeR,KAAKH,aAAaS,MAEjCD,EAAiBL,KAAKH,aAAaG,KAAKH,aAAa1d,OAAS,GAEpE,YAAqBkQ,IAAjBmO,GACFR,KAAKF,UAAU1R,KAAKoS,GACbR,KAAKO,aAAaF,IAGpB,O,oCAIP,OAAOL,KAAKJ,Y,sCAIZI,KAAKJ,WAAY,I,wCAIjBI,KAAKJ,WAAY,M,WCpFd,SAASa,GAAT,GAMI,IALTC,EAKQ,EALRA,SACAlW,EAIQ,EAJRA,KACAD,EAGQ,EAHRA,IACAoW,EAEQ,EAFRA,eAEQ,IADRC,qBACQ,SACFC,EAAaC,iBAAuB,MAmB1C,OAhBAC,2BAAgB,WACd,GAAIH,GAAiBC,EAAWG,QAAS,CACvC,IAAMvhB,EAAUohB,EAAWG,QADY,EAEPvhB,EAAQwhB,wBAAhCtiB,EAF+B,EAE/BA,EAAGC,EAF4B,EAE5BA,EAAGvB,EAFyB,EAEzBA,MAAOE,EAFkB,EAElBA,OAEfiP,EAAgBtO,OAAOye,WACzBhe,EAAItB,EAAQmP,IACd/M,EAAQzC,MAAMwN,KAAd,UAAwBgC,EAAgBnP,EAAxC,OAEF,IAAMoP,EAAiBvO,OAAO0e,YAC1Bhe,EAAIrB,EAASkP,IACfhN,EAAQzC,MAAMuN,IAAd,UAAuBkC,EAAiBlP,EAAxC,UAGH,CAACqjB,IAGF,yBAAKM,UAAU,UAAUlkB,MAAO,CAAEuN,IAAKA,EAAKC,KAAMA,GAAQ2W,IAAKN,GAC7D,yBACEK,UAAU,QACVE,QAAST,EACTU,cAAe,SAAAlc,GACbA,EAAEsG,iBACEkV,GACFA,OAILD,G,ICJHY,G,MA3BJ,SAASC,GAAT,GAAqE,IAA9C9O,EAA6C,EAA7CA,QAASkO,EAAoC,EAApCA,eAAgBpW,EAAoB,EAApBA,IAAKC,EAAe,EAAfA,KACnD,OACE,kBAAC,GAAD,CACEmW,eAAgBA,EAChBpW,IAAKA,EACLC,KAAMA,EACNoW,eAAe,GAEf,wBAAIM,UAAU,eAAeG,cAAe,SAAAlc,GAAC,OAAIA,EAAEsG,mBAChDgH,EAAQ2H,KAAI,SAACoH,EAAQhe,GAAT,OACX,wBAAIoE,IAAKpE,EAAK4d,QAAST,GACrB,kBAACc,GAAsBD,SAQnC,SAASC,GAAT,GAAkE,IAArCrJ,EAAoC,EAApCA,MAAOsJ,EAA6B,EAA7BA,OAClC,OACE,4BAAQR,UAAU,sBAAsBE,QAASM,GAC9CtJ,GAMP,SAASuJ,KACP,GAAIL,GACF,OAAOA,GAET,IAAMM,EAAM/kB,SAASC,cAAc,OAEnC,OADAD,SAASE,KAAKI,YAAYykB,GAClBN,GAAkBM,EAS5B,SAASC,KACPC,iCAAuBH,MAGV,gBACRI,GACH,IAAMtP,EAAUpS,MAAM2hB,KACtBD,EAAOtP,QAAQ7O,SAAQ,SAAA4d,GACjBA,GACF/O,EAAQrE,KAAKoT,MAGb/O,EAAQtQ,QACV8f,iBACE,kBAAC,GAAD,CACE1X,IAAKwX,EAAOxX,IACZC,KAAMuX,EAAOvX,KACbiI,QAASA,EACTkO,eAAgBkB,KAElBF,OCtEKO,I,MAAb,WASE,WACEC,EACAC,EACAC,GACC,yBAZHC,QAAyC,GAYvC,KAVFH,aAUE,OARFC,iBAQE,OANFC,iBAME,EACArC,KAAKmC,QAAUA,EACfnC,KAAKoC,YAAcA,EACnBpC,KAAKqC,YAAcA,EAhBvB,2DAmBiBX,GACb1B,KAAKsC,QAAQZ,EAAOnR,MAAQmR,IApBhC,oCAuBgBa,GAAuB,IAAD,OAC5Btf,EAAOyE,OAAOqP,OAAOiJ,KAAKsC,SAC7BE,MAAK,SAAC7c,EAAGC,GAAJ,OAAWA,EAAE6c,aAAe,IAAM9c,EAAE8c,aAAe,MACxDhb,QACC,SAAAia,GAAM,OACJA,EAAOgB,SACPhB,EAAOgB,QAAQH,EAAO,EAAKH,cAAe,EAAKC,kBAGrD,GAAoB,IAAhBpf,EAAKd,OACP,OAAO,EAGTogB,EAAM9W,iBACN,IAAMkX,EACJ1f,EAAK,GAAG0f,iBACR1f,EAAK,GAAG0f,gBAAgB3C,KAAKoC,cAAepC,KAAKqC,eAKnD,OAJArC,KAAKmC,QACHlf,EAAK,GAAG2f,QAAQ5C,KAAKqC,cAAerC,KAAKoC,cAAe,MACxDO,IAEK,IA5CX,4CA+CwE,IAAD,OAAjDE,EAAiD,uDAAlB,SAAAnB,GAAM,OAAIA,GAC3D,OAAOha,OAAOqP,OAAOiJ,KAAKsC,SACvB7a,OAAOob,GACPpb,QAAO,SAAAia,GAAM,MAAI,qBAAsBA,KACvCc,MACC,SAAC7c,EAAGC,GAAJ,YAC0ByM,IAAvB1M,EAAEmd,iBAAiCnd,EAAEmd,iBAAmB,WACjCzQ,IAAvBzM,EAAEkd,iBAAiCld,EAAEkd,iBAAmB,QAE5D1I,KAAI,SAAAsH,GAAM,MAAK,CACdtJ,MAAOsJ,EAAOqB,iBAAmBxf,GAAEme,EAAOqB,kBAAoB,GAC9DrB,OAAQ,WACN,IAAMiB,EACJjB,EAAOiB,iBACPjB,EAAOiB,gBAAgB,EAAKP,cAAe,EAAKC,eAClD,EAAKF,QACHT,EAAOkB,QAAQ,EAAKP,cAAe,EAAKD,cAAe,MACvDO,UAhEZ,mCAsEepS,GAAe,IAAD,OACzB,GAAIyP,KAAKsC,QAAQ/R,IAAS,mBAAoByP,KAAKsC,QAAQ/R,GAAO,CAChE,IAAMmR,EAAS1B,KAAKsC,QAAQ/R,GACtByS,EAAiBtB,EAAOsB,eAW9B,OACE,kBAACA,EAAD,CACErf,SAAUqc,KAAKqC,cACf1R,SAAUqP,KAAKoC,cACfa,WAde,SAACC,GAClB,IAAMP,EACJjB,EAAOiB,iBACPjB,EAAOiB,gBAAgB,EAAKP,cAAe,EAAKC,eAClD,EAAKF,QACHT,EAAOkB,QAAQ,EAAKP,cAAe,EAAKD,cAAec,GACvDP,MAaN,OAAO,SA7FX,MCPaQ,GAA+B,CAC1C5S,KAAM,yBACNqS,QAAS,SAACjf,EAAUgN,GAClB,MAAO,CACLhN,SAAUoK,GAAuBpK,GACjCgN,SAAS,eAAMA,EAAP,CAAiBxE,YAAa,YAAaqD,aAAc,SAGrEuT,iBAAkB,gBAClBD,iBAAkB,EAClBH,gBAAiB,SAACS,EAAGzf,GAAJ,OAAiB0K,GAAsB1K,IACxD+e,QAAS,SAAAH,GAAK,OAAIA,EAAM3a,MAAQQ,EAAKQ,WAAa2Z,EAAM3a,MAAQQ,EAAKO,SCfvE,SAAS0a,GAAQ1f,EAAe2f,EAAgBC,GAC9C,IAAM9jB,EAAUkE,EAAS2f,GACzB3f,EAAS2f,GAAU3f,EAAS4f,GAC5B5f,EAAS4f,GAAU9jB,EAGd,SAAS+jB,GAAe7f,EAAe8f,GAC5CA,EAAcjB,MAAK,SAAC7c,EAAWC,GAAZ,OAA0BD,EAAIC,KACjD,IAAI8d,GAAW,EAYf,OAVAD,EAAc7f,SAAQ,SAACuK,EAAOiG,IAG5BsP,EAAWA,GAAYvV,IAAUiG,IAIjCiP,GAAK1f,EAAUwK,EAAQ,EAAGA,MAGrBxK,EAGF,SAASggB,GAAgBhgB,EAAe8f,GAC7C,IAAMG,EAAwBH,EAAcjB,MAC1C,SAAC7c,EAAWC,GAAZ,OAA0BA,EAAID,KAE5B+d,GAAW,EAYf,OATAE,EAAsBhgB,SAAQ,SAACuK,EAAOiG,IAGpCsP,EAAWA,GAAYvV,IAAUxK,EAASxB,OAASiS,EAAI,IAIvDiP,GAAK1f,EAAUwK,EAAQ,EAAGA,MAErBxK,EAiDF,SAASkgB,GAAelgB,EAAe8f,GAC5CA,EAAcjB,MAAK,SAAC7c,EAAWC,GAAZ,OAA0BD,EAAIC,KAGjD,IAAMke,EAAmBL,EAAcrJ,KAAI,SAAAjM,GAAK,OAAIxK,EAASwK,MAEvDyV,EAAwBH,EAE3BM,UAEAC,OAAO,CAAC,IAoBX,OAlBAJ,EAAsBhgB,SAAQ,SAACuK,EAAOiG,GAEpC,GAAU,IAANA,EAKJ,IAAK,IAAI6P,EAAML,EAAsBxP,EAAI,GAAK,EAAG6P,GAAO9V,IAAS8V,EAE/DtgB,EAASsgB,EAAM7P,GAAKzQ,EAASsgB,MAKjCH,EAAiBlgB,SAAQ,SAACnE,EAAS2U,GACjCzQ,EAASyQ,GAAK3U,KAGTkE,EAgDF,SAASugB,GAAgBvgB,EAAe8f,GAC7C,IAAMG,EAAwBH,EAAcjB,MAC1C,SAAC7c,EAAWC,GAAZ,OAA0BA,EAAID,KAI1Bwe,EAAoBP,EAAsBxJ,KAAI,SAAAjM,GAAK,OAAIxK,EAASwK,MA0BtE,OAxBAsV,EAAgBG,EAEbG,UAEAC,OAAO,CAACrgB,EAASxB,UAENyB,SAAQ,SAACuK,EAAOiG,GAE5B,GAAU,IAANA,EAKJ,IAAK,IAAI6P,EAAMR,EAAcrP,EAAI,GAAK,EAAG6P,EAAM9V,IAAS8V,EAEtDtgB,EAASsgB,EAAM7P,GAAKzQ,EAASsgB,MAKjCE,EAAkBvgB,SAAQ,SAACnE,EAAS2U,GAClCzQ,EAASA,EAASxB,OAASiS,EAAI,GAAK3U,KAG/BkE,EC1LT,IAEMygB,GAAQ,CACZC,aACE,yBAAK/E,QAAQ,aACX,0BACE3N,EAAE,0HACFL,OAAO,OACPhS,YAAY,MAEd,0BACEqS,EAAE,kJACFN,KAZkB,UAalBC,OAbkB,UAclBhS,YAAY,OAIlBglB,aACE,yBAAKhF,QAAQ,aACX,0BACE3N,EAAE,kJACFN,KAtBkB,UAuBlBC,OAvBkB,UAwBlBhS,YAAY,MAEd,0BACEqS,EAAE,kJACFL,OAAO,OACPhS,YAAY,OAIlBilB,aACE,yBAAKjF,QAAQ,aACX,0BACE3N,EAAE,sHACFL,OAAO,OACPhS,YAAY,MAEd,0BACEqS,EAAE,iJACFN,KA1CkB,UA2ClBC,OA3CkB,UA4ClBhS,YAAY,OAIlBklB,WACE,yBAAKlF,QAAQ,YAAYC,cAAc,QAAQkF,eAAe,SAC5D,0BACE9S,EAAE,iJACFN,KApDkB,UAqDlBC,OArDkB,UAsDlBhS,YAAY,MAEd,0BACEqS,EAAE,8GACFL,OAAO,OACPhS,YAAY,QAMPolB,GAA6B,CACxCnU,KAAM,eACNqS,QAAS,SAACjf,EAAUgN,GAClB,MAAO,CACLhN,SAAU6f,GAAY,YAAI7f,GAAWsK,GAAmBtK,IACxDgN,aAGJoS,iBAAkB,sBAClBN,YAAa,GACbE,gBAAiB,kBAAM,GACvBD,QAAS,SAAAH,GAAK,OAAIA,EAAMna,EAAKuc,OAASpC,EAAMqC,QAAwB,MAAdrC,EAAM3a,KAC5Dob,eAAgB,gBAAGC,EAAH,EAAGA,WAAH,OACd,4BACE5mB,KAAK,SACL6kB,UAAU,eACVE,QAAS,SAAAjc,GAAC,OAAI8d,EAAW,OACzB4B,MAAOthB,GAAE,wBAER6gB,GAAME,gBAKAQ,GAA6B,CACxCvU,KAAM,eACNqS,QAAS,SAACjf,EAAUgN,GAClB,MAAO,CACLhN,SAAUggB,GAAa,YAAIhgB,GAAWsK,GAAmBtK,IACzDgN,aAGJoS,iBAAkB,sBAClBN,YAAa,GACbE,gBAAiB,kBAAM,GACvBD,QAAS,SAAAH,GAAK,OAAIA,EAAMna,EAAKuc,OAASpC,EAAMqC,QAAwB,MAAdrC,EAAM3a,KAC5Dob,eAAgB,gBAAGC,EAAH,EAAGA,WAAH,OACd,4BACE5mB,KAAK,SACL6kB,UAAU,eACVE,QAAS,SAAAjc,GAAC,OAAI8d,EAAW,OACzB4B,MAAOthB,GAAE,wBAER6gB,GAAMC,gBAKAU,GAA2B,CACtCxU,KAAM,aACNqS,QAAS,SAACjf,EAAUgN,GAClB,MAAO,CACLhN,SAAUkgB,GAAY,YAAIlgB,GAAWsK,GAAmBtK,IACxDgN,aAGJoS,iBAAkB,oBAClBJ,gBAAiB,kBAAM,GACvBD,QAAS,SAAAH,GAAK,OAAIA,EAAMna,EAAKuc,OAASpC,EAAM3W,UAA0B,MAAd2W,EAAM3a,KAC9Dob,eAAgB,gBAAGC,EAAH,EAAGA,WAAH,OACd,4BACE5mB,KAAK,SACL6kB,UAAU,eACVE,QAAS,SAAAjc,GAAC,OAAI8d,EAAW,OACzB4B,MAAOthB,GAAE,sBAER6gB,GAAMI,cAKAQ,GAA6B,CACxCzU,KAAM,eACNqS,QAAS,SAACjf,EAAUgN,GAClB,MAAO,CACLhN,SAAUugB,GAAa,YAAIvgB,GAAWsK,GAAmBtK,IACzDgN,aAGJgS,gBAAiB,kBAAM,GACvBI,iBAAkB,sBAClBL,QAAS,SAAAH,GAAK,OAAIA,EAAMna,EAAKuc,OAASpC,EAAM3W,UAA0B,MAAd2W,EAAM3a,KAC9Dob,eAAgB,gBAAGC,EAAH,EAAGA,WAAH,OACd,4BACE5mB,KAAK,SACL6kB,UAAU,eACVE,QAAS,SAAAjc,GAAC,OAAI8d,EAAW,OACzB4B,MAAOthB,GAAE,wBAER6gB,GAAMG,gBCnKAU,GAA0B,CACrC1U,KAAM,YACNqS,QAAS,SAAAjf,GACP,MAAO,CACLA,SAAUA,EAASyW,KAAI,SAAA8K,GAAI,sBAAUA,EAAV,CAAgBtlB,YAAY,SAG3DmjB,iBAAkB,mBAClBL,QAAS,SAAAH,GAAK,OAAIA,EAAMna,EAAKuc,OAAuB,MAAdpC,EAAM3a,MCTvC,SAASud,GAAT,GAUH,IATF1S,EASC,EATDA,QACAoJ,EAQC,EARDA,MACAuJ,EAOC,EAPDA,SACAxQ,EAMC,EANDA,MAOA,OACE,yBAAKsM,UAAU,cACZzO,EAAQ2H,KAAI,SAAAoH,GAAM,OACjB,2BACE5Z,IAAK4Z,EAAO9kB,KACZwkB,UAAWrF,IAAU2F,EAAO3F,MAAQ,SAAW,IAE/C,2BACExf,KAAK,QACLkU,KAAMqE,EACNwQ,SAAU,kBAAMA,EAAS5D,EAAO3F,QAChCwJ,QAASxJ,IAAU2F,EAAO3F,QAE3B2F,EAAO9kB,U,UCbZ4oB,GAAc,CAClB,CAAC,IAAK,IAAK,IAAK,IAAK,KACrB,CAAC,IAAK,IAAK,IAAK,IAAK,KACrB,CAAC,IAAK,IAAK,IAAK,IAAK,MACrB5F,OAEI6F,GAAS,YAYX,IAXFC,EAWC,EAXDA,OACAlb,EAUC,EAVDA,MACA8a,EASC,EATDA,SACAK,EAQC,EARDA,QACArN,EAOC,EAPDA,MAQMsN,EAAYC,IAAM7E,SAClB8E,EAAaD,IAAM7E,SACnB+E,EAAUF,IAAM7E,SAChBgF,EAAaH,IAAM7E,SAEzB6E,IAAMI,WAAU,WAGVH,EAAW5E,QACb4E,EAAW5E,QAAQjV,QACV+Z,EAAW9E,SACpB8E,EAAW9E,QAAQjV,UAEpB,IAwDH,OACE,yBACEmV,UAAU,eACV8E,KAAK,SACLC,aAAW,OACXC,aAAY3iB,GAAE,sBACd4iB,UA5DkB,SAAChhB,GACrB,GAAIA,EAAEyC,MAAQQ,EAAKY,IAAK,CAAC,IAGoB,EAKC,EAPpCod,EAAkBvpB,SAAlBupB,cACR,GAAIjhB,EAAEyG,UACJ,GAAIwa,IAAkBV,EAAU1E,QAC9B,UAAA8E,EAAW9E,eAAX,SAAoBjV,QACpB5G,EAAEsG,sBAGJ,GAAI2a,IAAkBN,EAAW9E,QAC/B,UAAA0E,EAAU1E,eAAV,SAAmBjV,QACnB5G,EAAEsG,sBAGD,GACLtG,EAAEyC,MAAQQ,EAAKE,aACfnD,EAAEyC,MAAQQ,EAAKC,YACflD,EAAEyC,MAAQQ,EAAKI,UACfrD,EAAEyC,MAAQQ,EAAKG,WACf,CAAC,IACO6d,EAAkBvpB,SAAlBupB,cACFjY,EAAQ9N,MAAM6Z,UAAUmM,QAAQC,KACpCT,EAAS7E,QAASN,SAClB0F,GAEF,IAAe,IAAXjY,EAAc,CAChB,IAAMhM,EAAS0jB,EAAS7E,QAASN,SAASve,OACpCokB,EACJphB,EAAEyC,MAAQQ,EAAKE,aACV6F,EAAQ,GAAKhM,EACdgD,EAAEyC,MAAQQ,EAAKC,YACdlG,EAASgM,EAAQ,GAAKhM,EACvBgD,EAAEyC,MAAQQ,EAAKG,YACd4F,EAAQ,GAAKhM,EACdgD,EAAEyC,MAAQQ,EAAKI,UACdrG,EAASgM,EAAQ,GAAKhM,EACvBgM,EACL0X,EAAS7E,QAASN,SAAU6F,GAAmBxa,QAElD5G,EAAEsG,sBACG,GACL6Z,GAAYkB,SAASrhB,EAAEyC,IAAI6e,iBAC1BxqB,EAAkBkJ,EAAEjJ,QACrB,CACA,IAAMiS,EAAQmX,GAAYe,QAAQlhB,EAAEyC,IAAI6e,eACvCZ,EAAS7E,QAASN,SAAUvS,GAAepC,QAC5C5G,EAAEsG,sBACOtG,EAAEyC,MAAQQ,EAAKM,QAAUvD,EAAEyC,MAAQQ,EAAKK,QACjDtD,EAAEsG,iBACFga,KAEFtgB,EAAEuhB,YAAYC,6BAWZ,yBAAKzF,UAAU,iCACf,yBAAKA,UAAU,0BACf,yBAAKA,UAAU,wBACb,yBACEA,UAAU,iBACVC,IAAK,SAAAnT,GACCA,IACF6X,EAAQ7E,QAAUhT,KAIrBwX,EAAOpL,KAAI,SAACwM,EAAQxS,GAAT,OACV,4BACE8M,UAAU,sBACVE,QAAS,WACPgE,EAASwB,IAEX/B,MAAK,UAAK+B,EAAL,mBAAiBtB,GAAYlR,GAAGrY,eACrCmqB,aAAYU,EACZC,oBAAmBvB,GAAYlR,GAC/BpX,MAAO,CAAEoC,gBAAiBwnB,GAC1Bhf,IAAKgf,EACLzF,IAAK,SAAAnT,GACCA,GAAY,IAANoG,IACRsR,EAAU1E,QAAUhT,GAElBA,GAAM4Y,IAAWtc,IACnBsb,EAAW5E,QAAUhT,IAGzB8Y,QAAS,WACP1B,EAASwB,KAGC,gBAAXA,EACC,yBAAK1F,UAAU,kCAEf7O,EAEF,0BAAM6O,UAAU,2BAA2BoE,GAAYlR,SAI7D,kBAAC2S,GAAD,CACEzc,MAAOA,EACP8N,MAAOA,EACPgN,SAAU,SAAA9a,GACR8a,EAAS9a,IAEX6W,IAAK2E,OAOTiB,GAAapB,IAAMqB,YACvB,WAUE7F,GACI,IATF7W,EASC,EATDA,MACA8a,EAQC,EARDA,SACAhN,EAOC,EAPDA,MAQI6O,EAAa,sDADhB,EAEiCtB,IAAMuB,SAAS5c,GAFhD,mBAEI6c,EAFJ,KAEgBC,EAFhB,KAGGC,EAAW1B,IAAM7E,OAAO,MAQ9B,OANA6E,IAAMI,WAAU,WACdqB,EAAc9c,KACb,CAACA,IAEJqb,IAAM2B,oBAAoBnG,GAAK,kBAAMkG,EAASrG,WAG5C,yBAAKE,UAAU,yBACb,yBAAKA,UAAU,qBAAf,KACA,2BACEqG,YAAY,EACZrG,UAAU,qBACVgF,aAAY9N,EACZgN,SAAU,SAAAjgB,GACR,IAAM0W,EAAQ1W,EAAEjJ,OAAO2f,MAAM4K,cACzB5K,EAAM2L,MAAMP,IACd7B,EAAmB,gBAAVvJ,EAA0B,cAA1B,WAA8CA,IAEzDuL,EAAcvL,IAEhBA,OAAQsL,GAAc,IAAIhc,QAAQ,KAAM,IACxCsc,QAAS,SAAAtiB,GAAC,OAAIigB,EAASjgB,EAAE8F,cAAcC,QAAQ,UAC/Cwc,OAAQ,kBAAMN,EAAc9c,IAC5B6W,IAAKkG,QAOR,SAASM,GAAT,GAUH,IATFtrB,EASC,EATDA,KACAiO,EAQC,EARDA,MACA8a,EAOC,EAPDA,SACAhN,EAMC,EANDA,MAMC,EAC6BuN,IAAMuB,UAAS,GAD5C,mBACMU,EADN,KACgBC,EADhB,KAEKC,EAAenC,IAAM7E,OAA0B,MAErD,OACE,6BACE,yBAAKI,UAAU,kCACb,4BACEA,UAAU,4BACVgF,aAAY9N,EACZpb,MAAOsN,EAAQ,CAAElL,gBAAiBkL,QAAU+H,EAC5C+O,QAAS,kBAAMyG,GAAWD,IAC1BzG,IAAK2G,IAEP,kBAACf,GAAD,CACEzc,MAAOA,EACP8N,MAAOA,EACPgN,SAAU,SAAA9a,GACR8a,EAAS9a,OAIf,kBAAC,IAAMyd,SAAP,CAAgBC,SAAS,IACtBJ,EACC,kBAAC,GAAD,CAASjH,eAAgB,kBAAMkH,GAAU,KACvC,kBAAC,GAAD,CACErC,OAAQA,GAAOnpB,GACfiO,MAAOA,GAAS,KAChB8a,SAAU,SAAA6C,GACR7C,EAAS6C,IAEXxC,QAAS,WAAO,IAAD,EACboC,GAAU,GACV,UAAAC,EAAa9G,eAAb,SAAsBjV,SAExBqM,MAAOA,KAGT,OAOZ,IAAMoN,GAAS,CAEb0C,iBAAkB,CAChB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGFC,kBAAmB,CACjB,cACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGFC,cAAe,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YCnTEC,GAAiB,SACrB1kB,EACA2kB,GAEA,OAAO3kB,EAASyW,KAAI,SAAA3a,GAClB,OAAIA,EAAQG,WACH0oB,EAAS7oB,GAEXA,MAIL8oB,GAAe,SACnB9Y,EACA9L,EACA2X,EACAkN,GACW,IAAD,IACV,2BACG/Y,GAAkB6L,EAAa7L,UADlC,QAEGpB,GAAsB1K,GvBkCpB,SACLA,EACA2X,GAEA,IAAMmN,EAAapoB,MAAMqoB,KACvB,IAAIC,IACFra,GAAoB3K,GAAUyW,KAAI,SAAA3a,GAAO,OAAI6b,EAAa7b,QAG9D,OAA6B,IAAtBgpB,EAAWtmB,OAAesmB,EAAW,GAAK,KuB1C3CG,CAAqCjlB,EAAU2X,GAC/CkN,SAJN,QAKE,MAISK,GAAkC,CAC7CtY,KAAM,oBACNqS,QAAS,SAACjf,EAAUgN,EAAUkL,GAC5B,MAAO,CACLlY,SAAU0kB,GAAe1kB,GAAU,SAAAqK,GAAE,sBAChCA,EADgC,CAEnCjO,MAAO,KACPZ,YAAa0c,OAEflL,SAAS,eAAMA,EAAP,CAAiBf,uBAAwBiM,MAGrD8G,gBAAiB,kBAAM,GACvBK,eAAgB,gBAAGrf,EAAH,EAAGA,SAAUgN,EAAb,EAAaA,SAAUsS,EAAvB,EAAuBA,WAAvB,OACd,oCACE,wBAAI6F,cAAY,QAAQvlB,GAAE,kBAC1B,kBAAC,GAAD,CACElH,KAAK,gBACL+b,MAAO7U,GAAE,iBACT+G,MAAOie,GACL5X,EAASlB,eACT9L,GACA,SAAAlE,GAAO,OAAIA,EAAQN,cACnBwR,EAASf,wBAEXwV,SAAUnC,OAML8F,GAAsC,CACjDxY,KAAM,wBACNqS,QAAS,SAACjf,EAAUgN,EAAUkL,GAC5B,MAAO,CACLlY,SAAU0kB,GAAe1kB,GAAU,SAAAqK,GAAE,sBAChCA,EADgC,CAEnCjO,MAAO,KACPX,gBAAiByc,OAEnBlL,SAAS,eAAMA,EAAP,CAAiBd,2BAA4BgM,MAGzD8G,gBAAiB,kBAAM,GACvBK,eAAgB,gBAAGrf,EAAH,EAAGA,SAAUgN,EAAb,EAAaA,SAAUsS,EAAvB,EAAuBA,WAAvB,OACd,oCACE,wBAAI6F,cAAY,QAAQvlB,GAAE,sBAC1B,kBAAC,GAAD,CACElH,KAAK,oBACL+b,MAAO7U,GAAE,qBACT+G,MAAOie,GACL5X,EAASlB,eACT9L,GACA,SAAAlE,GAAO,OAAIA,EAAQL,kBACnBuR,EAASd,4BAEXuV,SAAUnC,OAML+F,GAAgC,CAC3CzY,KAAM,kBACNqS,QAAS,SAACjf,EAAUgN,EAAUkL,GAC5B,MAAO,CACLlY,SAAU0kB,GAAe1kB,GAAU,SAAAqK,GAAE,sBAChCA,EADgC,CAEnCjO,MAAO,KACPV,UAAWwc,OAEblL,SAAS,eAAMA,EAAP,CAAiBb,qBAAsB+L,MAGnD8G,gBAAiB,kBAAM,GACvBK,eAAgB,gBAAGrf,EAAH,EAAGA,SAAUgN,EAAb,EAAaA,SAAUsS,EAAvB,EAAuBA,WAAvB,OACd,kCACE,gCAAS1f,GAAE,gBACX,kBAAC4hB,GAAD,CACE1S,QAAS,CACP,CAAEoJ,MAAO,QAASnf,KAAM6G,GAAE,iBAC1B,CAAEsY,MAAO,UAAWnf,KAAM6G,GAAE,mBAC5B,CAAEsY,MAAO,cAAenf,KAAM6G,GAAE,uBAElCqR,MAAM,OACNiH,MAAO0M,GACL5X,EAASlB,eACT9L,GACA,SAAAlE,GAAO,OAAIA,EAAQJ,YACnBsR,EAASb,sBAEXsV,SAAU,SAAAvJ,GACRoH,EAAWpH,SAORoN,GAAkC,CAC7C1Y,KAAM,oBACNqS,QAAS,SAACjf,EAAUgN,EAAUkL,GAC5B,MAAO,CACLlY,SAAU0kB,GAAe1kB,GAAU,SAAAqK,GAAE,sBAChCA,EADgC,CAEnCjO,MAAO,KACPT,YAAauc,OAEflL,SAAS,eAAMA,EAAP,CAAiBZ,uBAAwB8L,MAGrD8G,gBAAiB,kBAAM,GACvBK,eAAgB,gBAAGrf,EAAH,EAAGA,SAAUgN,EAAb,EAAaA,SAAUsS,EAAvB,EAAuBA,WAAvB,OACd,kCACE,gCAAS1f,GAAE,uBACX,kBAAC4hB,GAAD,CACEvQ,MAAM,eACNnC,QAAS,CACP,CAAEoJ,MAAO,EAAGnf,KAAM6G,GAAE,gBACpB,CAAEsY,MAAO,EAAGnf,KAAM6G,GAAE,gBACpB,CAAEsY,MAAO,EAAGnf,KAAM6G,GAAE,sBAEtBsY,MAAO0M,GACL5X,EAASlB,eACT9L,GACA,SAAAlE,GAAO,OAAIA,EAAQH,cACnBqR,EAASZ,wBAEXqV,SAAU,SAAAvJ,GAAK,OAAIoH,EAAWpH,SAMzBqN,GAAiC,CAC5C3Y,KAAM,mBACNqS,QAAS,SAACjf,EAAUgN,EAAUkL,GAC5B,MAAO,CACLlY,SAAU0kB,GAAe1kB,GAAU,SAAAqK,GAAE,sBAChCA,EADgC,CAEnCjO,MAAO,KACPR,UAAWsc,OAEblL,SAAS,eAAMA,EAAP,CAAiBX,qBAAsB6L,MAGnD8G,gBAAiB,kBAAM,GACvBK,eAAgB,gBAAGrf,EAAH,EAAGA,SAAUgN,EAAb,EAAaA,SAAUsS,EAAvB,EAAuBA,WAAvB,OACd,kCACE,gCAAS1f,GAAE,sBACX,kBAAC4hB,GAAD,CACEvQ,MAAM,aACNnC,QAAS,CACP,CAAEoJ,MAAO,EAAGnf,KAAM6G,GAAE,qBACpB,CAAEsY,MAAO,EAAGnf,KAAM6G,GAAE,kBACpB,CAAEsY,MAAO,EAAGnf,KAAM6G,GAAE,uBAEtBsY,MAAO0M,GACL5X,EAASlB,eACT9L,GACA,SAAAlE,GAAO,OAAIA,EAAQF,YACnBoR,EAASX,sBAEXoV,SAAU,SAAAvJ,GAAK,OAAIoH,EAAWpH,SAMzBsN,GAA8B,CACzC5Y,KAAM,gBACNqS,QAAS,SAACjf,EAAUgN,EAAUkL,GAC5B,MAAO,CACLlY,SAAU0kB,GAAe1kB,GAAU,SAAAqK,GAAE,sBAChCA,EADgC,CAEnCjO,MAAO,KACPP,QAASqc,OAEXlL,SAAS,eAAMA,EAAP,CAAiBV,mBAAoB4L,MAGjD8G,gBAAiB,kBAAM,GACvBK,eAAgB,kBAAGrf,EAAH,EAAGA,SAAUgN,EAAb,EAAaA,SAAUsS,EAAvB,EAAuBA,WAAvB,OACd,2BAAO/B,UAAU,iBACd3d,GAAE,kBACH,2BACElH,KAAK,QACLkG,IAAI,IACJG,IAAI,MACJ0mB,KAAK,KACLhE,SAAU,SAAAjgB,GAAC,OAAI8d,GAAY9d,EAAEjJ,OAAO2f,QACpCwN,QAAS,SAAAlkB,GACPA,EAAEwE,kBACF,IAIMkS,GAJS1W,EAAEjJ,OAIK2f,MAElB1W,EAAEmkB,OAAS,GAAKzN,EAJR,IAKVoH,EAAWpH,EANA,IAOF1W,EAAEmkB,OAAS,GAAKzN,EALf,GAMVoH,EAAWpH,EARA,KAWfA,MAAK,UACH0M,GACE5X,EAASlB,eACT9L,GACA,SAAAlE,GAAO,OAAIA,EAAQD,UACnBmR,EAASV,2BALR,aAMEoC,OAOFkX,GAA+B,CAC1ChZ,KAAM,iBACNqS,QAAS,SAACjf,EAAUgN,EAAUkL,GAC5B,MAAO,CACLlY,SAAU0kB,GAAe1kB,GAAU,SAAAqK,GACjC,GAAI7F,EAAc6F,GAAK,CACrB,IAAMvO,EAA8B,eAC/BuO,EAD+B,CAElCjO,MAAO,KACPpD,KAAK,GAAD,OAAKkf,EAAL,cAAgB7N,EAAGrR,KAAKsX,MAAM,OAAO,MAG3C,OADAjI,EAAsBvM,GACfA,EAGT,OAAOuO,KAET2C,SAAS,eACJA,EADG,CAENT,gBAAgB,GAAD,OAAK2L,EAAL,cACblL,EAAST,gBAAgB+D,MAAM,OAAO,QAK9C0O,gBAAiB,kBAAM,GACvBK,eAAgB,gBAAGrf,EAAH,EAAGA,SAAUgN,EAAb,EAAaA,SAAUsS,EAAvB,EAAuBA,WAAvB,OACd,kCACE,gCAAS1f,GAAE,oBACX,kBAAC4hB,GAAD,CACEvQ,MAAM,YACNnC,QAAS,CACP,CAAEoJ,MAAO,GAAInf,KAAM6G,GAAE,iBACrB,CAAEsY,MAAO,GAAInf,KAAM6G,GAAE,kBACrB,CAAEsY,MAAO,GAAInf,KAAM6G,GAAE,iBACrB,CAAEsY,MAAO,GAAInf,KAAM6G,GAAE,sBAEvBsY,MAAO0M,GACL5X,EAASlB,eACT9L,GACA,SAAAlE,GAAO,OAAI0I,EAAc1I,KAAaA,EAAQ9C,KAAKsX,MAAM,OAAO,OAC9DtD,EAAST,iBAAmB,eAAe+D,MAAM,OAAO,IAE5DmR,SAAU,SAAAvJ,GAAK,OAAIoH,EAAWpH,SAMzB2N,GAAiC,CAC5CjZ,KAAM,mBACNqS,QAAS,SAACjf,EAAUgN,EAAUkL,GAC5B,MAAO,CACLlY,SAAU0kB,GAAe1kB,GAAU,SAAAqK,GACjC,GAAI7F,EAAc6F,GAAK,CACrB,IAAMvO,EAA8B,eAC/BuO,EAD+B,CAElCjO,MAAO,KACPpD,KAAK,GAAD,OAAKqR,EAAGrR,KAAKsX,MAAM,OAAO,GAA1B,cAAkC4H,KAGxC,OADA7P,EAAsBvM,GACfA,EAGT,OAAOuO,KAET2C,SAAS,eACJA,EADG,CAENT,gBAAgB,GAAD,OACbS,EAAST,gBAAgB+D,MAAM,OAAO,GADzB,cAET4H,OAIZ8G,gBAAiB,kBAAM,GACvBK,eAAgB,gBAAGrf,EAAH,EAAGA,SAAUgN,EAAb,EAAaA,SAAUsS,EAAvB,EAAuBA,WAAvB,OACd,kCACE,gCAAS1f,GAAE,sBACX,kBAAC4hB,GAAD,CACEvQ,MAAM,cACNnC,QAAS,CACP,CAAEoJ,MAAO,SAAUnf,KAAM6G,GAAE,qBAC3B,CAAEsY,MAAO,YAAanf,KAAM6G,GAAE,kBAC9B,CAAEsY,MAAO,WAAYnf,KAAM6G,GAAE,iBAE/BsY,MAAO0M,GACL5X,EAASlB,eACT9L,GACA,SAAAlE,GAAO,OAAI0I,EAAc1I,IAAYA,EAAQ9C,KAAKsX,MAAM,OAAO,MAC9DtD,EAAST,iBAAmB,eAAe+D,MAAM,OAAO,IAE3DmR,SAAU,SAAAvJ,GAAK,OAAIoH,EAAWpH,SC7UzB3F,IARX,yBAAK4S,cAAY,OAAOW,UAAU,QAAQzD,KAAK,MAAM1G,QAAQ,eAC3D,0BACEjO,KAAK,eACLM,EAAE,quCAMN,yBAAKmX,cAAY,OAAOW,UAAU,QAAQzD,KAAK,MAAM1G,QAAQ,eAC3D,0BACEjO,KAAK,eACLM,EAAE,gcAKK+X,GACX,yBAAKZ,cAAY,OAAOW,UAAU,QAAQzD,KAAK,MAAM1G,QAAQ,eAC3D,0BACEjO,KAAK,eACLM,EAAE,wUAcKmI,IARX,yBAAKgP,cAAY,OAAOW,UAAU,QAAQzD,KAAK,MAAM1G,QAAQ,eAC3D,0BACEjO,KAAK,eACLM,EAAE,gdAMN,yBAAKmX,cAAY,OAAOW,UAAU,QAAQzD,KAAK,MAAM1G,QAAQ,eAC3D,0BACEjO,KAAK,eACLM,EAAE,oUAKKgY,GACX,yBAAKb,cAAY,OAAOW,UAAU,QAAQzD,KAAK,MAAM1G,QAAQ,eAC3D,0BACEjO,KAAK,eACLM,EAAE,6WAcKiY,IARX,yBAAKd,cAAY,OAAOW,UAAU,QAAQzD,KAAK,MAAM1G,QAAQ,eAC3D,0BACEjO,KAAK,eACLM,EAAE,ueAMN,yBAAKmX,cAAY,OAAOW,UAAU,QAAQzD,KAAK,MAAM1G,QAAQ,eAC3D,0BACEjO,KAAK,eACLM,EAAE,qXAKKkY,GACX,yBAAKf,cAAY,OAAOW,UAAU,QAAQzD,KAAK,MAAM1G,QAAQ,eAC3D,0BACEjO,KAAK,eACLM,EAAE,qPAKKmY,GACX,yBAAKhB,cAAY,OAAOW,UAAU,QAAQzD,KAAK,MAAM1G,QAAQ,eAC3D,0BACEjO,KAAK,eACLM,EAAE,0HC/DKoY,I,MAAapE,IAAMqB,YAAW,SACzCgD,EACA7I,GAEA,IAAM8I,EAAWtE,IAAM7E,OAAO,MAC9B6E,IAAM2B,oBAAoBnG,GAAK,kBAAM8I,EAASjJ,WAC9C,IAAMkJ,EAAM,wBAAoBF,EAAMG,MARL,KAUjC,MAAmB,WAAfH,EAAM3tB,KAEN,4BACE6kB,UAAS,wCAAmCgJ,GAC5CrF,MAAOmF,EAAMnF,MACbqB,aAAY8D,EAAM,cAClB3tB,KAAK,SACL+kB,QAAS4I,EAAM5I,QACfD,IAAK8I,GAEL,yBAAK/I,UAAU,iBAAiB4H,cAAY,QACzCkB,EAAM3K,MAAQ2K,EAAM5R,QAO3B,2BAAO8I,UAAU,WAAW2D,MAAOmF,EAAMnF,OACvC,2BACE3D,UAAS,8BAAyBgJ,GAClC7tB,KAAK,QACLkU,KAAMyZ,EAAMzZ,KACZ2V,aAAY8D,EAAM,cAClBnD,oBAAmBmD,EAAM,qBACzBtqB,GAAIsqB,EAAMtqB,GACV0lB,SAAU4E,EAAM5E,SAChBC,QAAS2E,EAAM3E,QACflE,IAAK8I,IAEP,yBAAK/I,UAAU,kBACZ8I,EAAM3K,KACN2K,EAAMI,iBACL,0BAAMlJ,UAAU,wBAAwB8I,EAAMI,uBC5D3CC,GAA0C,CACrD9Z,KAAM,4BACNqS,QAAS,SAACQ,EAAGzS,EAAUkL,GACrB,MAAO,CAAElL,SAAS,eAAMA,EAAP,CAAiBR,oBAAqB0L,MAEzDmH,eAAgB,YAA+B,IAA5BrS,EAA2B,EAA3BA,SAAUsS,EAAiB,EAAjBA,WAC3B,OACE,yBAAKjmB,MAAO,CAAEC,SAAU,aACtB,kBAAC,GAAD,CACEmb,MAAO7U,GAAE,2BACTlH,KAAK,mBACLiO,MAAOqG,EAASR,oBAChBiV,SAAU,SAAA9a,GAAK,OAAI2Y,EAAW3Y,QAKtCqY,gBAAiB,kBAAM,IAGZ2H,GAA4B,CACvC/Z,KAAM,cACNoS,gBAAiB,kBAAM,GACvBC,QAAS,WACP,MAAO,CACLjf,SAAU,GACVgN,SAAUrB,OAGd0T,eAAgB,gBAAGC,EAAH,EAAGA,WAAH,OACd,kBAAC8G,GAAD,CACE1tB,KAAK,SACLgjB,KAAMsK,GACN9E,MAAOthB,GAAE,sBACT2iB,aAAY3iB,GAAE,sBACd6d,QAAS,WACHljB,OAAOqsB,QAAQhnB,GAAE,wBAIlBrF,OAAegf,OAAS,KACzB+F,EAAW,YASfuH,GACG,QADHA,GAEG,QAFHA,GAGE,SAHFA,GAIU,iBAJVA,GAKK,YALLA,GAMM,UAGCC,GAAuB,CAClCla,KAAM,SACNqS,QAAS,SAACjf,EAAUgN,GAClB,MAAO,CACLA,SAAS,eACJA,EADG,CAEN7M,KAAMkO,GAAkBrB,EAAS7M,KAjBvB,QAqBhBkf,eAAgB,gBAAGC,EAAH,EAAGA,WAAH,OACd,kBAAC8G,GAAD,CACE1tB,KAAK,SACLgjB,KAAMwK,GACNhF,MAAOthB,GAAE,kBACT2iB,aAAY3iB,GAAE,kBACd6d,QAAS,WACP6B,EAAW,UAIjBP,QAAS,SAAAH,GAAK,OACXA,EAAMmI,OAASF,IAAmBjI,EAAMmI,OAASF,MACjDjI,EAAMna,EAAKuc,OAASpC,EAAM3W,YAGlB+e,GAAwB,CACnCpa,KAAM,UACNqS,QAAS,SAACjf,EAAUgN,GAClB,MAAO,CACLA,SAAS,eACJA,EADG,CAEN7M,KAAMkO,GAAkBrB,EAAS7M,KA3CvB,QA+ChBkf,eAAgB,gBAAGC,EAAH,EAAGA,WAAH,OACd,kBAAC8G,GAAD,CACE1tB,KAAK,SACLgjB,KAAMyK,GACNjF,MAAOthB,GAAE,mBACT2iB,aAAY3iB,GAAE,mBACd6d,QAAS,WACP6B,EAAW,UAIjBP,QAAS,SAAAH,GAAK,OACXA,EAAMmI,OAASF,IAAmBjI,EAAMmI,OAASF,MACjDjI,EAAMna,EAAKuc,OAASpC,EAAM3W,YAGlBgf,GAA0B,CACrCra,KAAM,YACNqS,QAAS,SAACjf,EAAUgN,GAClB,MAAO,CACLA,SAAS,eACJA,EADG,CAEN7M,KAAM,MAIZ4e,QAAS,SAAAH,GAAK,OACXA,EAAMmI,OAASF,IAAkBjI,EAAMmI,OAASF,MAChDjI,EAAMna,EAAKuc,OAASpC,EAAM3W,YC/HlBif,GAAyB,CACpCta,KAAM,WACNqS,QAAS,SAACjf,EAAUgN,GAClB,IAAIma,EAAcjd,GAAelK,GAiBjC,OAhBIzF,OAAOrB,SAASupB,yBAAyBjqB,aAC3C+B,OAAOrB,SAASupB,cAAc2E,OAE5Bpa,EAASnB,eACXmB,EAASnB,aAAaxP,OAAS2Q,EAASnB,aAAaxP,OAAOhE,MAC1D,EACA2U,EAASnB,aAAaxP,OAAOmC,OAAS,GAEpC8J,EAAwB0E,EAASnB,gBACnCsb,EAAcA,EAAY9uB,MAAM,GAAI,IAEtC2U,EAASnB,aAAazP,MAAQ,MAE3B4Q,EAASjB,eAAkBiB,EAASnB,cACvCzQ,IAEK,CACL4E,SAAUmnB,EACVna,SAAS,eACJA,EADG,CAENxE,YACEwE,EAASjB,eAAiBiB,EAASnB,aAC/BmB,EAASxE,YACT,YACNoD,gBAAiB,KACjBC,aAAc,SAIpBkT,QAAS,SAACH,EAAO5R,GAAR,OACN4R,EAAM3a,MAAQQ,EAAKM,SACjBiI,EAASpB,iBACgB,OAA1BoB,EAASnB,eACT+S,EAAM3a,MAAQQ,EAAKM,QAAU6Z,EAAM3a,MAAQQ,EAAKK,QACtB,OAA1BkI,EAASnB,eCjCFwb,I,MAAb,2MACUC,YAAc,SAAC9lB,GACrBpH,EAAWoH,EAAE+lB,gBAFjB,EAKUC,WAAa,SAAChmB,GACpB,IAAM0W,EAAQ1W,EAAE+lB,cAAc9tB,UAAUyM,OACpCgS,IAAU,EAAKmO,MAAMnO,OACvB,EAAKmO,MAAM5E,SAASvJ,GAEtBpd,KAVJ,EAaU2sB,cAAgB,SAACjmB,GACvB,GAAc,UAAVA,EAAEyC,IAAiB,CAErB,GADAzC,EAAEsG,iBACEtG,EAAEuhB,YAAY7a,aAA6B,MAAd1G,EAAEgE,QACjC,OAEFhE,EAAE+lB,cAAcH,SAnBtB,wEAwBI,OACE,0BACEM,gCAA8B,EAC9BlhB,gBAAgB,OAChBmhB,YAAU,UACVpK,UAAU,cACV8E,KAAK,UACLE,aAAYlG,KAAKgK,MAAM5R,MACvBsP,OAAQ1H,KAAKmL,WACbhF,UAAWnG,KAAKoL,cAChBtE,QAAS9G,KAAKiL,aAEbjL,KAAKgK,MAAMnO,WApCpB,GAAiC0P,cCHpBC,GAAkC,CAC7Cjb,KAAM,oBACNqS,QAAS,SAACjf,EAAUgN,EAAUkL,GAC5B,MAAO,CAAElL,SAAS,eAAMA,EAAP,CAAiBJ,KAAMsL,MAE1CmH,eAAgB,gBAAGrS,EAAH,EAAGA,SAAUsS,EAAb,EAAaA,WAAb,OACd,kBAAC,GAAD,CACE7K,MAAO7U,GAAE,oBACTsY,MAAOlL,EAASJ,MAAQ,UACxB6U,SAAU,SAAC7U,GAAD,OAAkB0S,EAAW1S,QAKhCkb,GAAuC,CAClDlb,KAAM,yBACNqS,QAAS,SAACjf,EAAUgN,EAAUkL,GAC5B,MAAO,CAAElL,SAAS,eAAMA,EAAP,CAAiBhB,iBAAkBkM,MAEtDmH,eAAgB,gBAAGrS,EAAH,EAAGA,SAAUsS,EAAb,EAAaA,WAAb,OACd,+BACE,2BACE5mB,KAAK,WACLgpB,QAAS1U,EAAShB,iBAClByV,SAAU,SAAAjgB,GACR8d,EAAW9d,EAAEjJ,OAAOmpB,YAErB,IACF9hB,GAAE,4BAKImoB,GAA0B,CACrCnb,KAAM,YACNqS,QAAS,SAACjf,EAAUgN,EAAUkL,GAE5B,OpB0BG,SAAP,qCoB3BI8P,CAAWhoB,EAAUgN,GAAUib,OAAM,SAAAlgB,GAAG,OAAI5E,QAAQ6E,MAAMD,MACnD,IAETsX,eAAgB,gBAAGC,EAAH,EAAGA,WAAH,OACd,kBAAC8G,GAAD,CACE1tB,KAAK,SACLgjB,KAAMnJ,GACN2O,MAAOthB,GAAE,gBACT2iB,aAAY3iB,GAAE,gBACd6d,QAAS,kBAAM6B,EAAW,WAKnB4I,GAA0B,CACrCtb,KAAM,YACNqS,QAAS,SACPjf,EACAgN,EAFO,GAKP,MAAO,CAAEhN,SADN,EADDA,SAEiCgN,SADhC,EADyBA,WAI9BqS,eAAgB,gBAAGC,EAAH,EAAGA,WAAH,OACd,kBAAC8G,GAAD,CACE1tB,KAAK,SACLgjB,KAAMqK,GACN7E,MAAOthB,GAAE,gBACT2iB,aAAY3iB,GAAE,gBACd6d,QAAS,YpBcR,WAAP,iCoBbQ0K,GACGC,MAAK,YAA6B,IAA1BpoB,EAAyB,EAAzBA,SAAUgN,EAAe,EAAfA,SACjBsS,EAAW,CAAEtf,SAAUA,EAAUgN,SAAUA,OAE5Cib,OAAM,SAAAlgB,GAAG,OAAI5E,QAAQ6E,MAAMD,WC1ElCsgB,GAAuB,KAEdC,GAA2B,CACtC1b,KAAM,aACNqS,QAAS,SAAAjf,GACP,IAAMlE,EAAUkE,EAAS+U,MAAK,SAAA1K,GAAE,OAAIA,EAAGpO,cAIvC,OAHIH,IACFusB,GAAezrB,KAAKE,UAAUhB,IAEzB,IAETsjB,iBAAkB,oBAClBL,QAAS,SAAAH,GAAK,OAAIA,EAAMna,EAAKuc,OAASpC,EAAM3W,UAA0B,MAAd2W,EAAM3a,KAC9Dkb,iBAAkB,GAGPoJ,GAA4B,CACvC3b,KAAM,cACNqS,QAAS,SAAAjf,GACP,IAAMwoB,EAAgB5rB,KAAKC,MAAMwrB,IACjC,MAAO,CACLroB,SAAUA,EAASyW,KAAI,SAAA3a,GACrB,GAAIA,EAAQG,WAAY,CACtB,IAAMV,EAAU,eACXO,EADW,CAEdM,MAAO,KACPX,gBAAe,OAAE+sB,QAAF,IAAEA,OAAF,EAAEA,EAAe/sB,gBAChCE,YAAW,OAAE6sB,QAAF,IAAEA,OAAF,EAAEA,EAAe7sB,YAC5BH,YAAW,OAAEgtB,QAAF,IAAEA,OAAF,EAAEA,EAAehtB,YAC5BE,UAAS,OAAE8sB,QAAF,IAAEA,OAAF,EAAEA,EAAe9sB,UAC1BG,QAAO,OAAE2sB,QAAF,IAAEA,OAAF,EAAEA,EAAe3sB,QACxBD,UAAS,OAAE4sB,QAAF,IAAEA,OAAF,EAAEA,EAAe5sB,YAM5B,OAJI4I,EAAcjJ,KAChBA,EAAWvC,KAAX,OAAkBwvB,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAexvB,KACjCqP,EAAsB9M,IAEjBA,EAET,OAAOO,OAIbkjB,gBAAiB,kBAAM,GACvBI,iBAAkB,qBAClBL,QAAS,SAAAH,GAAK,OAAIA,EAAMna,EAAKuc,OAASpC,EAAM3W,UAA0B,MAAd2W,EAAM3a,KAC9Dkb,iBAAkB,G,MC5Cb,SAASsJ,GAAT,GAAqD,IAAnC1L,EAAkC,EAAlCA,SAAU/V,EAAwB,EAAxBA,QACjC,OACE,yBACEuW,UAAU,SACVlkB,MAAO,CAAE,YAAa2N,IAErB+V,G,MCiCQ,OAlCf,YAAyE,IAArDA,EAAoD,EAApDA,SAAU2L,EAA0C,EAA1CA,IAAKC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,eACxC,OACE,yBACErL,UAAU,yBACVlkB,MACE,CACE,QAASqvB,EACTG,WAAYF,EACZC,mBAIH7L,IAsBQ,GAjBf,YAAyE,IAArDA,EAAoD,EAApDA,SAAU2L,EAA0C,EAA1CA,IAAKC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,eACxC,OACE,yBACErL,UAAU,uBACVlkB,MACE,CACE,QAASqvB,EACTI,aAAcH,EACdC,mBAIH7L,I,MC/BA,SAASgM,GAAT,GAGsB,IAF3BhM,EAE0B,EAF1BA,SACAiM,EAC0B,EAD1BA,KAEA,OACE,yBAAKzL,UAAS,qDAAgDyL,IAC3DjM,GCAP,IAEM0D,GAAQ,CACZwI,QACE,yBACEvvB,MAAM,OACNE,OAAO,OACP+hB,QAAQ,gBACRuN,MAAM,8BAEN,0BAAMlb,EAAE,iNAGZmb,UACE,yBACEzvB,MAAM,OACNE,OAAO,OACP+hB,QAAQ,gBACRuN,MAAM,6BACN7vB,MAAO,CAAEwN,KAAM,IAEf,0BAAMmH,EAAE,iQAKP,SAASob,GAAS/C,GACvB,IAAME,EAAM,wBAAoBF,EAAMG,MA3BL,KA6BjC,OACE,2BAAOjJ,UAAS,kCAA6BgJ,GAAUrF,MAAOmF,EAAMnF,OAClE,2BACE3D,UAAU,yBACV7kB,KAAK,WACLkU,KAAMyZ,EAAMzZ,KACZ7Q,GAAIsqB,EAAMtqB,GACV0lB,SAAU4E,EAAM5E,SAChBC,QAAS2E,EAAM3E,QACfa,aAAY8D,EAAMnF,QAEpB,yBAAK3D,UAAU,kBACZ8I,EAAM3E,QAAUjB,GAAMwI,QAAUxI,GAAM0I,Y,YClDxC,SAASE,GAAMhD,GAMpB,IAAMiD,EAyBR,WAAuB,MAMP/F,oBALd,WACE,IAAMtF,EAAM/kB,SAASC,cAAc,OAEnC,OADAD,SAASE,KAAKI,YAAYykB,GACnBA,KAEFA,EANc,oBAYrB,OALAmE,qBAAU,WACR,OAAO,WACLlpB,SAASE,KAAKe,YAAY8jB,MAE3B,CAACA,IACGA,EArCWsL,GAQlB,OAAOC,uBACL,yBACEjM,UAAU,QACV8E,KAAK,SACLC,aAAW,OACXE,UAXkB,SAAChhB,GACjBA,EAAEyC,MAAQQ,EAAKM,SACjBvD,EAAEuhB,YAAYC,2BACdqD,EAAMrJ,mBASNyM,kBAAiBpD,EAAMqD,YAEvB,yBAAKnM,UAAU,oBAAoBE,QAAS4I,EAAMrJ,iBAClD,yBAAKO,UAAU,iBAAiBlkB,MAAO,CAAEswB,SAAUtD,EAAMsD,WACtDtD,EAAMtJ,WAGXuM,GCbJ,IAAMM,GAAS,CAAC,EAAG,EAAG,GAChBC,GAAeD,GAAO/G,SAASiH,kBAAoBA,iBAAmB,EAO5E,SAASC,GAAT,GAkBI,IAjBF/pB,EAiBC,EAjBDA,SACAgN,EAgBC,EAhBDA,SAgBC,IAfD6G,qBAeC,MAfe,GAef,EAdDmW,EAcC,EAdDA,cACAC,EAaC,EAbDA,cACAC,EAYC,EAZDA,cACAC,EAWC,EAXDA,oBACAnN,EAUC,EAVDA,eAWMoN,EAAwB1f,GAAsB1K,GADnD,EAEyBujB,mBAASsG,IAFlC,mBAEM/V,EAFN,KAEauW,EAFb,OAG2C9G,mBAAS6G,GAHpD,mBAGME,EAHN,KAGsBC,EAHtB,KAIKC,EAAarN,iBAAuB,MAClCnR,EAA0CgB,EAA1ChB,iBAAkBQ,EAAwBQ,EAAxBR,oBACpBie,EAAYtN,iBAA0B,MACtCuN,EAAcvN,iBAA0B,MACxCwN,EAAoBxN,iBAAyB,MAE7CyN,EAAmBN,EACrB3f,GAAoB3K,GACpBA,EAmDJ,OAjDAoiB,qBAAU,WACRmI,EAAkBH,KACjB,CAACA,IAEJhI,qBAAU,WACR,IAAMyI,EAAcL,EAAWnN,QACzBxP,EAAS+F,GAAegX,EAAkB,CAC9C5e,mBACAQ,sBACAqH,gBACAC,UAGF,OADW,OAAX+W,QAAW,IAAXA,KAAarxB,YAAYqU,GAClB,WACM,OAAXgd,QAAW,IAAXA,KAAa1wB,YAAY0T,MAE1B,CACD+c,EACA5e,EACA6H,EACArH,EACAsH,IAGFsO,qBAAU,WAAO,IAAD,EACd,UAAAqI,EAAUpN,eAAV,SAAmBjV,UAClB,IAwBD,yBAAKmV,UAAU,uBAAuBiF,UAtBxC,SAAuBhhB,GACrB,GAAIA,EAAEyC,MAAQQ,EAAKY,IAAK,CAAC,IACfod,EAAkBvpB,SAAlBupB,cACR,GAAIjhB,EAAEyG,SAAU,CAC4B,IAAD,EAAzC,GAAIwa,IAAkBgI,EAAUpN,QAC9B,UAAAqN,EAAYrN,eAAZ,SAAqBjV,QACrB5G,EAAEsG,qBAEC,CACuC,IAAD,EAIM,EAJjD,GAAI2a,IAAkBiI,EAAYrN,QAChC,UAAAoN,EAAUpN,eAAV,SAAmBjV,QACnB5G,EAAEsG,iBAEJ,GAAI2a,IAAkBkI,EAAkBtN,QACtC,UAAAqN,EAAYrN,eAAZ,SAAqBjV,QACrB5G,EAAEsG,qBAQN,kBAAC,GAAD,CAAQd,QAAS,GACf,4BACEuW,UAAU,sBACVE,QAAST,EACTuF,aAAY3iB,GAAE,iBACd4d,IAAKkN,GAJP,UAQA,wBAAI3uB,GAAG,gBAAgB6D,GAAE,mBACzB,yBAAK2d,UAAU,wBAAwBC,IAAKgN,IAC5C,yBAAKjN,UAAU,yBACb,kBAAC,GAAD,CAAWmL,IAAK,GACd,kBAAC,GAAD,CAAWA,IAAK,GACd,kBAACtC,GAAD,CACE1tB,KAAK,SACL+b,MAAM,MACNyM,MAAOthB,GAAE,uBACT2iB,aAAY3iB,GAAE,uBACd6d,QAAS,kBAAMwM,EAAcW,EAAkB9W,IAC/C0J,IAAKiN,IAEP,kBAACrE,GAAD,CACE1tB,KAAK,SACL+b,MAAM,MACNyM,MAAOthB,GAAE,uBACT2iB,aAAY3iB,GAAE,uBACd6d,QAAS,kBAAMyM,EAAcU,EAAkB9W,MAEhDuC,IACC,kBAAC+P,GAAD,CACE1tB,KAAK,SACLgjB,KAAMvF,GACN+K,MAAOthB,GAAE,2BACT2iB,aAAY3iB,GAAE,2BACd6d,QAAS,kBAAM0M,EAAoBS,EAAkB9W,QAM5DkW,EAAcc,aAAa,qBAC5B,kBAAC,GAAD,CAAWpC,IAAK,GACd,yBAAKnL,UAAU,wBACb,kBAAC,GAAD,CAAWmL,IAAK,EAAGC,MAAM,YACtBiB,GAAOnT,KAAI,SAAAnV,GAAC,OACX,kBAAC8kB,GAAD,CACEniB,IAAK3C,EACLklB,KAAK,IACL9tB,KAAK,QACLgjB,KAAI,WAAMpa,GACVsL,KAAK,sBACL2V,aAAA,gBAAqBjhB,EAArB,MACAvF,GAAG,sBACH2lB,QAAS5N,IAAUxS,EACnBmgB,SAAU,kBAAM4I,EAAS/oB,WAKhC0oB,EAAcc,aAAa,0BAC3BV,GACC,6BACE,+BACE,2BACE1xB,KAAK,WACLgpB,QAAS4I,EACT7I,SAAU,SAAAjgB,GAAC,OAAI+oB,EAAkB/oB,EAAE+lB,cAAc7F,UACjDlE,IAAKmN,IACJ,IACF/qB,GAAE,6BAWd,SAASmrB,GAAT,GAgBH,IAfF/qB,EAeC,EAfDA,SACAgN,EAcC,EAdDA,SAcC,IAbD6G,qBAaC,MAbe,GAaf,EAZDmW,EAYC,EAZDA,cACAC,EAWC,EAXDA,cACAC,EAUC,EAVDA,cACAC,EASC,EATDA,oBASC,EACuC5G,oBAAS,GADhD,mBACMyH,EADN,KACoBC,EADpB,KAEKC,EAAgB/N,iBAA0B,MAE1Ce,EAAc8D,IAAMmJ,aAAY,WAAO,IAAD,EAC1CF,GAAgB,GAChB,UAAAC,EAAc7N,eAAd,SAAuBjV,UACtB,IAEH,OACE,oCACE,kBAACge,GAAD,CACE3I,QAAS,kBAAMwN,GAAgB,IAC/BvP,KAAMuK,GACNvtB,KAAK,SACL6pB,aAAY3iB,GAAE,kBACdshB,MAAOthB,GAAE,kBACT4d,IAAK0N,IAENF,GACC,kBAAC,GAAD,CACErB,SAAU,IACV3M,eAAgBkB,EAChBwL,WAAW,gBAEX,kBAACK,GAAD,CACE/pB,SAAUA,EACVgN,SAAUA,EACV6G,cAAeA,EACfmW,cAAeA,EACfC,cAAeA,EACfC,cAAeA,EACfC,oBAAqBA,EACrBnN,eAAgBkB,MC9OrB,SAASkN,GAAT,GAQH,IAPF3J,EAOC,EAPDA,SACAlN,EAMC,EANDA,UACAI,EAKC,EALDA,gBAMA,OACE,kBAAC,IAAM0W,SAAP,KACE,4BACE9N,UAAU,kBACVkE,SAAU,gBAAGlpB,EAAH,EAAGA,OAAH,OAAgBkpB,EAASlpB,EAAO2f,QAC1CA,MAAOvD,EACP4N,aAAY3iB,GAAE,2BAEb2U,EAAUkC,KAAI,SAAAzB,GAAQ,OACrB,4BAAQ/Q,IAAK+Q,EAASR,IAAK0D,MAAOlD,EAASR,KACxCQ,EAASP,Y,UCgBT6W,GAAa,SAAC,GAKd,IACLC,EA9BS,SAAC,GAA4D,IAA1D/iB,EAAyD,EAAzDA,YAAagjB,EAA4C,EAA5CA,UAAW3e,EAAiC,EAAjCA,WAAY7M,EAAqB,EAArBA,SACtD,GAAoB,UAAhBwI,GAA2C,SAAhBA,EAC7B,OAGO5I,GAHF4rB,EAGI,2BAFE,uBAKb,GAAI3e,EAAY,CACd,IAAMiG,EAAmBnI,GAAoB3K,GAC7C,OAC8B,IAA5B8S,EAAiBtU,SACa,UAA7BsU,EAAiB,GAAGpa,MACU,SAA7Boa,EAAiB,GAAGpa,OACtBoa,EAAiB,GAAGzW,OAAOmC,OAAS,EAE7B,KAEFoB,GAAE,gBAGX,OAAO,KASM6rB,CAAS,CACpBjjB,YAFQ,EAJVA,YAOEgjB,UAHQ,EAHVA,UAOE3e,WAJQ,EAFVA,WAOE7M,SALQ,EADVA,WAQA,OAAKurB,EAIE,yBAAKhO,UAAU,cAAcgO,GAH3B,M,mKC0DLvrB,G5BzGG,CAAEA,SADsC,I4B0G3CA,SACE0rB,G1BTC,CAAEA,QADO,IAAI1P,I0BUd0P,QAER,SAASC,GAAkBvvB,GACX,cAAVA,EACFhB,IAEAlC,SAASmC,gBAAgBhC,MAAMiC,OACnB,SAAVc,EAAmBwvB,GAAYC,KAAOD,GAAYE,UAIxD,IAIMF,GAAc,CAClBC,KAAM,OACNC,UAAW,YACXC,SAAU,YAENC,GACE,EADFA,GAEG,EAILC,GAAyC,KAEtC,SAASC,GAAT,IAWLre,GACC,IAXCse,EAWF,EAXEA,QAASC,EAWX,EAXWA,QAETrjB,EASF,EATEA,QACAC,EAQF,EAREA,QACA7I,EAOF,EAPEA,KAQIksB,EAAaze,GAAcC,GAOjC,MAAO,CAAE7S,EANeqxB,EAAWrxB,GAAKmxB,EAAUE,EAAWrxB,GAAKmF,EAGtC4I,EAGhB9N,EALYoxB,EAAWpxB,GAAKmxB,EAAUC,EAAWpxB,GAAKkF,EAGtC6I,GAKvB,SAASsjB,GAAT,IAWLze,GACC,IAXC0e,EAWF,EAXEA,OAAQC,EAWV,EAXUA,OAERzjB,EASF,EATEA,QACAC,EAQF,EAREA,QACA7I,EAOF,EAPEA,KAQIksB,EAAaze,GAAcC,GASjC,MAAO,CAAE7S,EAPPqxB,EAAWrxB,GAAKqxB,EAAWrxB,EAAIuxB,EAASxjB,GAAW5I,EAOzClF,EALVoxB,EAAWpxB,GAAKoxB,EAAWpxB,EAAIuxB,EAASxjB,GAAW7I,GAQvD,IAAIsM,GAAU,EACVC,GAAU,EACV+f,IAA0B,EAC1BC,IAAqB,EACrBC,IAAgC,EAY9BC,GAAU5K,IAAM6K,MACpB,YAQqB,IAPnB7C,EAOkB,EAPlBA,cACAhd,EAMkB,EANlBA,SACA8f,EAKkB,EALlBA,YACAjf,EAIkB,EAJlBA,OACA7N,EAGkB,EAHlBA,SACAgV,EAEkB,EAFlBA,SACA+X,EACkB,EADlBA,YA4JA,OACE,oCACE,kBAAC,GAAD,CAAoB/D,KAAK,OACvB,yBAAKzL,UAAU,yBACb,kBAAC,GAAD,CAAWmL,IAAK,EAAGC,MAAM,OACvB,6BACEpL,UAAU,iBACVkM,kBAAgB,wBAEhB,wBAAIlM,UAAU,kBAAkBxhB,GAAG,wBAChC6D,GAAE,2BAEL,kBAAC,GAAD,CAAQoH,QAAS,GApKzB,kBAAC,GAAD,CAAW0hB,IAAK,GACd,kBAAC,GAAD,CAAWE,eAAgB,iBACxBoB,EAAcc,aAAa,aAC3Bd,EAAcc,aAAa,aAC5B,kBAAC,GAAD,CACE9qB,SAAUA,EACVgN,SAAUA,EACVgd,cAAeA,EACfC,cAAe,SAACW,EAAkB9W,GAC5BjG,GACFyM,GAAa,MAAOsQ,EAAkB/c,EAAQ,CAC5C7B,iBAAkBgB,EAAShB,iBAC3BY,KAAMI,EAASJ,KACfJ,oBAAqBQ,EAASR,oBAC9BsH,WAINoW,cAAe,SAACU,EAAkB9W,GAC5BjG,GACFyM,GAAa,MAAOsQ,EAAkB/c,EAAQ,CAC5C7B,iBAAkBgB,EAAShB,iBAC3BY,KAAMI,EAASJ,KACfJ,oBAAqBQ,EAASR,oBAC9BsH,WAINqW,oBAAqB,SAACS,EAAkB9W,GAClCjG,GACFyM,GAAa,YAAasQ,EAAkB/c,EAAQ,CAClD7B,iBAAkBgB,EAAShB,iBAC3BY,KAAMI,EAASJ,KACfJ,oBAAqBQ,EAASR,oBAC9BsH,aAKPkW,EAAcc,aAAa,gBAE7Bd,EAAcc,aAAa,gCA6HxB,6BACEvN,UAAU,iBACVkM,kBAAgB,wBAEhB,wBAAIlM,UAAU,kBAAkBxhB,GAAG,wBAChC6D,GAAE,kCA7HjB,SACEI,GACC,IACOwI,EAAgCwE,EAAhCxE,YAAasD,EAAmBkB,EAAnBlB,eACfkhB,EAAiBlhB,EACnB,CAACA,GACDnB,GAAoB3K,GACxB,OAAKgtB,EAAexuB,QAA0B,cAAhBgK,EAK5B,kBAAC,GAAD,CAAQxB,QAAS,GACf,yBAAKuW,UAAU,eACZyM,EAAcc,aAAa,sBAC1B1P,GAAc5S,IACdwkB,EAAe/pB,MAAK,SAAAnH,GAAO,OAAIsf,GAActf,EAAQpD,WACrD,oCACGsxB,EAAcc,aAAa,yBAE3Bd,EAAcc,aAAa,qBAI9BzP,GAAU7S,IACVwkB,EAAe/pB,MAAK,SAAAnH,GAAO,OAAIuf,GAAUvf,EAAQpD,WACjD,oCACGsxB,EAAcc,aAAa,qBAE3Bd,EAAcc,aAAa,sBAI9BxP,GAAQ9S,IACRwkB,EAAe/pB,MAAK,SAAAnH,GAAO,OAAIwf,GAAQxf,EAAQpD,WAC/C,oCACGsxB,EAAcc,aAAa,kBAE3Bd,EAAcc,aAAa,qBAI/Bd,EAAcc,aAAa,iBAE5B,kCACE,gCAASlrB,GAAE,kBACX,yBAAK2d,UAAU,cACZyM,EAAcc,aAAa,cAC3Bd,EAAcc,aAAa,gBAC3Bd,EAAcc,aAAa,gBAC3Bd,EAAcc,aAAa,kBAI/Bd,EAAcc,aAAa,4BA9CzB,KAuHEmC,CAA2BjtB,KAGhC,6BAASypB,kBAAgB,gBACvB,kBAAC,GAAD,CAAWf,IAAK,EAAGC,MAAM,SACvB,kBAAC,GAAD,CAAWD,IAAK,GACd,kBAAC,GAAD,CAAQ1hB,QAAS,GACf,wBAAIuW,UAAU,kBAAkBxhB,GAAG,gBAChC6D,GAAE,oBAEL,kBAAC,GAAD,CAAW8oB,IAAK,GA3E5B,oCACGjN,GAAOhF,KAAI,WAAkBjM,GAAW,IAA1B0N,EAAyB,EAAzBA,MAAOwD,EAAkB,EAAlBA,KACdjH,EAAQ7U,GAAE,WAAD,OAAYsY,IAC3B,OACE,kBAACkO,GAAD,CACEniB,IAAKiU,EACLxf,KAAK,QACLgjB,KAAMA,EACNgG,QAAS1U,EAASxE,cAAgB0P,EAClCtL,KAAK,uBACLsU,MAAK,UAAKjpB,EAAiBwc,GAAtB,mBACHxc,EAAiBigB,GAAO,GADrB,aAEA1N,EAAQ,GACbic,gBAAe,UAAKjc,EAAQ,GAC5B+X,aAAYtqB,EAAiBwc,GAC7ByO,oBAAA,UAAsBzO,EAAM,GAA5B,YAAkCjK,EAAQ,GAC1CiX,SAAU,WACRqL,EAAY,CAAEtkB,YAAa0P,EAAOrM,aAAc,OAChDkhB,EAAY7iB,GAAelK,IAC3B9G,SAASmC,gBAAgBhC,MAAMiC,OACnB,SAAV4c,EAAmB0T,GAAYC,KAAOD,GAAYE,UACpDgB,EAAY,aAwDZ,kBAAC1D,GAAD,CACE1H,QAAS1U,EAASjB,cAClB0V,SAAU,WACRqL,EAAY,CACV/gB,eAAgBiB,EAASjB,cACzBvD,YAAawE,EAASjB,cAClB,YACAiB,EAASxE,eAGjB0Y,MAAOthB,GAAE,qBAKjB,+BAEF,yBAAK2d,UAAU,4BACb,kBAAC,GAAD,CAAWmL,IAAK,GACd,6BAASe,kBAAgB,6BACvB,wBAAIlM,UAAU,kBAAkBxhB,GAAG,6BAChC6D,GAAE,2BAEL,kBAAC,GAAD,CAAQoH,QAAS,GApEzB,kBAAC,GAAD,CAAW0hB,IAAK,GACd,kBAAC,GAAD,CAAWA,IAAK,EAAGC,MAAM,UACtBqB,EAAcc,aAAa,UAC3Bd,EAAcc,aAAa,WAC5B,yBAAKzxB,MAAO,CAAE6zB,WAAY,KACN,IAAhBlgB,EAAS7M,MAAYiO,QAAQ,GADjC,YAqEJ,4BAAQiU,KAAK,eACX,kBAAC,GAAD,CACE7Z,YAAawE,EAASxE,YACtBgjB,UAAqC,OAA1Bxe,EAASnB,aACpBgB,WAAYG,EAASH,WACrB7M,SAAUA,IAEZ,kBAACorB,GAAD,CACE3J,SAAU,SAAAjN,GACRK,GAAYL,GACZsY,EAAY,KAEdvY,UAAWA,GACXI,gBAAiBK,IAElBhI,EAASL,iBACR,4BACE4Q,UAAU,yBACVE,QAAS,WACPqP,EAAY,eAAKjU,GAAsB7Y,OAGxCJ,GAAE,qCAOf,SAACutB,EAAMC,GACL,IAAMC,EAAkB,SAACrgB,GAUnBA,EARFpB,gBAQEoB,EAPF3I,gBAOE2I,EANFnB,aAMEmB,EALFlB,eAKEkB,EAJFH,WAIEG,EAHFP,QAGEO,EAFFN,QAGF,OAXiE,YAU7DM,EAV6D,yGAa7DsgB,EAAeD,EAAgBF,EAAKngB,UACpCugB,EAAeF,EAAgBD,EAAKpgB,UAEpChJ,EAAOD,OAAOC,KAAKspB,GAEzB,OACEH,EAAKnY,WAAaoY,EAAKpY,UACvBmY,EAAKntB,WAAaotB,EAAKptB,UACvBgE,EAAKwpB,OAAM,SAAAC,GAAC,OAAIH,EAAaG,KAAOF,EAAaE,SAK1CC,GAAb,YAME,WAAYrH,GAAa,IAAD,8BACtB,4CAAMA,KANRxY,OAAmC,KAKX,EAJxBoC,GAAyB,KAID,EAFxB+Z,mBAEwB,IADxB2D,uBACwB,IAyChBC,iBAAmB,SACzBC,GAEI,IADJ7O,IACG,yDACC,EAAK8O,YAGLD,EAAI7tB,WACNA,GAAW6tB,EAAI7tB,SACXgf,GACF0M,GAAQqC,kBAEV,EAAKC,SAAS,KAGZH,EAAI7gB,WACFgS,GACF0M,GAAQqC,kBAEV,EAAKC,SAAL,eAAmBH,EAAI7gB,cA5DH,EAgEhBihB,MAAQ,SAACzsB,GACXlJ,EAAkBkJ,EAAEjJ,UAGxBie,GAAmBxW,IACnBA,GAAWoK,GAAuBpK,IAClC0rB,GAAQqC,kBACR,EAAKC,SAAS,IACdxsB,EAAEsG,mBAxEoB,EA0EhBomB,OAAS,SAAC1sB,GACZlJ,EAAkBkJ,EAAEjJ,UAGxBie,GAAmBxW,IACnBwB,EAAEsG,mBA/EoB,EAkFhBqmB,SAAW,WACjB1B,IAAiB,EACjB,EAAK2B,gBACL,EAAKA,cAAcC,SArFG,EAwFhBC,aAAoC,SAAA9sB,GAC1CA,EAAEsG,kBAzFoB,EA4FhBgmB,WAAY,EA5FI,EAmIjBS,MAAkB5iB,KAnID,EAqIhB6iB,SAAW,WACjB,EAAKR,SAAS,KAtIQ,EAyIhBS,4BAA8B,SAACjtB,GACrCiL,GAAUjL,EAAExG,EACZ0R,GAAUlL,EAAEvG,GA3IU,EA8IhBunB,UAAY,SAAC5D,GpD/lBhB,IACLrmB,EoD+lBE,KACGD,EAAkBsmB,EAAMrmB,SAAWqmB,EAAM3a,MAAQQ,EAAKM,QAEtDQ,EAAWqZ,EAAM3a,OpDlmBtB1L,EoDkmB0CqmB,EAAMrmB,OpD1lB7CA,aAAkBC,aAAuC,YAAxBD,EAAOE,QAAQC,MACjDH,aAAkBI,eAClBJ,aAAkBM,kBAClBN,aAAkBK,qBAClBL,aAAkBm2B,sBoD2lBd,EAAK1E,cAAcvC,cAAc7I,GAArC,CAIA,IAAMxiB,E3B1jBH,SAAwB6H,GAAc,IAAD,EAC1C,OACE,UAAAwX,GAAO1G,MAAK,SAAC3Y,EAAOoO,GAClB,OAAOpO,EAAM8b,MAAM,KAAOjU,GAAOA,KAASuG,EAAQ,GAAGsR,qBADvD,eAEI5D,QAAS,Y2BsjBCyW,CAAe/P,EAAM3a,KAEnC,GAAIsB,EAAWqZ,EAAM3a,KAAM,CACzB,IAAMwhB,EAAO7G,EAAM3W,SA7gBc,EACN,EA+gB3BjI,GAAWA,GAASyW,KAAI,SAAApM,GACtB,GAAIA,EAAGpO,WAAY,CACjB,IAAMH,EAAO,eAAQuO,GAUrB,OATIuU,EAAM3a,MAAQQ,EAAKC,WACrB5I,EAAQd,GAAKyqB,EACJ7G,EAAM3a,MAAQQ,EAAKE,YAC5B7I,EAAQd,GAAKyqB,EACJ7G,EAAM3a,MAAQQ,EAAKI,SAC5B/I,EAAQb,GAAKwqB,EACJ7G,EAAM3a,MAAQQ,EAAKG,aAC5B9I,EAAQb,GAAKwqB,GAER3pB,EAET,OAAOuO,KAET,EAAK2jB,SAAS,IACdpP,EAAM9W,sBACD,IACL+T,GAAmBgH,SAASjE,EAAM3a,IAAI6e,gBACrClE,EAAMgQ,SACNhQ,EAAMqC,QACNrC,EAAMiQ,SACwB,OAA/B,EAAKN,MAAM3iB,gBAIN,GAAIgT,EAAMna,EAAKuc,OAAS,KAAK9b,KAAK0Z,EAAM3a,KAAM,CAGnD,GAFA2a,EAAM9W,iBAGJ,EAAKymB,MAAM1iB,cACX,EAAK0iB,MAAMlqB,iBACX,EAAKkqB,MAAMziB,gBACX,EAAKyiB,MAAM3iB,gBAEX,OAGF,GAAIgT,EAAM3W,SAAU,CAElB,IAAM3I,EAAOosB,GAAQoD,WACR,OAATxvB,IACFU,GAAWV,EAAKU,SAChB,EAAKguB,SAAL,eAAmB1uB,EAAK0N,gBAErB,CAEL,IAAM1N,EAAOosB,GAAQqD,WACR,OAATzvB,IACFU,GAAWV,EAAKU,SAChB,EAAKguB,SAAL,eAAmB1uB,EAAK0N,kBAGnB4R,EAAM3a,MAAQQ,EAAKa,OAAUqnB,KACtCF,IAAiB,EACjBvzB,SAASmC,gBAAgBhC,MAAMiC,OAASswB,GAAYG,eA/BpD,EAAKiD,gBAAgB5yB,KA1LD,EA6NhB6yB,QAAU,SAACrQ,GACbA,EAAM3a,MAAQQ,EAAKa,QACU,cAA3B,EAAKipB,MAAM/lB,YACbpN,KAEA4E,GAAWkK,GAAelK,IAC1B9G,SAASmC,gBAAgBhC,MAAMiC,OACF,SAA3B,EAAKizB,MAAM/lB,YACPojB,GAAYC,KACZD,GAAYE,UAClB,EAAKkC,SAAS,KAEhBvB,IAAiB,IAzOG,EA6OhBjW,mBAAqB,WAC3BA,GAAmBxW,KA9OG,EAiPhBkvB,mBAjPgB,uCAiPK,WAAO1tB,GAAP,2BAAAQ,EAAA,yDAErBzJ,EAASW,SAASupB,cAClB0M,EAAqBj2B,SAASk2B,iBAAiB3iB,GAASC,OAI3DlL,GACA2tB,aAA8B7Y,oBAC5Bhe,EAAkBC,IATI,gCAWNse,GAAoBrV,GAXd,QAWnBlC,EAXmB,QAYhBU,SACP,EAAKqvB,qBAAqB/vB,EAAKU,UACtBV,EAAKvG,OAAO,EACJmzB,GACf,CAAEC,QAAS1f,GAAS2f,QAAS1f,IAC7B,EAAK6hB,MACL,EAAK1gB,QAHC7S,EADY,EACZA,EAAGC,EADS,EACTA,GAMLa,EAAUQ,EACdf,EACE,OACAP,EACAC,EACA,EAAKszB,MAAMtiB,uBACX,EAAKsiB,MAAMriB,2BACX,EAAKqiB,MAAMpiB,qBACX,EAAKoiB,MAAMniB,uBACX,EAAKmiB,MAAMliB,qBACX,EAAKkiB,MAAMjiB,oBAEbhN,EAAKvG,KACL,EAAKw1B,MAAMhiB,kBAGLtQ,YAAa,EAErB+D,GAAQ,sBAAOkK,GAAelK,KAAtB,CAAiClE,IACzC4vB,GAAQqC,mBAEV,EAAKiB,gBAAgB,aACpB,OAADxtB,QAAC,IAADA,KAAGsG,iBA3CsB,2CAjPL,wDA6SxBglB,YAAc,SAACwC,GACb,EAAKtB,SAASsB,IA9SQ,EAiTxBvC,YAAc,SAACwC,GACbvvB,GAAWuvB,EACX,EAAKvB,SAAS,KAnTQ,EA47ChBwB,YAAc,SAAChuB,GACrBA,EAAEsG,iBADqC,IAE/B2nB,EAAmBjuB,EAAnBiuB,OAAQ9J,EAAWnkB,EAAXmkB,OAEhB,GAAInkB,EAAEiD,EAAKuc,MAAO,CAChB,IAAMzc,EAAOrJ,KAAKqJ,KAAKohB,GAEnB+J,EAAQx0B,KAAKC,IAAIwqB,GAQrB,OAPI+J,EAFa,KAGfA,EAHe,IAKjBA,GAASnrB,OACT,EAAKypB,UAAS,kBAAe,CAC3B7tB,KAAMkO,GADM,EAAGlO,KACgBuvB,EAAQ,SAK3C,EAAK1B,UAAS,gBAAG7tB,EAAH,EAAGA,KAAM4I,EAAT,EAASA,QAASC,EAAlB,EAAkBA,QAAlB,MAAiC,CAC7CD,QAASA,EAAU0mB,EAAStvB,EAC5B6I,QAASA,EAAU2c,EAASxlB,OAh9CR,EAo9ChBkvB,qBAAuB,SAC7BzY,GAEA5W,GAAWkK,GAAelK,IADvB,MAG8BD,EAAgB6W,GAH9C,mBAGI/X,EAHJ,KAGUF,EAHV,KAGgBG,EAHhB,KAGsBE,EAHtB,KAKG2wB,EAAkB50B,EAAS8D,EAAMC,GAAQ,EACzC8wB,EAAkB70B,EAAS4D,EAAMK,GAAQ,EAN5C,EAQcktB,GACf,CAAEC,QAAS1f,GAAS2f,QAAS1f,IAC7B,EAAK6hB,MACL,EAAK1gB,QAHC7S,EARL,EAQKA,EAAGC,EARR,EAQQA,EAMLyC,EAAK1C,EAAI20B,EACThyB,EAAK1C,EAAI20B,EAEf5vB,GAAQ,sBACHA,IADG,YAEH4W,EAAkBH,KAAI,SAAAG,GACvB,IAAMiZ,EAAYrzB,EAAiBoa,GAGnC,OAFAiZ,EAAU70B,GAAK0C,EAAKmB,EACpBgxB,EAAU50B,GAAK0C,EAAKgB,EACbkxB,OAGXnE,GAAQqC,kBACR,EAAKC,SAAS,KAj/CQ,EA+gDhBI,cpDp6DH,SACL0B,EACAC,GAEA,IACIC,EADAzW,EAAS,EAEP0W,EAAM,WAAiB,IAAD,uBAAZC,EAAY,yBAAZA,EAAY,gBAC1BF,EAAWE,EACXC,aAAa5W,GACbA,EAAShf,OAAO61B,YAAW,kBAAMN,EAAE,WAAF,EAAMI,KAAOH,IAMhD,OAJAE,EAAI5B,MAAQ,WACV8B,aAAa5W,GACbuW,EAAE,WAAF,cAAME,KAEDC,EoDq5DiBI,EAAS,WAC/BrV,GACEhb,GAAS8D,QAAO,SAAA9I,GAAC,MAAe,cAAXA,EAAEtC,QACvB,EAAK61B,SAEN,KAlhDD,EAAKvE,cAAgB,IAAIzL,GACvB,EAAKqP,kBACL,kBAAM,EAAKW,SACX,kBAAMvuB,MAER,EAAKgqB,cAAcsG,eAAepJ,IAClC,EAAK8C,cAAcsG,eAAe9Q,IAClC,EAAKwK,cAAcsG,eAAelP,IAClC,EAAK4I,cAAcsG,eAAejP,IAClC,EAAK2I,cAAcsG,eAAevP,IAClC,EAAKiJ,cAAcsG,eAAenP,IAClC,EAAK6I,cAAcsG,eAAehP,IAElC,EAAK0I,cAAcsG,eAAepL,IAClC,EAAK8E,cAAcsG,eAAelL,IAClC,EAAK4E,cAAcsG,eAAejL,IAClC,EAAK2E,cAAcsG,eAAehL,IAClC,EAAK0E,cAAcsG,eAAe9K,IAClC,EAAKwE,cAAcsG,eAAe/K,IAClC,EAAKyE,cAAcsG,eAAe1K,IAClC,EAAKoE,cAAcsG,eAAezK,IAElC,EAAKmE,cAAcsG,eAAe5J,IAClC,EAAKsD,cAAcsG,eAAe3J,IAClC,EAAKqD,cAAcsG,eAAexJ,IAClC,EAAKkD,cAAcsG,eAAetJ,IAClC,EAAKgD,cAAcsG,eAAerJ,IAElC,EAAK+C,cAAcsG,eAAezI,IAClC,EAAKmC,cAAcsG,eAAexI,IAClC,EAAKkC,cAAcsG,eAAevI,IAClC,EAAKiC,cAAcsG,eAAepI,IAElC,EAAK8B,cAAcsG,eAAehI,IAClC,EAAK0B,cAAcsG,eAAe/H,IAElC,EAAKoF,kBAAoB,CAACrM,IAtCJ,EAN1B,wMAoGIpoB,SAASiP,iBAAiB,OAAQkU,KAAK6R,QACvCh1B,SAASiP,iBAAiB,QAASkU,KAAK6S,oBACxCh2B,SAASiP,iBAAiB,MAAOkU,KAAK4R,OAEtC/0B,SAASiP,iBAAiB,UAAWkU,KAAKmG,WAAW,GACrDtpB,SAASiP,iBAAiB,QAASkU,KAAK4S,QAAS,CAAEsB,SAAS,IAC5Dr3B,SAASiP,iBAAiB,YAAakU,KAAKoS,6BAC5Cl0B,OAAO4N,iBAAiB,SAAUkU,KAAKmS,UAAU,GACjDj0B,OAAO4N,iBAAiB,SAAUkU,KAAK8R,UAAU,GACjD5zB,OAAO4N,iBAAiB,OAAQkU,KAAK8R,UAAU,GAC/C5zB,OAAO4N,iBAAiB,WAAYkU,KAAKiS,cAAc,GACvD/zB,OAAO4N,iBAAiB,OAAQkU,KAAKiS,cAAc,GA/GvD,UAiHwBnT,KAjHxB,QAiHUqV,EAjHV,OAkHInU,KAAKuR,iBAAiB4C,GAlH1B,oJAsHInU,KAAKyR,WAAY,EACjB50B,SAASqN,oBAAoB,OAAQ8V,KAAK6R,QAC1Ch1B,SAASqN,oBAAoB,QAAS8V,KAAK6S,oBAC3Ch2B,SAASqN,oBAAoB,MAAO8V,KAAK4R,OAEzC/0B,SAASqN,oBAAoB,UAAW8V,KAAKmG,WAAW,GACxDtpB,SAASqN,oBACP,YACA8V,KAAKoS,6BACL,GAEFv1B,SAASqN,oBAAoB,QAAS8V,KAAK4S,SAC3C10B,OAAOgM,oBAAoB,SAAU8V,KAAKmS,UAAU,GACpDj0B,OAAOgM,oBAAoB,SAAU8V,KAAK8R,UAAU,GACpD5zB,OAAOgM,oBAAoB,OAAQ8V,KAAK8R,UAAU,GAClD5zB,OAAOgM,oBAAoB,WAAY8V,KAAKiS,cAAc,GAC1D/zB,OAAOgM,oBAAoB,OAAQ8V,KAAKiS,cAAc,KAtI1D,sCAsS0B9lB,GpDvvBnB,IACLjQ,EoDuvBOk0B,IACHd,GAAkBnjB,IpDxvBtBjQ,EoD0vBiBW,SAASupB,yBpDxvBDjqB,aAAeD,EAAOglB,UAAUsF,SAAS,aoDyvB9D3pB,SAASupB,cAAc2E,OAEL,cAAhB5e,IACFxI,GAAWkK,GAAelK,KAE5Bqc,KAAK2R,SAAS,CAAExlB,kBAhTpB,+BA4TmB,IAAD,OACRioB,EAAiBl2B,OAAOye,WACxB0X,EAAkBn2B,OAAO0e,YAEzB0X,EAAcp2B,OAAOuvB,iBAErB8G,EAAcH,EAAiBE,EAC/BE,EAAeH,EAAkBC,EAEvC,OACE,yBAAKpT,UAAU,aACb,kBAACqP,GAAD,CACE/e,OAAQwO,KAAKxO,OACbb,SAAUqP,KAAKkS,MACfzB,YAAazQ,KAAKyQ,YAClB9C,cAAe3N,KAAK2N,cACpBhqB,SAAUA,GACV+sB,YAAa1Q,KAAK0Q,YAClB/X,ShCrxBDL,GAAgBH,MgCuxBjB,8BACE,4BACEzY,GAAG,SACH1C,MAAO,CACLK,MAAO+2B,EACP72B,OAAQ82B,GAEVh3B,MAAOk3B,EACPh3B,OAAQi3B,EACRrT,IAAK,SAAA3P,GAEmB,IAAD,EAWd,EAXQ,OAAXA,GACF,EAAKA,OAASA,EACd,EAAKoC,GAAKgE,IAAMpG,OAAO,EAAKA,QAE5B,EAAKA,OAAO1F,iBAAiB,QAAS,EAAKqnB,YAAa,CACtDe,SAAS,IAGX,YAAK1iB,OACFC,WAAW,aADd,SAEIoE,aAAaye,EAAa,EAAG,EAAGA,EAAa,EAAG,IAEpD,YAAK9iB,cAAL,SAAatH,oBAAoB,QAAS,EAAKipB,cAGnD9R,cAAe,SAAAlc,GACbA,EAAEsG,iBADgB,MAGDokB,GACf1qB,EACA,EAAK+sB,MACL,EAAK1gB,QAHC7S,EAHU,EAGVA,EAAGC,EAHO,EAGPA,EAMLa,EAAUyf,GACdvb,GACAhF,EACAC,EACA,EAAKszB,MAAMpuB,MAERrE,GAiBAA,EAAQG,aACX+D,GAAWkK,GAAelK,IAC1BlE,EAAQG,YAAa,EACrB,EAAK+xB,SAAS,KAGhBpQ,GAAiB,CACf9O,QAAQ,CACN3J,UAAUgR,WAAa,CACrB1B,MAAO7U,GAAE,eACTme,OAAQ,EAAKvH,oBAEfrR,UAAUgR,WAAa,CACrB1B,MAAO7U,GAAE,gBACTme,OAAQ,kBAAM,EAAKmR,mBAAmB,SAPnC,mBASF,EAAKlF,cAAc8G,qBACpB,SAAA/S,GAAM,OAAK,EAAK4P,kBAAkB9K,SAAS9E,QAG/CnX,IAAKpF,EAAE4qB,QACPvlB,KAAMrF,EAAE2qB,WArCRvO,GAAiB,CACf9O,QAAQ,CACN3J,UAAUgR,WAAa,CACrB1B,MAAO7U,GAAE,gBACTme,OAAQ,kBAAM,EAAKmR,mBAAmB,SAHnC,mBAKF,EAAKlF,cAAc8G,qBAAoB,SAAA/S,GAAM,OAC9C,EAAK4P,kBAAkB9K,SAAS9E,QAGpCnX,IAAKpF,EAAE4qB,QACPvlB,KAAMrF,EAAE2qB,WA6Bd4E,YAAa,SAAAvvB,GAQX,GAPoB,OAAhByqB,IAIFA,GAAYzqB,IAGVkrB,GAAJ,CAKA,IACGC,KACAnrB,EAAEwvB,SAAWhF,IACXxqB,EAAEwvB,SAAWhF,IAAqBS,IACrC,CACAE,IAAuB,EACvBD,IAAY,EACZxzB,SAASmC,gBAAgBhC,MAAMiC,OAASswB,GAAYG,SAHpD,IAIekF,EAA0BzvB,EAAnC2qB,QAAyB+E,EAAU1vB,EAAnB4qB,QAChB+E,EAAc,SAAC3vB,GACnB,IAAMiuB,EAASwB,EAAQzvB,EAAE2qB,QACnBxG,EAASuL,EAAQ1vB,EAAE4qB,QACzB6E,EAAQzvB,EAAE2qB,QACV+E,EAAQ1vB,EAAE4qB,QAEV,EAAK4B,SAAS,CACZjlB,QAAS,EAAKwlB,MAAMxlB,QAAU0mB,EAAS,EAAKlB,MAAMpuB,KAClD6I,QAAS,EAAKulB,MAAMvlB,QAAU2c,EAAS,EAAK4I,MAAMpuB,QAGhDixB,EAAYnF,GAAc,WAC9BA,GAAc,KACdS,IAAY,EACZC,IAAuB,EAClBF,IACHd,GAAkB,EAAK4C,MAAM/lB,aAE/BjO,OAAOgM,oBAAoB,YAAa4qB,GACxC52B,OAAOgM,oBAAoB,UAAW6qB,GACtC72B,OAAOgM,oBAAoB,OAAQ6qB,IAOrC,OALA72B,OAAO4N,iBAAiB,OAAQipB,GAChC72B,OAAO4N,iBAAiB,YAAagpB,EAAa,CAChDZ,SAAS,SAEXh2B,OAAO4N,iBAAiB,UAAWipB,GAKrC,GAAI5vB,EAAEwvB,SAAWhF,GAAjB,CAIAxqB,EAAEsG,iBAIE5O,SAASupB,yBAAyBjqB,aACpCU,SAASupB,cAAc2E,OA9DT,MxCjzBvB,SACLpnB,EACAhF,EACAC,EACA4N,EACAC,EALK,GAeJ,IACKuK,EAAazK,GAAc5I,EAAU6I,EAAeC,EAAgB,CACxEC,QAFF,EAREA,QAWAC,QAHF,EAPEA,QAWA7I,KAJF,EANEA,OAMF,EAO6D,CAC3DkT,EAAWtJ,WACXsJ,EAAWpJ,UACXwM,KAAI,SAAAlD,GACJ,OACEA,GACAA,EAAUvY,GAAKA,GACfA,GAAKuY,EAAUvY,EAAIuY,EAAU7Z,OAC7B6Z,EAAUtY,GAAKA,GACfA,GAAKsY,EAAUtY,EAAIsY,EAAU3Z,UAhBjC,mBAoBA,MAAO,CACLy3B,0BArBF,KAsBEC,wBAtBF,MwCu2BgBC,CACFvxB,GACAwB,EAAE2qB,QAAU5xB,OAAOuvB,iBACnBtoB,EAAE4qB,QAAU7xB,OAAOuvB,iBACnB8G,EAAcr2B,OAAOuvB,iBACrB+G,EAAet2B,OAAOuvB,iBACtB,EAAKyE,OARL8C,EAnEc,EAmEdA,0BACAC,EApEc,EAoEdA,wBApEc,EA8ECpF,GACf1qB,EACA,EAAK+sB,MACL,EAAK1gB,QAHC7S,EA9EQ,EA8ERA,EAAGC,EA9EK,EA8ELA,EAMLu2B,EAAUx2B,EACVy2B,EAAUx2B,EAEZa,EAAUP,EACZ,EAAKgzB,MAAM/lB,YACXxN,EACAC,EACA,EAAKszB,MAAMtiB,uBACX,EAAKsiB,MAAMriB,2BACX,EAAKqiB,MAAMpiB,qBACX,EAAKoiB,MAAMniB,uBACX,EAAKmiB,MAAMliB,qBACX,EAAKkiB,MAAMjiB,oBAGT9H,EAAc1I,KAChBA,EAAUQ,EACRR,EACA,GACA,EAAKyyB,MAAMhiB,kBAKf,IAAI1I,GAA+B,EAC/B6tB,GAAqB,EACrBC,GAAmB,EACnBnW,EAAuC,KACvCoW,GAA4B,EAChC,GAA+B,cAA3B,EAAKrD,MAAM/lB,YAA6B,CAC1C,IAmBO,EAnBDqpB,EAAgBluB,EACpB3D,GACA,CAAEhF,IAAGC,KACL,EAAKszB,MAAMpuB,MAIb,GAAgC,IADPwK,GAAoB3K,IACxBxB,QAAgBqzB,EACnC,EAAK7D,SAAS,CACZ3pB,gBAAiBwtB,EACbA,EAAc/1B,QACd,OAGN+H,EAAeguB,EAAchuB,aAC7B3K,SAASmC,gBAAgBhC,MAAMiC,OAAS8I,EACtCytB,GAEFH,GAAqB,OASjB,UAPJlW,EAAaD,GACXvb,GACAhF,EACAC,EACA,EAAKszB,MAAMpuB,aAGT,aAAC,EAAYlE,aAAeuF,EAAEyG,WAChCjI,GAAWkK,GAAelK,KAIxBwb,IAKGA,EAAWvf,aACduf,EAAWvf,YAAa,EACxB+D,GAAWA,GAAS3H,QACpBu5B,GAA4B,GAI1BpwB,EAAEyf,SACJjhB,GAAQ,sBACHA,GAASyW,KAAI,SAAA3a,GAAO,sBAClBA,EADkB,CAErBG,YAAY,QAHR,YAKH0O,GAAoB3K,IAAUyW,KAAI,SAAA3a,GACnC,IAAMP,EAAaiB,EAAiBV,GAEpC,OADAP,EAAWU,YAAa,EACjBV,cAOjByE,GAAWkK,GAAelK,IAG5B,GAAIwE,EAAc1I,GAAU,CAAC,IAAD,EAI1B,GAAwC,UAApC,YAAKyyB,MAAMziB,sBAAX,eAA2BpT,MAC7B,OAEF,IAAIo5B,EAAQtwB,EAAE2qB,QACV4F,EAAQvwB,EAAE4qB,QACd,IAAK5qB,EAAEyf,OAAQ,CACb,IAAM+Q,EAA0B,EAAKC,sCACnCj3B,EACAC,GAEE+2B,IACFl2B,EAAQd,EAAIg3B,EAAwBE,eACpCp2B,EAAQb,EAAI+2B,EAAwBG,eACpCL,EAAQE,EAAwBI,SAChCL,EAAQC,EAAwBK,UAIpC,IAAMC,EAAiB,WACrB,EAAKtE,SAAS,CACZpiB,gBAAiB,KACjBE,eAAgB,QA+CpB,OA3CArG,EAAY,CACVC,SAAU,GACV1K,EAAG82B,EACH72B,EAAG82B,EACHv2B,YAAa,EAAK+yB,MAAMtiB,uBACxBpQ,QAAS,EAAK0yB,MAAMjiB,mBACpBtT,KAAM,EAAKu1B,MAAMhiB,gBACjBpM,KAAM,EAAKouB,MAAMpuB,KACjBwF,SAAU,SAAA5M,GACJA,IACFiH,GAAQ,sBACHA,IADG,gBAGD1D,EACDR,EACA/C,EACA,EAAKw1B,MAAMhiB,iBANT,CAQJtQ,YAAY,OAId,EAAKsyB,MAAMxiB,eACb4f,GAAkB,EAAK4C,MAAM/lB,aAE/BkjB,GAAQqC,kBACRuE,KAEF1sB,SAAU,WACR0sB,OAGJl3B,SACK,EAAKmzB,MAAMxiB,cAMd,EAAKiiB,SAAS,CACZliB,eAAgBhQ,IANlB,EAAKkyB,SAAS,CACZliB,eAAgBhQ,EAChB0M,YAAa,eAQZ,GACsB,UAA3B,EAAK+lB,MAAM/lB,aACgB,SAA3B,EAAK+lB,MAAM/lB,YAEX,GAAI,EAAK+lB,MAAM1iB,aAAc,CAAC,IACpBA,EAAiB,EAAK0iB,MAAtB1iB,aACGzJ,EAAcyJ,EAAjB7Q,EAAUqH,EAAOwJ,EAAV5Q,EACf4Q,EAAa5P,YAAa,EAC1B4P,EAAaxP,OAAOoO,KAAK,CAACzP,EAAIoH,EAAInH,EAAIoH,IACtCwJ,EAAazP,MAAQ,UAErBN,EAAQG,YAAa,EACrBH,EAAQO,OAAOoO,KAAK,CAAC,EAAG,IACxB3O,EAAQM,MAAQ,KAChB4D,GAAQ,sBAAOA,IAAP,CAAiBlE,IACzB,EAAKkyB,SAAS,CACZpiB,gBAAiB9P,QAGK,cAAjBA,EAAQpD,KACjB,EAAKs1B,SAAS,CACZlhB,iBAAkBhR,EAClB8P,gBAAiB9P,KAGnBkE,GAAQ,sBAAOA,IAAP,CAAiBlE,IACzB,EAAKkyB,SAAS,CAAEniB,aAAc,KAAMD,gBAAiB9P,KAGvD,IAAIm1B,EAAQj2B,EACRk2B,EAAQj2B,GAERo2B,GAA6BC,KAC/BL,EAAQzvB,EAAE2qB,QACV+E,EAAQ1vB,EAAE4qB,SAGZ,IAAImG,EAUO,KAELC,EAAoB,SACxB12B,EACAyD,EACAkwB,EACA9J,EACA8M,EACAC,EACAC,GAEA,GAAIA,EAAS,CACX,IAAMC,EAAQrzB,EAAG,GAAKzD,EAAQd,EACxB63B,EAAQtzB,EAAG,GAAKzD,EAAQb,EAFnB,EAIesN,EACxBzM,EAAQpD,KACR+5B,EAAS32B,EAAQd,EAAIuE,EAAG,GACxBmzB,EAAS52B,EAAQb,EAAIsE,EAAG,IAHlB7F,EAJG,EAIHA,MAAOE,EAJJ,EAIIA,OAMT8D,EAAK5B,EAAQd,EAAItB,EAAQ6F,EAAG,GAC5B5B,EAAK7B,EAAQb,EAAIrB,EAAS2F,EAAG,GACnCzD,EAAQd,EAAI0C,EACZ5B,EAAQb,EAAI0C,EACZ4B,EAAG,GAAKqzB,EAAQ92B,EAAQd,EACxBuE,EAAG,GAAKszB,EAAQ/2B,EAAQb,OAExBa,EAAQd,GAAKy0B,EACb3zB,EAAQb,GAAK0qB,EACbpmB,EAAG,IAAMkwB,EACTlwB,EAAG,IAAMomB,GAIPmN,EAAiB,SACrBh3B,EACAyD,EACAkwB,EACA9J,EACA8M,EACAC,EACAC,GAEA,GAAIA,EAAS,CAAC,IAAD,EACepqB,EACxBzM,EAAQpD,KACR+5B,EAAS32B,EAAQd,EACjB03B,EAAS52B,EAAQb,GAHXvB,EADG,EACHA,MAAOE,EADJ,EACIA,OAKf2F,EAAG,GAAK7F,EACR6F,EAAG,GAAK3F,OAER2F,EAAG,IAAMkwB,EACTlwB,EAAG,IAAMomB,GAIPwL,EAAc,SAAC3vB,GAAmB,IAAD,EAErC,GADeA,EAAEjJ,kBACOC,YAAxB,CAIA,GAAI64B,EAA2B,CAC7B,IAAMr2B,EAAIwG,EAAE2qB,QACNzuB,EAAK1C,EAAIi2B,EAKf,OAJA,EAAKjD,SAAS,CACZjlB,QAAS,EAAKwlB,MAAMxlB,QAAUrL,EAAK,EAAK6wB,MAAMpuB,YAEhD8wB,EAAQj2B,GAIV,GAAIs2B,EAAyB,CAC3B,IAAMr2B,EAAIuG,EAAE4qB,QACNzuB,EAAK1C,EAAIi2B,EAKf,OAJA,EAAKlD,SAAS,CACZhlB,QAAS,EAAKulB,MAAMvlB,QAAUrL,EAAK,EAAK4wB,MAAMpuB,YAEhD+wB,EAAQj2B,GAQV,IACG02B,IAC2B,UAA3B,EAAKpD,MAAM/lB,aACiB,SAA3B,EAAK+lB,MAAM/lB,aACb,CAAC,IAAD,EACiB0jB,GACf1qB,EACA,EAAK+sB,MACL,EAAK1gB,QAEP,GpDrpCX,SAAoB7Q,EAAYC,EAAYC,EAAYC,GAC7D,IAAM41B,EAAK71B,EAAKF,EACVg2B,EAAK71B,EAAKF,EAChB,OAAO/B,KAAKuI,KAAKsvB,EAAKA,EAAKC,EAAKA,GoDkpCZC,CANJ,EACQj4B,EADR,EACWC,EAKUu2B,EAASC,GAvpCrB,GAwpCP,OAIJ,GAAIC,GAAsB,EAAKnD,MAAMlqB,gBAAiB,CACpD,EAAK2pB,SAAS,CAAEnhB,YAAY,IAC5B,IAAMxC,EAAK,EAAKkkB,MAAMlqB,gBAChByO,EAAmBnI,GAAoB3K,IAC7C,GAAgC,IAA5B8S,EAAiBtU,OAAc,CAAC,IAAD,EAChB0tB,GACf1qB,EACA,EAAK+sB,MACL,EAAK1gB,QAHC7S,EADyB,EACzBA,EAAGC,EADsB,EACtBA,EAKLw0B,EAASz0B,EAAIi2B,EACbtL,EAAS1qB,EAAIi2B,EACbp1B,EAAUgX,EAAiB,GAC3BogB,EACa,SAAjBp3B,EAAQpD,MAAoC,UAAjBoD,EAAQpD,KACrC,OAAQmL,GACN,IAAK,KACH,GAAIqvB,GAAsC,IAA1Bp3B,EAAQO,OAAOmC,OAAc,CAAC,IACnCe,EADkC,YAC5BzD,EAAQO,OADoB,MAGtCk2B,IAEDA,EADEhzB,EAAG,GAAK,GAAKA,EAAG,GAAK,EACPuzB,EAEAN,GAGpBD,EACEz2B,EACAyD,EACAkwB,EACA9J,EACA3qB,EACAC,EACAuG,EAAEyG,eAGJnM,EAAQpC,OAAS+1B,EACjB3zB,EAAQd,GAAKy0B,EAETjuB,EAAEyG,UACJnM,EAAQb,GAAKa,EAAQlC,OAASkC,EAAQpC,MACtCoC,EAAQlC,OAASkC,EAAQpC,QAEzBoC,EAAQlC,QAAU+rB,EAClB7pB,EAAQb,GAAK0qB,GAGjB,MACF,IAAK,KACH,GAAIuN,GAAsC,IAA1Bp3B,EAAQO,OAAOmC,OAAc,CAAC,IACnCe,EADkC,YAC5BzD,EAAQO,OADoB,MAEtCk2B,IAEDA,EADEhzB,EAAG,IAAM,EACKuzB,EAEAN,GAGpBD,EACEz2B,EACAyD,EACAkwB,EACA9J,EACA3qB,EACAC,EACAuG,EAAEyG,eAGJnM,EAAQpC,OAAS+1B,EACbjuB,EAAEyG,UACJnM,EAAQb,GAAKa,EAAQlC,OAASkC,EAAQpC,MACtCoC,EAAQlC,OAASkC,EAAQpC,QAEzBoC,EAAQlC,QAAU+rB,EAClB7pB,EAAQb,GAAK0qB,GAGjB,MACF,IAAK,KACH,GAAIuN,GAAsC,IAA1Bp3B,EAAQO,OAAOmC,OAAc,CAAC,IACnCe,EADkC,YAC5BzD,EAAQO,OADoB,MAEtCk2B,IAEDA,EADEhzB,EAAG,IAAM,EACKuzB,EAEAN,GAGpBD,EACEz2B,EACAyD,EACAkwB,EACA9J,EACA3qB,EACAC,EACAuG,EAAEyG,eAGJnM,EAAQpC,OAAS+1B,EACjB3zB,EAAQd,GAAKy0B,EACTjuB,EAAEyG,SACJnM,EAAQlC,OAASkC,EAAQpC,MAEzBoC,EAAQlC,QAAU+rB,EAGtB,MACF,IAAK,KACH,GAAIuN,GAAsC,IAA1Bp3B,EAAQO,OAAOmC,OAAc,CAAC,IACnCe,EADkC,YAC5BzD,EAAQO,OADoB,MAEtCk2B,IAEDA,EADEhzB,EAAG,GAAK,GAAKA,EAAG,GAAK,EACPuzB,EAEAN,GAGpBD,EACEz2B,EACAyD,EACAkwB,EACA9J,EACA3qB,EACAC,EACAuG,EAAEyG,eAGAzG,EAAEyG,UACJnM,EAAQpC,OAAS+1B,EACjB3zB,EAAQlC,OAASkC,EAAQpC,QAEzBoC,EAAQpC,OAAS+1B,EACjB3zB,EAAQlC,QAAU+rB,GAGtB,MACF,IAAK,IAIH,GAHA7pB,EAAQlC,QAAU+rB,EAClB7pB,EAAQb,GAAK0qB,EAET7pB,EAAQO,OAAOmC,OAAS,EAO1B,IANA,IAAM20B,EAAMr3B,EAAQO,OAAOmC,OAErBnC,EAAS,YAAIP,EAAQO,QAAQwiB,MACjC,SAAC7c,EAAGC,GAAJ,OAAUD,EAAE,GAAKC,EAAE,MAGZwO,EAAI,EAAGA,EAAIpU,EAAOmC,SAAUiS,EAAG,CAC1BpU,EAAOoU,GACf,IAAMkV,GAAUwN,EAAM1iB,GAG9B,MAEF,IAAK,IAIH,GAHA3U,EAAQpC,OAAS+1B,EACjB3zB,EAAQd,GAAKy0B,EAET3zB,EAAQO,OAAOmC,OAAS,EAM1B,IALA,IAAM20B,EAAMr3B,EAAQO,OAAOmC,OACrBnC,EAAS,YAAIP,EAAQO,QAAQwiB,MACjC,SAAC7c,EAAGC,GAAJ,OAAUD,EAAE,GAAKC,EAAE,MAGZwO,EAAI,EAAGA,EAAIpU,EAAOmC,SAAUiS,EAAG,CAC1BpU,EAAOoU,GACf,IAAMgf,GAAU0D,EAAM1iB,GAG9B,MAEF,IAAK,IAEH,GADA3U,EAAQlC,QAAU+rB,EACd7pB,EAAQO,OAAOmC,OAAS,EAM1B,IALA,IAAM20B,EAAMr3B,EAAQO,OAAOmC,OACrBnC,EAAS,YAAIP,EAAQO,QAAQwiB,MACjC,SAAC7c,EAAGC,GAAJ,OAAUD,EAAE,GAAKC,EAAE,MAGZwO,EAAI,EAAGA,EAAIpU,EAAOmC,SAAUiS,EAAG,CAC1BpU,EAAOoU,GACf,IAAMkV,GAAUwN,EAAM1iB,GAG9B,MAEF,IAAK,IAEH,GADA3U,EAAQpC,OAAS+1B,EACb3zB,EAAQO,OAAOmC,OAAS,EAM1B,IALA,IAAM20B,EAAMr3B,EAAQO,OAAOmC,OACrBnC,EAAS,YAAIP,EAAQO,QAAQwiB,MACjC,SAAC7c,EAAGC,GAAJ,OAAUD,EAAE,GAAKC,EAAE,MAGZwO,EAAI,EAAGA,EAAIpU,EAAOmC,SAAUiS,EAAG,CAC1BpU,EAAOoU,GACf,IAAMgf,GAAU0D,EAAM1iB,IAyBlC,OAlBI5M,IACFA,E9Cn4Cf,SACL/H,EACA+H,GAEA,GACG/H,EAAQpC,OAAS,GAAKoC,EAAQlC,QAAU,GACxB,SAAjBkC,EAAQpD,MACS,UAAjBoD,EAAQpD,KAER,OAAOmL,EAGT,GAAI/H,EAAQpC,MAAQ,GAAKoC,EAAQlC,OAAS,EACxC,OAAQiK,GACN,IAAK,KACH,MAAO,KACT,IAAK,KACH,MAAO,KACT,IAAK,KACH,MAAO,KACT,IAAK,KACH,MAAO,UAEN,GAAI/H,EAAQpC,MAAQ,EACzB,OAAQmK,GACN,IAAK,KACH,MAAO,KACT,IAAK,KACH,MAAO,KACT,IAAK,KACH,MAAO,KACT,IAAK,KACH,MAAO,KACT,IAAK,IACH,MAAO,IACT,IAAK,IACH,MAAO,SAGX,OAAQA,GACN,IAAK,KACH,MAAO,KACT,IAAK,KACH,MAAO,KACT,IAAK,KACH,MAAO,KACT,IAAK,KACH,MAAO,KACT,IAAK,IACH,MAAO,IACT,IAAK,IACH,MAAO,IAIb,OAAOA,E8C40C4BuvB,CACbt3B,EACA+H,IAGJ8E,EAAoB7M,GAEpB5C,SAASmC,gBAAgBhC,MAAMiC,OAAS8I,EACtC,CAAEtI,UAAS+H,iBAEbwG,EAAGrP,EAAIc,EAAQd,EACfqP,EAAGpP,EAAIa,EAAQb,EACfoP,EAAGjO,MAAQ,KAEX60B,EAAQj2B,EACRk2B,EAAQj2B,OACR,EAAK+yB,SAAS,KAKlB,aAAIxS,SAAJ,aAAI,EAAYvf,WAAY,CAG1B01B,GAAmB,EACnB,IAAM7e,EAAmBnI,GAAoB3K,IAC7C,GAAI8S,EAAiBtU,OAAS,EAAG,CAAC,IAAD,GACd0tB,GACf1qB,EACA,EAAK+sB,MACL,EAAK1gB,QAHC7S,GADuB,GACvBA,EAAGC,GADoB,GACpBA,EAaX,OAPA6X,EAAiB7S,SAAQ,SAAAnE,GACvBA,EAAQd,GAAKA,GAAIi2B,EACjBn1B,EAAQb,GAAKA,GAAIi2B,KAEnBD,EAAQj2B,GACRk2B,EAAQj2B,QACR,EAAK+yB,SAAS,KAOlB,IAAMpiB,GAAkB,EAAK2iB,MAAM3iB,gBACnC,GAAKA,GAAL,CAzSqC,OA6SpBsgB,GACf1qB,EACA,EAAK+sB,MACL,EAAK1gB,QAHC7S,GA7S6B,GA6S7BA,EAAGC,GA7S0B,GA6S1BA,EAMPvB,GAAQqB,EAASy2B,EAASx2B,IAC1BpB,GAASmB,EAAS02B,EAASx2B,IAM/B,GAH6B,SAA3B,EAAKszB,MAAM/lB,aACgB,UAA3B,EAAK+lB,MAAM/lB,YAEC,CACZmpB,GAAmB,EACnB,IAAMt1B,GAASuP,GAAgBvP,OAC3BqB,GAAK1C,GAAI4Q,GAAgB5Q,EACzB2C,GAAK1C,GAAI2Q,GAAgB3Q,EAE7B,GAAIuG,EAAEyG,UAA8B,IAAlB5L,GAAOmC,OAAc,CAAC,IAAD,GACR+J,EAC3B,EAAKgmB,MAAM/lB,YACX9K,GACAC,IAHQD,GAD2B,GAClChE,MAAmBiE,GADe,GACvB/D,OAOhB,GAAsB,IAAlByC,GAAOmC,OACTnC,GAAOoO,KAAK,CAAC/M,GAAIC,UACZ,GAAItB,GAAOmC,OAAS,EAAG,CAC5B,IAAM60B,GAAMh3B,GAAOA,GAAOmC,OAAS,GACnC60B,GAAI,GAAK31B,GACT21B,GAAI,GAAK11B,QAEN,CACL,GAAI6D,EAAEyG,SAAU,CAAC,IAAD,GACOM,EACnB,EAAKgmB,MAAM/lB,YACX9O,GACAuB,GAAIw2B,GAAW73B,GAASA,IAHvBF,GADW,GACXA,OAAOE,GADI,GACJA,QAMG,IACXA,IAAUA,IAIdgS,GAAgB5Q,EAAIA,GAAIw2B,EAAUA,EAAU93B,GAAQ83B,EACpD5lB,GAAgB3Q,EAAIA,GAAIw2B,EAAUA,EAAU73B,GAAS63B,EAErD7lB,GAAgBlS,MAAQA,GACxBkS,GAAgBhS,OAASA,GAK3B,GAFAgS,GAAgBxP,MAAQ,KAEO,cAA3B,EAAKmyB,MAAM/lB,aACRhH,EAAEyG,UAAYyC,GAAsB1K,MACvCA,GAAWkK,GAAelK,KvC5kDvC,SACLA,EACA1F,GACC,IAAD,EAMI2D,EAAyB3D,GAN7B,mBAEEg5B,EAFF,KAGEC,EAHF,KAIEC,EAJF,KAKEC,EALF,KAOA,OAAOzzB,EAAS8D,QAAO,SAAAhI,GAAY,IAAD,EAM5BmC,EAAyBnC,GANG,mBAE9B0E,EAF8B,KAG9BC,EAH8B,KAI9BC,EAJ8B,KAK9BC,EAL8B,KAQhC,MACmB,cAAjB7E,EAAQpD,MACR46B,GAAe9yB,GACf+yB,GAAe9yB,GACf+yB,GAAe9yB,GACf+yB,GAAe9yB,KuCujD6B+yB,CAC9B1zB,GACA4L,IAEsB3L,SAAQ,SAAAnE,GAC9BA,EAAQG,YAAa,KAGzB,EAAK+xB,SAAS,OAGV2F,GAAY,SAAZA,EAAanyB,GAAmB,IAAD,EAO/B,EAAK+sB,MALP3iB,EAFiC,EAEjCA,gBACAvH,EAHiC,EAGjCA,gBACAwH,EAJiC,EAIjCA,aACArD,EALiC,EAKjCA,YACAuD,EANiC,EAMjCA,cAeF,GAZA,EAAKiiB,SAAS,CACZnhB,YAAY,EACZxI,gBAAiB,KACjByI,iBAAkB,OAGpBylB,EAAgB,KAChBtG,GAAc,KACdU,IAAuB,EACvBpyB,OAAOgM,oBAAoB,YAAa4qB,GACxC52B,OAAOgM,oBAAoB,UAAWotB,GAElB,UAAhBnrB,GAA2C,SAAhBA,EAA/B,CAkCA,GACkB,cAAhBA,GACAoD,GACAtD,EAAwBsD,GAOxB,OAJA5L,GAAWA,GAAS3H,MAAM,GAAI,QAC9B,EAAK21B,SAAS,CACZpiB,gBAAiB,OA4CrB,GAvCIjD,EAAoBiD,IACtB,EAAKoiB,SAAS,IAGZ3pB,IACFqnB,GAAQqC,kBACR,EAAKC,SAAS,KAId3pB,GACAiE,EAAwBjE,KAExBrE,GAAWA,GAAS8D,QAClB,SAAAuG,GAAE,OAAIA,EAAGtO,KAAOsI,EAAgBtI,QAalCyf,GACCmW,GACAC,IAEGpwB,EAAEyG,SACJuT,EAAWvf,YAAa,GAExB+D,GAAWkK,GAAelK,IAC1Bwb,EAAWvf,YAAa,IAIJ,OAApB2P,EAIF,OAFA5L,GAAWkK,GAAelK,SAC1B,EAAKguB,SAAS,IAIXjiB,IACHH,EAAgB3P,YAAa,IAIb,cAAhBuM,GACAkC,GAAsB1K,MAEtB0rB,GAAQqC,kBAGLhiB,EAOH,EAAKiiB,SAAS,CACZpiB,gBAAiB,QAPnBxQ,IACA,EAAK4yB,SAAS,CACZpiB,gBAAiB,KACjBpD,YAAa,oBAvGf,GAJIoD,EAAiBvP,OAAOmC,OAAS,IACnCktB,GAAQqC,kBACR,EAAKC,SAAS,KAEX2D,IAAoB/lB,GAAoBC,EAYlC8lB,IAAqB9lB,IAC9B,EAAK0iB,MAAM3iB,gBAAiB3P,YAAa,EACpC8P,EAOH,EAAKiiB,SAAS,CACZpiB,gBAAiB,QAPnBxQ,IACA,EAAK4yB,SAAS,CACZpiB,gBAAiB,KACjBpD,YAAa,oBAlBwC,CAAC,IAAD,EACxC0jB,GACf1qB,EACA,EAAK+sB,MACL,EAAK1gB,QAHC7S,EADiD,EACjDA,EAAGC,EAD8C,EAC9CA,EAKX2Q,EAAgBvP,OAAOoO,KAAK,CAC1BzP,EAAI4Q,EAAgB5Q,EACpBC,EAAI2Q,EAAgB3Q,IAEtB2Q,EAAgBxP,MAAQ,KACxB,EAAK4xB,SAAS,CAAEniB,aAAc,EAAK0iB,MAAM3iB,oBAqG/CqgB,GAAc0H,GAEdp5B,OAAO4N,iBAAiB,YAAagpB,GACrC52B,OAAO4N,iBAAiB,UAAWwrB,OAErCC,cAAe,SAAApyB,GACbpG,IADkB,MAGD8wB,GACf1qB,EACA,EAAK+sB,MACL,EAAK1gB,QAHC7S,EAHU,EAGVA,EAAGC,EAHO,EAGPA,EAML44B,EAAoBtY,GACxBvb,GACAhF,EACAC,EACA,EAAKszB,MAAMpuB,MAGPrE,EACJ+3B,GAAqBrvB,EAAcqvB,GAC/BA,EACAv3B,EACEf,EACE,OACAP,EACAC,EACA,EAAKszB,MAAMtiB,uBACX,EAAKsiB,MAAMriB,2BACX,EAAKqiB,MAAMpiB,qBACX,EAAKoiB,MAAMniB,uBACX,EAAKmiB,MAAMliB,qBACX,EAAKkiB,MAAMjiB,oBAEb,GACA,EAAKiiB,MAAMhiB,iBAGnB,EAAKyhB,SAAS,CAAEliB,eAAgBhQ,IAEhC,IAAIg2B,EAAQtwB,EAAE2qB,QACV4F,EAAQvwB,EAAE4qB,QAEd,GAAIyH,GAAqBrvB,EAAcqvB,GAAoB,CACzD7zB,GAAWA,GAAS8D,QAClB,SAAAhI,GAAO,OAAIA,EAAQC,KAAO83B,EAAkB93B,MAE9C,EAAKiyB,SAAS,IAEd,IAAM8F,EACJD,EAAkB74B,EAAI64B,EAAkBn6B,MAAQ,EAC5Cq6B,EACJF,EAAkB54B,EAAI44B,EAAkBj6B,OAAS,EATM,EAcrD0yB,GACF,CAAEC,OAAQuH,EAAgBtH,OAAQuH,GAClC,EAAKxF,MACL,EAAK1gB,QAGPikB,EApByD,EAYvD92B,EASF+2B,EArByD,EAavD92B,EAWFa,EAAQd,EAAI84B,EACZh4B,EAAQb,EAAI84B,OACP,IAAKvyB,EAAEyf,OAAQ,CACpB,IAAM+Q,EAA0B,EAAKC,sCACnCj3B,EACAC,GAGE+2B,IACFl2B,EAAQd,EAAIg3B,EAAwBE,eACpCp2B,EAAQb,EAAI+2B,EAAwBG,eACpCL,EAAQE,EAAwBI,SAChCL,EAAQC,EAAwBK,UAIpC,IAAMC,EAAiB,WACrB,EAAKtE,SAAS,CACZpiB,gBAAiB,KACjBE,eAAgB,QAIpBrG,EAAY,CACVC,SAAU5J,EAAQ/C,KAClBiC,EAAG82B,EACH72B,EAAG82B,EACHv2B,YAAaM,EAAQN,YACrBxC,KAAM8C,EAAQ9C,KACd6C,QAAS,EAAK0yB,MAAMjiB,mBACpBnM,KAAM,EAAKouB,MAAMpuB,KACjBwF,SAAU,SAAA5M,GACJA,IACFiH,GAAQ,sBACHA,IADG,gBAKD1D,EAAeR,EAAS/C,EAAM+C,EAAQ9C,MALrC,CAMJiD,YAAY,OAIlByvB,GAAQqC,kBACRuE,KAEF1sB,SAAU,WACR0sB,QAINnB,YAAa,SAAA3vB,GACX,IAAIirB,KAAkBC,GAAtB,CAGA,IAAMsH,EAAsBC,QAAQzyB,EAAE0yB,SAJtB,EAMChI,GACf1qB,EACA,EAAK+sB,MACL,EAAK1gB,QAHC7S,EANQ,EAMRA,EAAGC,EANK,EAMLA,EAKX,GAAI,EAAKszB,MAAM1iB,aAAc,CAAC,IACpBA,EAAiB,EAAK0iB,MAAtB1iB,aACF2lB,EAAU3lB,EAAa7Q,EACvBy2B,EAAU5lB,EAAa5Q,EACvBoB,EAASwP,EAAaxP,OACtBg3B,EAAMh3B,EAAOA,EAAOmC,OAAS,GAKnC,OAJA60B,EAAI,GAAKr4B,EAAIw2B,EACb6B,EAAI,GAAKp4B,EAAIw2B,EACb5lB,EAAazP,MAAQ,UACrB,EAAK4xB,SAAS,IAIhB,IACEgG,GAC2B,cAA3B,EAAKzF,MAAM/lB,YAFb,CAQA,GAAgC,IADPmC,GAAoB3K,IACxBxB,OAAc,CACjC,IAAMqzB,EAAgBluB,EACpB3D,GACA,CAAEhF,IAAGC,KACL,EAAKszB,MAAMpuB,MAEb,GAAI0xB,GAAiBA,EAAchuB,aAIjC,YAHA3K,SAASmC,gBAAgBhC,MAAMiC,OAAS8I,EACtCytB,IAKN,IAAMrW,EAAaD,GACjBvb,GACAhF,EACAC,EACA,EAAKszB,MAAMpuB,MAEbjH,SAASmC,gBAAgBhC,MAAMiC,OAASkgB,EAAa,OAAS,MAEhE2Y,OAAQ,SAAA3yB,GACN,IAAM4yB,EAAO5yB,EAAE6yB,aAAaC,MAAM,GACf,sBAAX,OAAJF,QAAI,IAAJA,OAAA,EAAAA,EAAM17B,OACRihB,GAAaya,GACVhM,MAAK,gBAAGpoB,EAAH,EAAGA,SAAUgN,EAAb,EAAaA,SAAb,OACJ,EAAK4gB,iBAAiB,CAAE5tB,WAAUgN,gBAEnCib,OAAM,SAAAlgB,GAAG,OAAI5E,QAAQ6E,MAAMD,QAIjCnI,GAAE,6BA37Cf,4DA0/CgD5E,EAAWC,GACvD,IAAMs5B,E7B57DH,SACLv0B,EACAhF,EACAC,GAIA,IAFA,IAAIugB,EAAa,KAER/K,EAAIzQ,EAASxB,OAAS,EAAGiS,GAAK,IAAKA,EAAG,CAAC,IAAD,EACpBxS,EAAyB+B,EAASyQ,IADd,mBACtCzT,EADsC,KAClCC,EADkC,KAC9BC,EAD8B,KAC1BC,EAD0B,KAE7C,GAAIH,EAAKhC,GAAKA,EAAIkC,GAAMD,EAAKhC,GAAKA,EAAIkC,EAAI,CACxCqe,EAAaxb,EAASyQ,GACtB,OAGJ,OAAO+K,E6B86DwBgZ,CAA6Bx0B,GAAUhF,EAAGC,GACvE,GAAIs5B,EAAsB,CACxB,IAAMrC,EACJqC,EAAqBv5B,EAAIu5B,EAAqB76B,MAAQ,EAClDy4B,EACJoC,EAAqBt5B,EAAIs5B,EAAqB36B,OAAS,EAOzD,GANyBsB,KAAK0C,MAC5B5C,EAAIk3B,EACJj3B,EAAIk3B,GA12D0B,GAu3D9B,MAAO,CAAEC,SAPP/V,KAAKkS,MAAMxlB,QACXwrB,EAAqBv5B,EACrBu5B,EAAqB76B,MAAQ,EAKZ24B,SAHjBhW,KAAKkS,MAAMvlB,QACXurB,EAAqBt5B,EACrBs5B,EAAqB36B,OAAS,EACHs4B,iBAAgBC,qBAhhDrD,2CA6hDI,IAYMxlB,GAZ2B6E,GAC/BxR,GACAqc,KAAKkS,MAAMzhB,iBACXuP,KAAKpM,GACLoM,KAAKxO,OACL,CACE9E,QAASsT,KAAKkS,MAAMxlB,QACpBC,QAASqT,KAAKkS,MAAMvlB,QACpBwD,oBAAqB6P,KAAKkS,MAAM/hB,oBAChCrM,KAAMkc,KAAKkS,MAAMpuB,QAGgCH,GAASxB,OAAS,EACnE6d,KAAKkS,MAAM5hB,kBAAoBA,GACjC0P,KAAK2R,SAAS,CAAErhB,gBAAiBA,IAEnC0P,KAAK+R,gBACD1C,GAAQ+I,gBACV/I,GAAQgJ,UAAUrY,KAAKkS,MAAOvuB,IAC9B0rB,GAAQiJ,qBAhjDd,GAAyB3S,IAAM4F,WAqjDzBgN,GAAc17B,SAAS27B,eAAe,QAEtCC,G,2MACJvG,MAAQ,CAAEwG,UAAU,EAAOC,MAAO,GAAIla,aAAc,I,8EAW7B8D,GACpBA,EAAMrmB,OAA+B6f,W,mKAIlChf,EAAO,G,kBAEkB,6B,OACA,kBADrB67B,E,OAAqDC,WAEzD97B,EAAO+7B,mBAAmBF,I,wDAI9B16B,OAAO66B,KAAP,mEAC8Dh8B,I,8IAK9D,OAAIijB,KAAKkS,MAAMwG,SAEX,yBAAKxX,UAAU,eACb,yBAAKA,UAAU,gCACb,yBAAKA,UAAU,gCAAf,+BAC+B,IAC7B,4BAAQE,QAAS,kBAAMljB,OAAOoe,SAAS0c,WAAvC,mBAFF,KAOA,yBAAK9X,UAAU,yBAAf,iCACiC,IAC/B,4BACEE,QAAS,WACP3C,aAAawa,QACb/6B,OAAOoe,SAAS0c,WAHpB,uBAFF,IAUG,6BACD,yBAAK9X,UAAU,WAAf,sDAIF,6BACE,yBAAKA,UAAU,yBAAf,iEACiE,IAC/D,4BAAQE,QAASpB,KAAKkZ,mBAAtB,eAFF,wGAMA,yBAAKhY,UAAU,yBACb,yBAAKA,UAAU,uBACb,qDACA,8BACEiY,KAAM,GACN/X,QAASpB,KAAKoZ,eACd5Q,aAAcxI,KAAKkS,MAAMyG,QAE3B,wDACA,8BACEQ,KAAM,EACN/X,QAASpB,KAAKoZ,eACd5Q,aAAcxI,KAAKkS,MAAMzT,oBAUlCuB,KAAKgK,MAAMtJ,Y,gDAnFY/U,GAE9B,OADA7E,QAAQ6E,MAAMA,GACP,CACL+sB,UAAU,EACVja,aAAcle,KAAKE,UAAL,eAAoBge,eAClCka,MAAOhtB,EAAMgtB,W,GARYhT,IAAM4F,WA0FrC8N,IAASpX,OACP,kBAAC,GAAD,KACE,kBAAC,GAAD,OAEFsW,O","file":"static/js/main.e463b963.chunk.js","sourcesContent":["export const SVG_NS = \"http://www.w3.org/2000/svg\";\r\n\r\nexport function getDateTime() {\r\n  const date = new Date();\r\n  const year = date.getFullYear();\r\n  const month = date.getMonth() + 1;\r\n  const day = date.getDate();\r\n  const hr = date.getHours();\r\n  const min = date.getMinutes();\r\n  const secs = date.getSeconds();\r\n\r\n  return `${year}${month}${day}${hr}${min}${secs}`;\r\n}\r\n\r\nexport function capitalizeString(str: string) {\r\n  return str.charAt(0).toUpperCase() + str.slice(1);\r\n}\r\n\r\nexport function isToolIcon(\r\n  target: Element | EventTarget | null,\r\n): target is HTMLElement {\r\n  return target instanceof HTMLElement && target.className.includes(\"ToolIcon\");\r\n}\r\n\r\nexport function isInputLike(\r\n  target: Element | EventTarget | null,\r\n): target is\r\n  | HTMLInputElement\r\n  | HTMLTextAreaElement\r\n  | HTMLSelectElement\r\n  | HTMLBRElement\r\n  | HTMLDivElement {\r\n  return (\r\n    (target instanceof HTMLElement && target.dataset.type === \"wysiwyg\") ||\r\n    target instanceof HTMLBRElement || // newline in wysiwyg\r\n    target instanceof HTMLInputElement ||\r\n    target instanceof HTMLTextAreaElement ||\r\n    target instanceof HTMLSelectElement\r\n  );\r\n}\r\n\r\nexport function isWritableElement(\r\n  target: Element | EventTarget | null,\r\n): target is\r\n  | HTMLInputElement\r\n  | HTMLTextAreaElement\r\n  | HTMLBRElement\r\n  | HTMLDivElement {\r\n  return (\r\n    (target instanceof HTMLElement && target.dataset.type === \"wysiwyg\") ||\r\n    target instanceof HTMLBRElement || // newline in wysiwyg\r\n    target instanceof HTMLTextAreaElement ||\r\n    (target instanceof HTMLInputElement &&\r\n      (target.type === \"text\" || target.type === \"number\"))\r\n  );\r\n}\r\n\r\n// https://github.com/grassator/canvas-text-editor/blob/master/lib/FontMetrics.js\r\nexport function measureText(text: string, font: string) {\r\n  const line = document.createElement(\"div\");\r\n  const body = document.body;\r\n  line.style.position = \"absolute\";\r\n  line.style.whiteSpace = \"nowrap\";\r\n  line.style.font = font;\r\n  body.appendChild(line);\r\n  // Now we can measure width and height of the letter\r\n  line.innerText = text;\r\n  const width = line.offsetWidth;\r\n  const height = line.offsetHeight;\r\n  // Now creating 1px sized item that will be aligned to baseline\r\n  // to calculate baseline shift\r\n  const span = document.createElement(\"span\");\r\n  span.style.display = \"inline-block\";\r\n  span.style.overflow = \"hidden\";\r\n  span.style.width = \"1px\";\r\n  span.style.height = \"1px\";\r\n  line.appendChild(span);\r\n  // Baseline is important for positioning text on canvas\r\n  const baseline = span.offsetTop + span.offsetHeight;\r\n  document.body.removeChild(line);\r\n\r\n  return { width, height, baseline };\r\n}\r\n\r\nexport function debounce<T extends any[]>(\r\n  fn: (...args: T) => void,\r\n  timeout: number,\r\n) {\r\n  let handle = 0;\r\n  let lastArgs: T;\r\n  const ret = (...args: T) => {\r\n    lastArgs = args;\r\n    clearTimeout(handle);\r\n    handle = window.setTimeout(() => fn(...args), timeout);\r\n  };\r\n  ret.flush = () => {\r\n    clearTimeout(handle);\r\n    fn(...lastArgs);\r\n  };\r\n  return ret;\r\n}\r\n\r\nexport function selectNode(node: Element) {\r\n  const selection = window.getSelection();\r\n  if (selection) {\r\n    const range = document.createRange();\r\n    range.selectNodeContents(node);\r\n    selection.removeAllRanges();\r\n    selection.addRange(range);\r\n  }\r\n}\r\n\r\nexport function removeSelection() {\r\n  const selection = window.getSelection();\r\n  if (selection) {\r\n    selection.removeAllRanges();\r\n  }\r\n}\r\n\r\nexport function distance(x: number, y: number) {\r\n  return Math.abs(x - y);\r\n}\r\n\r\nexport function distance2d(x1: number, y1: number, x2: number, y2: number) {\r\n  const xd = x2 - x1;\r\n  const yd = y2 - y1;\r\n  return Math.sqrt(xd * xd + yd * yd);\r\n}\r\n\r\nexport function resetCursor() {\r\n  document.documentElement.style.cursor = \"\";\r\n}\r\n","import { randomSeed } from \"roughjs/bin/math\";\r\nimport nanoid from \"nanoid\";\r\nimport { Drawable } from \"roughjs/bin/core\";\r\nimport { Point } from \"roughjs/bin/geometry\";\r\n\r\nimport { ExcalidrawElement, ExcalidrawTextElement } from \"../element/types\";\r\nimport { measureText } from \"../utils\";\r\n\r\nexport function newElement(\r\n  type: string,\r\n  x: number,\r\n  y: number,\r\n  strokeColor: string,\r\n  backgroundColor: string,\r\n  fillStyle: string,\r\n  strokeWidth: number,\r\n  roughness: number,\r\n  opacity: number,\r\n  width = 0,\r\n  height = 0,\r\n) {\r\n  const element = {\r\n    id: nanoid(),\r\n    type,\r\n    x,\r\n    y,\r\n    width,\r\n    height,\r\n    strokeColor,\r\n    backgroundColor,\r\n    fillStyle,\r\n    strokeWidth,\r\n    roughness,\r\n    opacity,\r\n    isSelected: false,\r\n    seed: randomSeed(),\r\n    shape: null as Drawable | Drawable[] | null,\r\n    points: [] as Point[],\r\n  };\r\n  return element;\r\n}\r\n\r\nexport function newTextElement(\r\n  element: ExcalidrawElement,\r\n  text: string,\r\n  font: string,\r\n) {\r\n  const metrics = measureText(text, font);\r\n  const textElement: ExcalidrawTextElement = {\r\n    ...element,\r\n    type: \"text\",\r\n    text: text,\r\n    font: font,\r\n    // Center the text\r\n    x: element.x - metrics.width / 2,\r\n    y: element.y - metrics.height / 2,\r\n    width: metrics.width,\r\n    height: metrics.height,\r\n    baseline: metrics.baseline,\r\n  };\r\n\r\n  return textElement;\r\n}\r\n\r\nexport function duplicateElement(element: ReturnType<typeof newElement>) {\r\n  const copy = {\r\n    ...element,\r\n  };\r\n  if (\"points\" in copy) {\r\n    copy.points = Array.isArray(element.points)\r\n      ? JSON.parse(JSON.stringify(element.points))\r\n      : element.points;\r\n  }\r\n\r\n  delete copy.shape;\r\n  copy.id = nanoid();\r\n  copy.seed = randomSeed();\r\n  return copy;\r\n}\r\n","import { Point } from \"roughjs/bin/geometry\";\r\n\r\n// https://stackoverflow.com/a/6853926/232122\r\nexport function distanceBetweenPointAndSegment(\r\n  x: number,\r\n  y: number,\r\n  x1: number,\r\n  y1: number,\r\n  x2: number,\r\n  y2: number,\r\n) {\r\n  const A = x - x1;\r\n  const B = y - y1;\r\n  const C = x2 - x1;\r\n  const D = y2 - y1;\r\n\r\n  const dot = A * C + B * D;\r\n  const lenSquare = C * C + D * D;\r\n  let param = -1;\r\n  if (lenSquare !== 0) {\r\n    // in case of 0 length line\r\n    param = dot / lenSquare;\r\n  }\r\n\r\n  let xx, yy;\r\n  if (param < 0) {\r\n    xx = x1;\r\n    yy = y1;\r\n  } else if (param > 1) {\r\n    xx = x2;\r\n    yy = y2;\r\n  } else {\r\n    xx = x1 + param * C;\r\n    yy = y1 + param * D;\r\n  }\r\n\r\n  const dx = x - xx;\r\n  const dy = y - yy;\r\n  return Math.hypot(dx, dy);\r\n}\r\n\r\nexport function rotate(\r\n  x1: number,\r\n  y1: number,\r\n  x2: number,\r\n  y2: number,\r\n  angle: number,\r\n) {\r\n  // 𝑎′𝑥=(𝑎𝑥−𝑐𝑥)cos𝜃−(𝑎𝑦−𝑐𝑦)sin𝜃+𝑐𝑥\r\n  // 𝑎′𝑦=(𝑎𝑥−𝑐𝑥)sin𝜃+(𝑎𝑦−𝑐𝑦)cos𝜃+𝑐𝑦.\r\n  // https://math.stackexchange.com/questions/2204520/how-do-i-rotate-a-line-segment-in-a-specific-point-on-the-line\r\n  return [\r\n    (x1 - x2) * Math.cos(angle) - (y1 - y2) * Math.sin(angle) + x2,\r\n    (x1 - x2) * Math.sin(angle) + (y1 - y2) * Math.cos(angle) + y2,\r\n  ];\r\n}\r\n\r\nexport const getPointOnAPath = (point: Point, path: Point[]) => {\r\n  const [px, py] = point;\r\n  const [start, ...other] = path;\r\n  let [lastX, lastY] = start;\r\n  let kLine: number = 0;\r\n  let idx: number = 0;\r\n\r\n  // if any item in the array is true, it means that a point is\r\n  // on some segment of a line based path\r\n  const retVal = other.some(([x2, y2], i) => {\r\n    // we always take a line when dealing with line segments\r\n    const x1 = lastX;\r\n    const y1 = lastY;\r\n\r\n    lastX = x2;\r\n    lastY = y2;\r\n\r\n    // if a point is not within the domain of the line segment\r\n    // it is not on the line segment\r\n    if (px < x1 || px > x2) {\r\n      return false;\r\n    }\r\n\r\n    // check if all points lie on the same line\r\n    // y1 = kx1 + b, y2 = kx2 + b\r\n    // y2 - y1 = k(x2 - x2) -> k = (y2 - y1) / (x2 - x1)\r\n\r\n    // coefficient for the line (p0, p1)\r\n    const kL = (y2 - y1) / (x2 - x1);\r\n\r\n    // coefficient for the line segment (p0, point)\r\n    const kP1 = (py - y1) / (px - x1);\r\n\r\n    // coefficient for the line segment (point, p1)\r\n    const kP2 = (py - y2) / (px - x2);\r\n\r\n    // because we are basing both lines from the same starting point\r\n    // the only option for collinearity is having same coefficients\r\n\r\n    // using it for floating point comparisons\r\n    const epsilon = 0.3;\r\n\r\n    // if coefficient is more than an arbitrary epsilon,\r\n    // these lines are nor collinear\r\n    if (Math.abs(kP1 - kL) > epsilon && Math.abs(kP2 - kL) > epsilon) {\r\n      return false;\r\n    }\r\n\r\n    // store the coefficient because we are goint to need it\r\n    kLine = kL;\r\n    idx = i;\r\n\r\n    return true;\r\n  });\r\n\r\n  // Return a coordinate that is always on the line segment\r\n  if (retVal === true) {\r\n    return { x: point[0], y: kLine * point[0], segment: idx };\r\n  }\r\n\r\n  return null;\r\n};\r\n","import { ExcalidrawElement } from \"./types\";\r\nimport { rotate } from \"../math\";\r\nimport { Drawable } from \"roughjs/bin/core\";\r\nimport { Point } from \"roughjs/bin/geometry\";\r\n\r\n// If the element is created from right to left, the width is going to be negative\r\n// This set of functions retrieves the absolute position of the 4 points.\r\nexport function getElementAbsoluteCoords(element: ExcalidrawElement) {\r\n  if (element.type === \"arrow\" || element.type === \"line\") {\r\n    return getLinearElementAbsoluteBounds(element);\r\n  }\r\n  return [\r\n    element.x,\r\n    element.y,\r\n    element.x + element.width,\r\n    element.y + element.height,\r\n  ];\r\n}\r\n\r\nexport function getDiamondPoints(element: ExcalidrawElement) {\r\n  // Here we add +1 to avoid these numbers to be 0\r\n  // otherwise rough.js will throw an error complaining about it\r\n  const topX = Math.floor(element.width / 2) + 1;\r\n  const topY = 0;\r\n  const rightX = element.width;\r\n  const rightY = Math.floor(element.height / 2) + 1;\r\n  const bottomX = topX;\r\n  const bottomY = element.height;\r\n  const leftX = topY;\r\n  const leftY = rightY;\r\n\r\n  return [topX, topY, rightX, rightY, bottomX, bottomY, leftX, leftY];\r\n}\r\n\r\nexport function getLinearElementAbsoluteBounds(element: ExcalidrawElement) {\r\n  if (element.points.length < 2 || !element.shape) {\r\n    const { minX, minY, maxX, maxY } = element.points.reduce(\r\n      (limits, [x, y]) => {\r\n        limits.minY = Math.min(limits.minY, y);\r\n        limits.minX = Math.min(limits.minX, x);\r\n\r\n        limits.maxX = Math.max(limits.maxX, x);\r\n        limits.maxY = Math.max(limits.maxY, y);\r\n\r\n        return limits;\r\n      },\r\n      { minX: Infinity, minY: Infinity, maxX: -Infinity, maxY: -Infinity },\r\n    );\r\n    return [\r\n      minX + element.x,\r\n      minY + element.y,\r\n      maxX + element.x,\r\n      maxY + element.y,\r\n    ];\r\n  }\r\n\r\n  const shape = element.shape as Drawable[];\r\n\r\n  // first element is always the curve\r\n  const ops = shape[0].sets[0].ops;\r\n\r\n  let currentP: Point = [0, 0];\r\n\r\n  const { minX, minY, maxX, maxY } = ops.reduce(\r\n    (limits, { op, data }) => {\r\n      // There are only four operation types:\r\n      // move, bcurveTo, lineTo, and curveTo\r\n      if (op === \"move\") {\r\n        // change starting point\r\n        currentP = data as Point;\r\n        // move operation does not draw anything; so, it always\r\n        // returns false\r\n      } else if (op === \"bcurveTo\") {\r\n        // create points from bezier curve\r\n        // bezier curve stores data as a flattened array of three positions\r\n        // [x1, y1, x2, y2, x3, y3]\r\n        const p1 = [data[0], data[1]] as Point;\r\n        const p2 = [data[2], data[3]] as Point;\r\n        const p3 = [data[4], data[5]] as Point;\r\n\r\n        const p0 = currentP;\r\n        currentP = p3;\r\n\r\n        const equation = (t: number, idx: number) =>\r\n          Math.pow(1 - t, 3) * p3[idx] +\r\n          3 * t * Math.pow(1 - t, 2) * p2[idx] +\r\n          3 * Math.pow(t, 2) * (1 - t) * p1[idx] +\r\n          p0[idx] * Math.pow(t, 3);\r\n\r\n        let t = 0;\r\n        while (t <= 1.0) {\r\n          const x = equation(t, 0);\r\n          const y = equation(t, 1);\r\n\r\n          limits.minY = Math.min(limits.minY, y);\r\n          limits.minX = Math.min(limits.minX, x);\r\n\r\n          limits.maxX = Math.max(limits.maxX, x);\r\n          limits.maxY = Math.max(limits.maxY, y);\r\n\r\n          t += 0.1;\r\n        }\r\n      } else if (op === \"lineTo\") {\r\n        // TODO: Implement this\r\n      } else if (op === \"qcurveTo\") {\r\n        // TODO: Implement this\r\n      }\r\n      return limits;\r\n    },\r\n    { minX: Infinity, minY: Infinity, maxX: -Infinity, maxY: -Infinity },\r\n  );\r\n\r\n  return [\r\n    minX + element.x,\r\n    minY + element.y,\r\n    maxX + element.x,\r\n    maxY + element.y,\r\n  ];\r\n}\r\n\r\nexport function getArrowPoints(element: ExcalidrawElement) {\r\n  const shape = element.shape as Drawable[];\r\n  const ops = shape[0].sets[0].ops;\r\n\r\n  const data = ops[ops.length - 1].data;\r\n  const p3 = [data[4], data[5]] as Point;\r\n  const p2 = [data[2], data[3]] as Point;\r\n  const p1 = [data[0], data[1]] as Point;\r\n\r\n  // we need to find p0 of the bezier curve\r\n  // it is typically the last point of the previous\r\n  // curve; it can also be the position of moveTo operation\r\n  const prevOp = ops[ops.length - 2];\r\n  let p0: Point = [0, 0];\r\n  if (prevOp.op === \"move\") {\r\n    p0 = prevOp.data as Point;\r\n  } else if (prevOp.op === \"bcurveTo\") {\r\n    p0 = [prevOp.data[4], prevOp.data[5]];\r\n  }\r\n\r\n  // B(t) = p0 * (1-t)^3 + 3p1 * t * (1-t)^2 + 3p2 * t^2 * (1-t) + p3 * t^3\r\n  const equation = (t: number, idx: number) =>\r\n    Math.pow(1 - t, 3) * p3[idx] +\r\n    3 * t * Math.pow(1 - t, 2) * p2[idx] +\r\n    3 * Math.pow(t, 2) * (1 - t) * p1[idx] +\r\n    p0[idx] * Math.pow(t, 3);\r\n\r\n  // we know the last point of the arrow\r\n  const [x2, y2] = p3;\r\n\r\n  // by using cubic bezier equation (B(t)) and the given parameters,\r\n  // we calculate a point that is closer to the last point\r\n  // The value 0.3 is chosen arbitrarily and it works best for all\r\n  // the tested cases\r\n  const [x1, y1] = [equation(0.3, 0), equation(0.3, 1)];\r\n\r\n  // find the normalized direction vector based on the\r\n  // previously calculated points\r\n  const distance = Math.hypot(x2 - x1, y2 - y1);\r\n  const nx = (x2 - x1) / distance;\r\n  const ny = (y2 - y1) / distance;\r\n\r\n  const size = 30; // pixels\r\n  const arrowLength = element.points.reduce((total, [cx, cy], idx, points) => {\r\n    const [px, py] = idx > 0 ? points[idx - 1] : [0, 0];\r\n    return total + Math.hypot(cx - px, cy - py);\r\n  }, 0);\r\n\r\n  // Scale down the arrow until we hit a certain size so that it doesn't look weird\r\n  // This value is selected by minizing a minmum size with the whole length of the arrow\r\n  // intead of last segment of the arrow\r\n  const minSize = Math.min(size, arrowLength / 2);\r\n  const xs = x2 - nx * minSize;\r\n  const ys = y2 - ny * minSize;\r\n\r\n  const angle = 20; // degrees\r\n  const [x3, y3] = rotate(xs, ys, x2, y2, (-angle * Math.PI) / 180);\r\n  const [x4, y4] = rotate(xs, ys, x2, y2, (angle * Math.PI) / 180);\r\n\r\n  return [x2, y2, x3, y3, x4, y4];\r\n}\r\n\r\nexport function getCommonBounds(elements: readonly ExcalidrawElement[]) {\r\n  let minX = Infinity;\r\n  let maxX = -Infinity;\r\n  let minY = Infinity;\r\n  let maxY = -Infinity;\r\n\r\n  elements.forEach(element => {\r\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\r\n    minX = Math.min(minX, x1);\r\n    minY = Math.min(minY, y1);\r\n    maxX = Math.max(maxX, x2);\r\n    maxY = Math.max(maxY, y2);\r\n  });\r\n\r\n  return [minX, minY, maxX, maxY];\r\n}\r\n","import { ExcalidrawElement } from \"./types\";\r\n\r\nimport { getElementAbsoluteCoords } from \"./bounds\";\r\n\r\ntype Sides = \"n\" | \"s\" | \"w\" | \"e\" | \"nw\" | \"ne\" | \"sw\" | \"se\";\r\n\r\nexport function handlerRectangles(element: ExcalidrawElement, zoom: number) {\r\n  const handlerWidth = 8 / zoom;\r\n  const handlerHeight = 8 / zoom;\r\n\r\n  const handlerMarginX = 8 / zoom;\r\n  const handlerMarginY = 8 / zoom;\r\n\r\n  const [elementX1, elementY1, elementX2, elementY2] = getElementAbsoluteCoords(\r\n    element,\r\n  );\r\n\r\n  const elementWidth = elementX2 - elementX1;\r\n  const elementHeight = elementY2 - elementY1;\r\n\r\n  const dashedLineMargin = 4 / zoom;\r\n\r\n  const handlers = {\r\n    nw: [\r\n      elementX1 - dashedLineMargin - handlerMarginX,\r\n      elementY1 - dashedLineMargin - handlerMarginY,\r\n      handlerWidth,\r\n      handlerHeight,\r\n    ],\r\n    ne: [\r\n      elementX2 + dashedLineMargin,\r\n      elementY1 - dashedLineMargin - handlerMarginY,\r\n      handlerWidth,\r\n      handlerHeight,\r\n    ],\r\n    sw: [\r\n      elementX1 - dashedLineMargin - handlerMarginX,\r\n      elementY2 + dashedLineMargin,\r\n      handlerWidth,\r\n      handlerHeight,\r\n    ],\r\n    se: [\r\n      elementX2 + dashedLineMargin,\r\n      elementY2 + dashedLineMargin,\r\n      handlerWidth,\r\n      handlerHeight,\r\n    ],\r\n  } as { [T in Sides]: number[] };\r\n\r\n  // We only want to show height handlers (all cardinal directions)  above a certain size\r\n  const minimumSizeForEightHandlers = 40 / zoom;\r\n  if (Math.abs(elementWidth) > minimumSizeForEightHandlers) {\r\n    handlers[\"n\"] = [\r\n      elementX1 + elementWidth / 2,\r\n      elementY1 - dashedLineMargin - handlerMarginY,\r\n      handlerWidth,\r\n      handlerHeight,\r\n    ];\r\n    handlers[\"s\"] = [\r\n      elementX1 + elementWidth / 2,\r\n      elementY2 + dashedLineMargin,\r\n      handlerWidth,\r\n      handlerHeight,\r\n    ];\r\n  }\r\n  if (Math.abs(elementHeight) > minimumSizeForEightHandlers) {\r\n    handlers[\"w\"] = [\r\n      elementX1 - dashedLineMargin - handlerMarginX,\r\n      elementY1 + elementHeight / 2,\r\n      handlerWidth,\r\n      handlerHeight,\r\n    ];\r\n    handlers[\"e\"] = [\r\n      elementX2 + dashedLineMargin,\r\n      elementY1 + elementHeight / 2,\r\n      handlerWidth,\r\n      handlerHeight,\r\n    ];\r\n  }\r\n\r\n  if (element.type === \"arrow\" || element.type === \"line\") {\r\n    if (element.points.length === 2) {\r\n      // only check the last point because starting point is always (0,0)\r\n      const [, p1] = element.points;\r\n\r\n      if (p1[0] === 0 || p1[1] === 0) {\r\n        return {\r\n          nw: handlers.nw,\r\n          se: handlers.se,\r\n        } as typeof handlers;\r\n      }\r\n\r\n      if (p1[0] > 0 && p1[1] < 0) {\r\n        return {\r\n          ne: handlers.ne,\r\n          sw: handlers.sw,\r\n        } as typeof handlers;\r\n      }\r\n\r\n      if (p1[0] > 0 && p1[1] > 0) {\r\n        return {\r\n          nw: handlers.nw,\r\n          se: handlers.se,\r\n        } as typeof handlers;\r\n      }\r\n\r\n      if (p1[0] < 0 && p1[1] > 0) {\r\n        return {\r\n          ne: handlers.ne,\r\n          sw: handlers.sw,\r\n        } as typeof handlers;\r\n      }\r\n\r\n      if (p1[0] < 0 && p1[1] < 0) {\r\n        return {\r\n          nw: handlers.nw,\r\n          se: handlers.se,\r\n        } as typeof handlers;\r\n      }\r\n    }\r\n\r\n    return {\r\n      n: handlers.n,\r\n      s: handlers.s,\r\n      w: handlers.w,\r\n      e: handlers.e,\r\n    } as typeof handlers;\r\n  }\r\n\r\n  return handlers;\r\n}\r\n","import { distanceBetweenPointAndSegment } from \"../math\";\r\n\r\nimport { ExcalidrawElement } from \"./types\";\r\n\r\nimport {\r\n  getDiamondPoints,\r\n  getElementAbsoluteCoords,\r\n  getLinearElementAbsoluteBounds,\r\n} from \"./bounds\";\r\nimport { Point } from \"roughjs/bin/geometry\";\r\nimport { Drawable, OpSet } from \"roughjs/bin/core\";\r\n\r\nfunction isElementDraggableFromInside(element: ExcalidrawElement): boolean {\r\n  return element.backgroundColor !== \"transparent\" || element.isSelected;\r\n}\r\n\r\nexport function hitTest(\r\n  element: ExcalidrawElement,\r\n  x: number,\r\n  y: number,\r\n  zoom: number,\r\n): boolean {\r\n  // For shapes that are composed of lines, we only enable point-selection when the distance\r\n  // of the click is less than x pixels of any of the lines that the shape is composed of\r\n  const lineThreshold = 10 / zoom;\r\n\r\n  if (element.type === \"ellipse\") {\r\n    // https://stackoverflow.com/a/46007540/232122\r\n    const px = Math.abs(x - element.x - element.width / 2);\r\n    const py = Math.abs(y - element.y - element.height / 2);\r\n\r\n    let tx = 0.707;\r\n    let ty = 0.707;\r\n\r\n    const a = Math.abs(element.width) / 2;\r\n    const b = Math.abs(element.height) / 2;\r\n\r\n    [0, 1, 2, 3].forEach(x => {\r\n      const xx = a * tx;\r\n      const yy = b * ty;\r\n\r\n      const ex = ((a * a - b * b) * tx ** 3) / a;\r\n      const ey = ((b * b - a * a) * ty ** 3) / b;\r\n\r\n      const rx = xx - ex;\r\n      const ry = yy - ey;\r\n\r\n      const qx = px - ex;\r\n      const qy = py - ey;\r\n\r\n      const r = Math.hypot(ry, rx);\r\n      const q = Math.hypot(qy, qx);\r\n\r\n      tx = Math.min(1, Math.max(0, ((qx * r) / q + ex) / a));\r\n      ty = Math.min(1, Math.max(0, ((qy * r) / q + ey) / b));\r\n      const t = Math.hypot(ty, tx);\r\n      tx /= t;\r\n      ty /= t;\r\n    });\r\n\r\n    if (isElementDraggableFromInside(element)) {\r\n      return (\r\n        a * tx - (px - lineThreshold) >= 0 && b * ty - (py - lineThreshold) >= 0\r\n      );\r\n    }\r\n    return Math.hypot(a * tx - px, b * ty - py) < lineThreshold;\r\n  } else if (element.type === \"rectangle\") {\r\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\r\n\r\n    if (isElementDraggableFromInside(element)) {\r\n      return (\r\n        x > x1 - lineThreshold &&\r\n        x < x2 + lineThreshold &&\r\n        y > y1 - lineThreshold &&\r\n        y < y2 + lineThreshold\r\n      );\r\n    }\r\n\r\n    // (x1, y1) --A-- (x2, y1)\r\n    //    |D             |B\r\n    // (x1, y2) --C-- (x2, y2)\r\n    return (\r\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y1) < lineThreshold || // A\r\n      distanceBetweenPointAndSegment(x, y, x2, y1, x2, y2) < lineThreshold || // B\r\n      distanceBetweenPointAndSegment(x, y, x2, y2, x1, y2) < lineThreshold || // C\r\n      distanceBetweenPointAndSegment(x, y, x1, y2, x1, y1) < lineThreshold // D\r\n    );\r\n  } else if (element.type === \"diamond\") {\r\n    x -= element.x;\r\n    y -= element.y;\r\n    let [\r\n      topX,\r\n      topY,\r\n      rightX,\r\n      rightY,\r\n      bottomX,\r\n      bottomY,\r\n      leftX,\r\n      leftY,\r\n    ] = getDiamondPoints(element);\r\n\r\n    if (isElementDraggableFromInside(element)) {\r\n      // TODO: remove this when we normalize coordinates globally\r\n      if (topY > bottomY) {\r\n        [bottomY, topY] = [topY, bottomY];\r\n      }\r\n      if (rightX < leftX) {\r\n        [leftX, rightX] = [rightX, leftX];\r\n      }\r\n\r\n      topY -= lineThreshold;\r\n      bottomY += lineThreshold;\r\n      leftX -= lineThreshold;\r\n      rightX += lineThreshold;\r\n\r\n      // all deltas should be < 0. Delta > 0 indicates it's on the outside side\r\n      //  of the line.\r\n      //\r\n      //          (topX, topY)\r\n      //     D  /             \\ A\r\n      //      /               \\\r\n      //  (leftX, leftY)  (rightX, rightY)\r\n      //    C \\               / B\r\n      //      \\              /\r\n      //      (bottomX, bottomY)\r\n      //\r\n      // https://stackoverflow.com/a/2752753/927631\r\n      return (\r\n        // delta from line D\r\n        (leftX - topX) * (y - leftY) - (leftX - x) * (topY - leftY) <= 0 &&\r\n        // delta from line A\r\n        (topX - rightX) * (y - rightY) - (x - rightX) * (topY - rightY) <= 0 &&\r\n        // delta from line B\r\n        (rightX - bottomX) * (y - bottomY) -\r\n          (x - bottomX) * (rightY - bottomY) <=\r\n          0 &&\r\n        // delta from line C\r\n        (bottomX - leftX) * (y - leftY) - (x - leftX) * (bottomY - leftY) <= 0\r\n      );\r\n    }\r\n\r\n    return (\r\n      distanceBetweenPointAndSegment(x, y, topX, topY, rightX, rightY) <\r\n        lineThreshold ||\r\n      distanceBetweenPointAndSegment(x, y, rightX, rightY, bottomX, bottomY) <\r\n        lineThreshold ||\r\n      distanceBetweenPointAndSegment(x, y, bottomX, bottomY, leftX, leftY) <\r\n        lineThreshold ||\r\n      distanceBetweenPointAndSegment(x, y, leftX, leftY, topX, topY) <\r\n        lineThreshold\r\n    );\r\n  } else if (element.type === \"arrow\" || element.type === \"line\") {\r\n    if (!element.shape) {\r\n      return false;\r\n    }\r\n    const shape = element.shape as Drawable[];\r\n\r\n    const [x1, y1, x2, y2] = getLinearElementAbsoluteBounds(element);\r\n    if (x < x1 || y < y1 - 10 || x > x2 || y > y2 + 10) {\r\n      return false;\r\n    }\r\n\r\n    const relX = x - element.x;\r\n    const relY = y - element.y;\r\n\r\n    // hit thest all \"subshapes\" of the linear element\r\n    return shape.some(s => hitTestRoughShape(s.sets, relX, relY));\r\n  } else if (element.type === \"text\") {\r\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\r\n\r\n    return x >= x1 && x <= x2 && y >= y1 && y <= y2;\r\n  } else if (element.type === \"selection\") {\r\n    console.warn(\"This should not happen, we need to investigate why it does.\");\r\n    return false;\r\n  }\r\n  throw new Error(`Unimplemented type ${element.type}`);\r\n}\r\n\r\nconst pointInBezierEquation = (\r\n  p0: Point,\r\n  p1: Point,\r\n  p2: Point,\r\n  p3: Point,\r\n  [mx, my]: Point,\r\n) => {\r\n  // B(t) = p0 * (1-t)^3 + 3p1 * t * (1-t)^2 + 3p2 * t^2 * (1-t) + p3 * t^3\r\n  const equation = (t: number, idx: number) =>\r\n    Math.pow(1 - t, 3) * p3[idx] +\r\n    3 * t * Math.pow(1 - t, 2) * p2[idx] +\r\n    3 * Math.pow(t, 2) * (1 - t) * p1[idx] +\r\n    p0[idx] * Math.pow(t, 3);\r\n\r\n  const epsilon = 20;\r\n  // go through t in increments of 0.01\r\n  let t = 0;\r\n  while (t <= 1.0) {\r\n    const tx = equation(t, 0);\r\n    const ty = equation(t, 1);\r\n\r\n    const diff = Math.sqrt(Math.pow(tx - mx, 2) + Math.pow(ty - my, 2));\r\n\r\n    if (diff < epsilon) {\r\n      return true;\r\n    }\r\n\r\n    t += 0.01;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst hitTestRoughShape = (opSet: OpSet[], x: number, y: number) => {\r\n  // read operations from first opSet\r\n  const ops = opSet[0].ops;\r\n\r\n  // set start position as (0,0) just in case\r\n  // move operation does not exist (unlikely but it is worth safekeeping it)\r\n  let currentP: Point = [0, 0];\r\n\r\n  return ops.some(({ op, data }, idx) => {\r\n    // There are only four operation types:\r\n    // move, bcurveTo, lineTo, and curveTo\r\n    if (op === \"move\") {\r\n      // change starting point\r\n      currentP = data as Point;\r\n      // move operation does not draw anything; so, it always\r\n      // returns false\r\n    } else if (op === \"bcurveTo\") {\r\n      // create points from bezier curve\r\n      // bezier curve stores data as a flattened array of three positions\r\n      // [x1, y1, x2, y2, x3, y3]\r\n      const p1 = [data[0], data[1]] as Point;\r\n      const p2 = [data[2], data[3]] as Point;\r\n      const p3 = [data[4], data[5]] as Point;\r\n\r\n      const p0 = currentP;\r\n      currentP = p3;\r\n\r\n      // check if points are on the curve\r\n      // cubic bezier curves require four parameters\r\n      // the first parameter is the last stored position (p0)\r\n      const retVal = pointInBezierEquation(p0, p1, p2, p3, [x, y]);\r\n\r\n      // set end point of bezier curve as the new starting point for\r\n      // upcoming operations as each operation is based on the last drawn\r\n      // position of the previous operation\r\n      return retVal;\r\n    } else if (op === \"lineTo\") {\r\n      // TODO: Implement this\r\n    } else if (op === \"qcurveTo\") {\r\n      // TODO: Implement this\r\n    }\r\n\r\n    return false;\r\n  });\r\n};\r\n","import { ExcalidrawElement } from \"./types\";\r\n\r\nimport { handlerRectangles } from \"./handlerRectangles\";\r\n\r\ntype HandlerRectanglesRet = keyof ReturnType<typeof handlerRectangles>;\r\n\r\nexport function resizeTest(\r\n  element: ExcalidrawElement,\r\n  x: number,\r\n  y: number,\r\n  zoom: number,\r\n): HandlerRectanglesRet | false {\r\n  if (!element.isSelected || element.type === \"text\") {\r\n    return false;\r\n  }\r\n\r\n  const handlers = handlerRectangles(element, zoom);\r\n\r\n  const filter = Object.keys(handlers).filter(key => {\r\n    const handler = handlers[key as HandlerRectanglesRet]!;\r\n    if (!handler) {\r\n      return false;\r\n    }\r\n\r\n    return (\r\n      x >= handler[0] &&\r\n      x <= handler[0] + handler[2] &&\r\n      y >= handler[1] &&\r\n      y <= handler[1] + handler[3]\r\n    );\r\n  });\r\n\r\n  if (filter.length > 0) {\r\n    return filter[0] as HandlerRectanglesRet;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport function getElementWithResizeHandler(\r\n  elements: readonly ExcalidrawElement[],\r\n  { x, y }: { x: number; y: number },\r\n  zoom: number,\r\n) {\r\n  return elements.reduce((result, element) => {\r\n    if (result) {\r\n      return result;\r\n    }\r\n    const resizeHandle = resizeTest(element, x, y, zoom);\r\n    return resizeHandle ? { element, resizeHandle } : null;\r\n  }, null as { element: ExcalidrawElement; resizeHandle: ReturnType<typeof resizeTest> } | null);\r\n}\r\n\r\n/*\r\n * Returns bi-directional cursor for the element being resized\r\n */\r\nexport function getCursorForResizingElement(resizingElement: {\r\n  element: ExcalidrawElement;\r\n  resizeHandle: ReturnType<typeof resizeTest>;\r\n}): string {\r\n  const { element, resizeHandle } = resizingElement;\r\n  const shouldSwapCursors =\r\n    Math.sign(element.height) * Math.sign(element.width) === -1;\r\n  let cursor = null;\r\n\r\n  switch (resizeHandle) {\r\n    case \"n\":\r\n    case \"s\":\r\n      cursor = \"ns\";\r\n      break;\r\n    case \"w\":\r\n    case \"e\":\r\n      cursor = \"ew\";\r\n      break;\r\n    case \"nw\":\r\n    case \"se\":\r\n      if (shouldSwapCursors) {\r\n        cursor = \"nesw\";\r\n      } else {\r\n        cursor = \"nwse\";\r\n      }\r\n      break;\r\n    case \"ne\":\r\n    case \"sw\":\r\n      if (shouldSwapCursors) {\r\n        cursor = \"nwse\";\r\n      } else {\r\n        cursor = \"nesw\";\r\n      }\r\n      break;\r\n  }\r\n\r\n  return cursor ? `${cursor}-resize` : \"\";\r\n}\r\n\r\nexport function normalizeResizeHandle(\r\n  element: ExcalidrawElement,\r\n  resizeHandle: HandlerRectanglesRet,\r\n): HandlerRectanglesRet {\r\n  if (\r\n    (element.width >= 0 && element.height >= 0) ||\r\n    element.type === \"line\" ||\r\n    element.type === \"arrow\"\r\n  ) {\r\n    return resizeHandle;\r\n  }\r\n\r\n  if (element.width < 0 && element.height < 0) {\r\n    switch (resizeHandle) {\r\n      case \"nw\":\r\n        return \"se\";\r\n      case \"ne\":\r\n        return \"sw\";\r\n      case \"se\":\r\n        return \"nw\";\r\n      case \"sw\":\r\n        return \"ne\";\r\n    }\r\n  } else if (element.width < 0) {\r\n    switch (resizeHandle) {\r\n      case \"nw\":\r\n        return \"ne\";\r\n      case \"ne\":\r\n        return \"nw\";\r\n      case \"se\":\r\n        return \"sw\";\r\n      case \"sw\":\r\n        return \"se\";\r\n      case \"e\":\r\n        return \"w\";\r\n      case \"w\":\r\n        return \"e\";\r\n    }\r\n  } else {\r\n    switch (resizeHandle) {\r\n      case \"nw\":\r\n        return \"sw\";\r\n      case \"ne\":\r\n        return \"se\";\r\n      case \"se\":\r\n        return \"ne\";\r\n      case \"sw\":\r\n        return \"nw\";\r\n      case \"n\":\r\n        return \"s\";\r\n      case \"s\":\r\n        return \"n\";\r\n    }\r\n  }\r\n\r\n  return resizeHandle;\r\n}\r\n","import { ExcalidrawElement, ExcalidrawTextElement } from \"./types\";\r\n\r\nexport function isTextElement(\r\n  element: ExcalidrawElement,\r\n): element is ExcalidrawTextElement {\r\n  return element.type === \"text\";\r\n}\r\n","export const KEYS = {\r\n  ARROW_LEFT: \"ArrowLeft\",\r\n  ARROW_RIGHT: \"ArrowRight\",\r\n  ARROW_DOWN: \"ArrowDown\",\r\n  ARROW_UP: \"ArrowUp\",\r\n  ENTER: \"Enter\",\r\n  ESCAPE: \"Escape\",\r\n  DELETE: \"Delete\",\r\n  BACKSPACE: \"Backspace\",\r\n  get META() {\r\n    return /Mac|iPod|iPhone|iPad/.test(window.navigator.platform)\r\n      ? \"metaKey\"\r\n      : \"ctrlKey\";\r\n  },\r\n  TAB: \"Tab\",\r\n  SPACE: \" \",\r\n};\r\n\r\nexport function isArrowKey(keyCode: string) {\r\n  return (\r\n    keyCode === KEYS.ARROW_LEFT ||\r\n    keyCode === KEYS.ARROW_RIGHT ||\r\n    keyCode === KEYS.ARROW_DOWN ||\r\n    keyCode === KEYS.ARROW_UP\r\n  );\r\n}\r\n","import { KEYS } from \"../keys\";\r\nimport { selectNode } from \"../utils\";\r\n\r\ntype TextWysiwygParams = {\r\n  initText: string;\r\n  x: number;\r\n  y: number;\r\n  strokeColor: string;\r\n  font: string;\r\n  opacity: number;\r\n  zoom: number;\r\n  onSubmit: (text: string) => void;\r\n  onCancel: () => void;\r\n};\r\n\r\n// When WYSIWYG text ends with white spaces, the text gets vertically misaligned\r\n// in order to fix this issue, we remove those white spaces\r\nfunction trimText(text: string) {\r\n  return text.trim();\r\n}\r\n\r\nexport function textWysiwyg({\r\n  initText,\r\n  x,\r\n  y,\r\n  strokeColor,\r\n  font,\r\n  opacity,\r\n  zoom,\r\n  onSubmit,\r\n  onCancel,\r\n}: TextWysiwygParams) {\r\n  // Using contenteditable here as it has dynamic width.\r\n  // But this solution has an issue — it allows to paste\r\n  // multiline text, which is not currently supported\r\n  const editable = document.createElement(\"div\");\r\n  editable.contentEditable = \"true\";\r\n  editable.tabIndex = 0;\r\n  editable.innerText = initText;\r\n  editable.dataset.type = \"wysiwyg\";\r\n\r\n  Object.assign(editable.style, {\r\n    color: strokeColor,\r\n    position: \"fixed\",\r\n    opacity: opacity / 100,\r\n    top: `${y}px`,\r\n    left: `${x}px`,\r\n    transform: `translate(-50%, -50%) scale(${zoom})`,\r\n    textAlign: \"left\",\r\n    display: \"inline-block\",\r\n    font: font,\r\n    padding: \"4px\",\r\n    // This needs to have \"1px solid\" otherwise the carret doesn't show up\r\n    // the first time on Safari and Chrome!\r\n    outline: \"1px solid transparent\",\r\n    whiteSpace: \"nowrap\",\r\n    minHeight: \"1em\",\r\n    backfaceVisibility: \"hidden\",\r\n  });\r\n\r\n  editable.onpaste = ev => {\r\n    try {\r\n      const selection = window.getSelection();\r\n      if (!selection?.rangeCount) {\r\n        return;\r\n      }\r\n      selection.deleteFromDocument();\r\n\r\n      const text = ev.clipboardData!.getData(\"text\").replace(/\\r\\n?/g, \"\\n\");\r\n\r\n      const span = document.createElement(\"span\");\r\n      span.innerText = text;\r\n      const range = selection.getRangeAt(0);\r\n      range.insertNode(span);\r\n\r\n      // deselect\r\n      window.getSelection()!.removeAllRanges();\r\n      range.setStart(span, span.childNodes.length);\r\n      range.setEnd(span, span.childNodes.length);\r\n      selection.addRange(range);\r\n\r\n      ev.preventDefault();\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  editable.onkeydown = ev => {\r\n    if (ev.key === KEYS.ESCAPE) {\r\n      ev.preventDefault();\r\n      if (initText) {\r\n        editable.innerText = initText;\r\n        handleSubmit();\r\n        return;\r\n      }\r\n      cleanup();\r\n      return;\r\n    }\r\n    if (ev.key === KEYS.ENTER && !ev.shiftKey) {\r\n      ev.preventDefault();\r\n      if (ev.isComposing || ev.keyCode === 229) {\r\n        return;\r\n      }\r\n      handleSubmit();\r\n    }\r\n  };\r\n  editable.onblur = handleSubmit;\r\n\r\n  function stopEvent(ev: Event) {\r\n    ev.stopPropagation();\r\n  }\r\n\r\n  function handleSubmit() {\r\n    if (editable.innerText) {\r\n      onSubmit(trimText(editable.innerText));\r\n    } else {\r\n      onCancel();\r\n    }\r\n    cleanup();\r\n  }\r\n\r\n  function cleanup() {\r\n    editable.onblur = null;\r\n    editable.onkeydown = null;\r\n    editable.onpaste = null;\r\n    window.removeEventListener(\"wheel\", stopEvent, true);\r\n    document.body.removeChild(editable);\r\n  }\r\n\r\n  window.addEventListener(\"wheel\", stopEvent, true);\r\n  document.body.appendChild(editable);\r\n  editable.focus();\r\n  selectNode(editable);\r\n}\r\n","import { measureText } from \"../utils\";\r\nimport { ExcalidrawTextElement } from \"./types\";\r\n\r\nexport const redrawTextBoundingBox = (element: ExcalidrawTextElement) => {\r\n  const metrics = measureText(element.text, element.font);\r\n  element.width = metrics.width;\r\n  element.height = metrics.height;\r\n  element.baseline = metrics.baseline;\r\n};\r\n","import { ExcalidrawElement } from \"./types\";\r\n\r\nexport function isInvisiblySmallElement(element: ExcalidrawElement): boolean {\r\n  if (element.type === \"arrow\" || element.type === \"line\") {\r\n    return element.points.length < 2;\r\n  }\r\n  return element.width === 0 && element.height === 0;\r\n}\r\n\r\n/**\r\n * Makes a perfect shape or diagonal/horizontal/vertical line\r\n */\r\nexport function getPerfectElementSize(\r\n  elementType: string,\r\n  width: number,\r\n  height: number,\r\n): { width: number; height: number } {\r\n  const absWidth = Math.abs(width);\r\n  const absHeight = Math.abs(height);\r\n\r\n  if (elementType === \"line\" || elementType === \"arrow\") {\r\n    if (absHeight < absWidth / 2) {\r\n      height = 0;\r\n    } else if (absWidth < absHeight / 2) {\r\n      width = 0;\r\n    } else {\r\n      height = absWidth * Math.sign(height);\r\n    }\r\n  } else if (elementType !== \"selection\") {\r\n    height = absWidth * Math.sign(height);\r\n  }\r\n\r\n  return { width, height };\r\n}\r\n\r\nexport function resizePerfectLineForNWHandler(\r\n  element: ExcalidrawElement,\r\n  x: number,\r\n  y: number,\r\n) {\r\n  const anchorX = element.x + element.width;\r\n  const anchorY = element.y + element.height;\r\n  const distanceToAnchorX = x - anchorX;\r\n  const distanceToAnchorY = y - anchorY;\r\n  if (Math.abs(distanceToAnchorX) < Math.abs(distanceToAnchorY) / 2) {\r\n    element.x = anchorX;\r\n    element.width = 0;\r\n    element.y = y;\r\n    element.height = -distanceToAnchorY;\r\n  } else if (Math.abs(distanceToAnchorY) < Math.abs(element.width) / 2) {\r\n    element.y = anchorY;\r\n    element.height = 0;\r\n  } else {\r\n    element.x = x;\r\n    element.width = -distanceToAnchorX;\r\n    element.height =\r\n      Math.sign(distanceToAnchorY) *\r\n      Math.sign(distanceToAnchorX) *\r\n      element.width;\r\n    element.y = anchorY - element.height;\r\n  }\r\n}\r\n\r\n/**\r\n * @returns {boolean} whether element was normalized\r\n */\r\nexport function normalizeDimensions(\r\n  element: ExcalidrawElement | null,\r\n): element is ExcalidrawElement {\r\n  if (\r\n    !element ||\r\n    (element.width >= 0 && element.height >= 0) ||\r\n    element.type === \"line\" ||\r\n    element.type === \"arrow\"\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  if (element.width < 0) {\r\n    element.width = Math.abs(element.width);\r\n    element.x -= element.width;\r\n  }\r\n\r\n  if (element.height < 0) {\r\n    element.height = Math.abs(element.height);\r\n    element.y -= element.height;\r\n  }\r\n\r\n  element.shape = null;\r\n\r\n  return true;\r\n}\r\n","import { ExcalidrawElement } from \"../element/types\";\r\nimport { getCommonBounds } from \"../element\";\r\n\r\nconst SCROLLBAR_MARGIN = 4;\r\nexport const SCROLLBAR_WIDTH = 6;\r\nexport const SCROLLBAR_COLOR = \"rgba(0,0,0,0.3)\";\r\n\r\nexport function getScrollBars(\r\n  elements: readonly ExcalidrawElement[],\r\n  viewportWidth: number,\r\n  viewportHeight: number,\r\n  {\r\n    scrollX,\r\n    scrollY,\r\n    zoom,\r\n  }: {\r\n    scrollX: number;\r\n    scrollY: number;\r\n    zoom: number;\r\n  },\r\n) {\r\n  // This is the bounding box of all the elements\r\n  const [\r\n    elementsMinX,\r\n    elementsMinY,\r\n    elementsMaxX,\r\n    elementsMaxY,\r\n  ] = getCommonBounds(elements);\r\n\r\n  // Apply zoom\r\n  const viewportWidthWithZoom = viewportWidth / zoom;\r\n  const viewportHeightWithZoom = viewportHeight / zoom;\r\n\r\n  const viewportWidthDiff = viewportWidth - viewportWidthWithZoom;\r\n  const viewportHeightDiff = viewportHeight - viewportHeightWithZoom;\r\n\r\n  // The viewport is the rectangle currently visible for the user\r\n  const viewportMinX = -scrollX + viewportWidthDiff / 2;\r\n  const viewportMinY = -scrollY + viewportHeightDiff / 2;\r\n  const viewportMaxX = viewportMinX + viewportWidthWithZoom;\r\n  const viewportMaxY = viewportMinY + viewportHeightWithZoom;\r\n\r\n  // The scene is the bounding box of both the elements and viewport\r\n  const sceneMinX = Math.min(elementsMinX, viewportMinX);\r\n  const sceneMinY = Math.min(elementsMinY, viewportMinY);\r\n  const sceneMaxX = Math.max(elementsMaxX, viewportMaxX);\r\n  const sceneMaxY = Math.max(elementsMaxY, viewportMaxY);\r\n\r\n  // The scrollbar represents where the viewport is in relationship to the scene\r\n\r\n  return {\r\n    horizontal:\r\n      viewportMinX === sceneMinX && viewportMaxX === sceneMaxX\r\n        ? null\r\n        : {\r\n            x:\r\n              ((viewportMinX - sceneMinX) / (sceneMaxX - sceneMinX)) *\r\n                viewportWidth +\r\n              SCROLLBAR_MARGIN,\r\n            y: viewportHeight - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\r\n            width:\r\n              ((viewportMaxX - viewportMinX) / (sceneMaxX - sceneMinX)) *\r\n                viewportWidth -\r\n              SCROLLBAR_MARGIN * 2,\r\n            height: SCROLLBAR_WIDTH,\r\n          },\r\n    vertical:\r\n      viewportMinY === sceneMinY && viewportMaxY === sceneMaxY\r\n        ? null\r\n        : {\r\n            x: viewportWidth - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\r\n            y:\r\n              ((viewportMinY - sceneMinY) / (sceneMaxY - sceneMinY)) *\r\n                viewportHeight +\r\n              SCROLLBAR_MARGIN,\r\n            width: SCROLLBAR_WIDTH,\r\n            height:\r\n              ((viewportMaxY - viewportMinY) / (sceneMaxY - sceneMinY)) *\r\n                viewportHeight -\r\n              SCROLLBAR_MARGIN * 2,\r\n          },\r\n  };\r\n}\r\n\r\nexport function isOverScrollBars(\r\n  elements: readonly ExcalidrawElement[],\r\n  x: number,\r\n  y: number,\r\n  viewportWidth: number,\r\n  viewportHeight: number,\r\n  {\r\n    scrollX,\r\n    scrollY,\r\n    zoom,\r\n  }: {\r\n    scrollX: number;\r\n    scrollY: number;\r\n    zoom: number;\r\n  },\r\n) {\r\n  const scrollBars = getScrollBars(elements, viewportWidth, viewportHeight, {\r\n    scrollX,\r\n    scrollY,\r\n    zoom,\r\n  });\r\n\r\n  const [isOverHorizontalScrollBar, isOverVerticalScrollBar] = [\r\n    scrollBars.horizontal,\r\n    scrollBars.vertical,\r\n  ].map(scrollBar => {\r\n    return (\r\n      scrollBar &&\r\n      scrollBar.x <= x &&\r\n      x <= scrollBar.x + scrollBar.width &&\r\n      scrollBar.y <= y &&\r\n      y <= scrollBar.y + scrollBar.height\r\n    );\r\n  });\r\n\r\n  return {\r\n    isOverHorizontalScrollBar,\r\n    isOverVerticalScrollBar,\r\n  };\r\n}\r\n","import { ExcalidrawElement } from \"../element/types\";\r\nimport { getElementAbsoluteCoords } from \"../element\";\r\n\r\nexport function getElementsWithinSelection(\r\n  elements: readonly ExcalidrawElement[],\r\n  selection: ExcalidrawElement,\r\n) {\r\n  const [\r\n    selectionX1,\r\n    selectionY1,\r\n    selectionX2,\r\n    selectionY2,\r\n  ] = getElementAbsoluteCoords(selection);\r\n  return elements.filter(element => {\r\n    const [\r\n      elementX1,\r\n      elementY1,\r\n      elementX2,\r\n      elementY2,\r\n    ] = getElementAbsoluteCoords(element);\r\n\r\n    return (\r\n      element.type !== \"selection\" &&\r\n      selectionX1 <= elementX1 &&\r\n      selectionY1 <= elementY1 &&\r\n      selectionX2 >= elementX2 &&\r\n      selectionY2 >= elementY2\r\n    );\r\n  });\r\n}\r\n\r\nexport function clearSelection(elements: readonly ExcalidrawElement[]) {\r\n  let someWasSelected = false;\r\n  elements.forEach(element => {\r\n    if (element.isSelected) {\r\n      someWasSelected = true;\r\n      element.isSelected = false;\r\n    }\r\n  });\r\n\r\n  return someWasSelected ? elements.slice() : elements;\r\n}\r\n\r\nexport function deleteSelectedElements(elements: readonly ExcalidrawElement[]) {\r\n  return elements.filter(el => !el.isSelected);\r\n}\r\n\r\nexport function getSelectedIndices(elements: readonly ExcalidrawElement[]) {\r\n  const selectedIndices: number[] = [];\r\n  elements.forEach((element, index) => {\r\n    if (element.isSelected) {\r\n      selectedIndices.push(index);\r\n    }\r\n  });\r\n  return selectedIndices;\r\n}\r\n\r\nexport function isSomeElementSelected(\r\n  elements: readonly ExcalidrawElement[],\r\n): boolean {\r\n  return elements.some(element => element.isSelected);\r\n}\r\n\r\n/**\r\n * Returns common attribute (picked by `getAttribute` callback) of selected\r\n *  elements. If elements don't share the same value, returns `null`.\r\n */\r\nexport function getCommonAttributeOfSelectedElements<T>(\r\n  elements: readonly ExcalidrawElement[],\r\n  getAttribute: (element: ExcalidrawElement) => T,\r\n): T | null {\r\n  const attributes = Array.from(\r\n    new Set(\r\n      getSelectedElements(elements).map(element => getAttribute(element)),\r\n    ),\r\n  );\r\n  return attributes.length === 1 ? attributes[0] : null;\r\n}\r\n\r\nexport function getSelectedElements(\r\n  elements: readonly ExcalidrawElement[],\r\n): readonly ExcalidrawElement[] {\r\n  return elements.filter(element => element.isSelected);\r\n}\r\n","import { AppState } from \"./types\";\r\nimport { getDateTime } from \"./utils\";\r\n\r\nconst DEFAULT_PROJECT_NAME = `excalidraw-${getDateTime()}`;\r\n\r\nexport function getDefaultAppState(): AppState {\r\n  return {\r\n    draggingElement: null,\r\n    resizingElement: null,\r\n    multiElement: null,\r\n    editingElement: null,\r\n    elementType: \"selection\",\r\n    elementLocked: false,\r\n    exportBackground: true,\r\n    currentItemStrokeColor: \"#000000\",\r\n    currentItemBackgroundColor: \"transparent\",\r\n    currentItemFillStyle: \"hachure\",\r\n    currentItemStrokeWidth: 1,\r\n    currentItemRoughness: 1,\r\n    currentItemOpacity: 100,\r\n    currentItemFont: \"20px Virgil\",\r\n    viewBackgroundColor: \"#ffffff\",\r\n    scrollX: 0,\r\n    scrollY: 0,\r\n    cursorX: 0,\r\n    cursorY: 0,\r\n    scrolledOutside: false,\r\n    name: DEFAULT_PROJECT_NAME,\r\n    isResizing: false,\r\n    selectionElement: null,\r\n    zoom: 1,\r\n  };\r\n}\r\n\r\nexport function clearAppStateForLocalStorage(appState: AppState) {\r\n  const {\r\n    draggingElement,\r\n    resizingElement,\r\n    multiElement,\r\n    editingElement,\r\n    selectionElement,\r\n    isResizing,\r\n    ...exportedState\r\n  } = appState;\r\n  return exportedState;\r\n}\r\n\r\nexport function clearAppStatePropertiesForHistory(\r\n  appState: AppState,\r\n): Partial<AppState> {\r\n  return {\r\n    exportBackground: appState.exportBackground,\r\n    currentItemStrokeColor: appState.currentItemStrokeColor,\r\n    currentItemBackgroundColor: appState.currentItemBackgroundColor,\r\n    currentItemFillStyle: appState.currentItemFillStyle,\r\n    currentItemStrokeWidth: appState.currentItemStrokeWidth,\r\n    currentItemRoughness: appState.currentItemRoughness,\r\n    currentItemOpacity: appState.currentItemOpacity,\r\n    currentItemFont: appState.currentItemFont,\r\n    viewBackgroundColor: appState.viewBackgroundColor,\r\n    name: appState.name,\r\n  };\r\n}\r\n\r\nexport function cleanAppStateForExport(appState: AppState) {\r\n  return {\r\n    viewBackgroundColor: appState.viewBackgroundColor,\r\n  };\r\n}\r\n","/**\r\n * https://stackoverflow.com/a/3368118\r\n * Draws a rounded rectangle using the current state of the canvas.\r\n * @param {CanvasRenderingContext2D} context\r\n * @param {Number} x The top left x coordinate\r\n * @param {Number} y The top left y coordinate\r\n * @param {Number} width The width of the rectangle\r\n * @param {Number} height The height of the rectangle\r\n * @param {Number} radius The corner radius\r\n */\r\nexport function roundRect(\r\n  context: CanvasRenderingContext2D,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number,\r\n  radius: number,\r\n) {\r\n  context.beginPath();\r\n  context.moveTo(x + radius, y);\r\n  context.lineTo(x + width - radius, y);\r\n  context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n  context.lineTo(x + width, y + height - radius);\r\n  context.quadraticCurveTo(\r\n    x + width,\r\n    y + height,\r\n    x + width - radius,\r\n    y + height,\r\n  );\r\n  context.lineTo(x + radius, y + height);\r\n  context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n  context.lineTo(x, y + radius);\r\n  context.quadraticCurveTo(x, y, x + radius, y);\r\n  context.closePath();\r\n  context.fill();\r\n  context.stroke();\r\n}\r\n","export function getZoomOrigin(canvas: HTMLCanvasElement | null) {\r\n  if (canvas === null) {\r\n    return { x: 0, y: 0 };\r\n  }\r\n  const context = canvas.getContext(\"2d\");\r\n  if (context === null) {\r\n    return { x: 0, y: 0 };\r\n  }\r\n\r\n  const normalizedCanvasWidth = canvas.width / context.getTransform().a;\r\n  const normalizedCanvasHeight = canvas.height / context.getTransform().d;\r\n\r\n  return {\r\n    x: normalizedCanvasWidth / 2,\r\n    y: normalizedCanvasHeight / 2,\r\n  };\r\n}\r\n\r\nexport function getZoomTranslation(canvas: HTMLCanvasElement, zoom: number) {\r\n  const diffMiddleOfTheCanvas = {\r\n    x: (canvas.width / 2) * (zoom - 1),\r\n    y: (canvas.height / 2) * (zoom - 1),\r\n  };\r\n\r\n  // Due to JavaScript float precision, we fix to fix decimals count to have symmetric zoom\r\n  return {\r\n    x: parseFloat(diffMiddleOfTheCanvas.x.toFixed(8)),\r\n    y: parseFloat(diffMiddleOfTheCanvas.y.toFixed(8)),\r\n  };\r\n}\r\n\r\nexport function getNormalizedZoom(zoom: number): number {\r\n  const normalizedZoom = parseFloat(zoom.toFixed(2));\r\n  const clampedZoom = Math.max(0.1, Math.min(normalizedZoom, 2));\r\n  return clampedZoom;\r\n}\r\n","import { ExcalidrawElement } from \"../element/types\";\r\nimport { isTextElement } from \"../element/typeChecks\";\r\nimport { getDiamondPoints, getArrowPoints } from \"../element/bounds\";\r\nimport { RoughCanvas } from \"roughjs/bin/canvas\";\r\nimport { Drawable } from \"roughjs/bin/core\";\r\nimport { Point } from \"roughjs/bin/geometry\";\r\nimport { RoughSVG } from \"roughjs/bin/svg\";\r\nimport { RoughGenerator } from \"roughjs/bin/generator\";\r\nimport { SVG_NS } from \"../utils\";\r\n\r\nfunction generateElement(\r\n  element: ExcalidrawElement,\r\n  generator: RoughGenerator,\r\n) {\r\n  if (!element.shape) {\r\n    switch (element.type) {\r\n      case \"rectangle\":\r\n        element.shape = generator.rectangle(\r\n          0,\r\n          0,\r\n          element.width,\r\n          element.height,\r\n          {\r\n            stroke: element.strokeColor,\r\n            fill:\r\n              element.backgroundColor === \"transparent\"\r\n                ? undefined\r\n                : element.backgroundColor,\r\n            fillStyle: element.fillStyle,\r\n            strokeWidth: element.strokeWidth,\r\n            roughness: element.roughness,\r\n            seed: element.seed,\r\n          },\r\n        );\r\n        break;\r\n      case \"diamond\": {\r\n        const [\r\n          topX,\r\n          topY,\r\n          rightX,\r\n          rightY,\r\n          bottomX,\r\n          bottomY,\r\n          leftX,\r\n          leftY,\r\n        ] = getDiamondPoints(element);\r\n        element.shape = generator.polygon(\r\n          [\r\n            [topX, topY],\r\n            [rightX, rightY],\r\n            [bottomX, bottomY],\r\n            [leftX, leftY],\r\n          ],\r\n          {\r\n            stroke: element.strokeColor,\r\n            fill:\r\n              element.backgroundColor === \"transparent\"\r\n                ? undefined\r\n                : element.backgroundColor,\r\n            fillStyle: element.fillStyle,\r\n            strokeWidth: element.strokeWidth,\r\n            roughness: element.roughness,\r\n            seed: element.seed,\r\n          },\r\n        );\r\n        break;\r\n      }\r\n      case \"ellipse\":\r\n        element.shape = generator.ellipse(\r\n          element.width / 2,\r\n          element.height / 2,\r\n          element.width,\r\n          element.height,\r\n          {\r\n            stroke: element.strokeColor,\r\n            fill:\r\n              element.backgroundColor === \"transparent\"\r\n                ? undefined\r\n                : element.backgroundColor,\r\n            fillStyle: element.fillStyle,\r\n            strokeWidth: element.strokeWidth,\r\n            roughness: element.roughness,\r\n            seed: element.seed,\r\n            curveFitting: 1,\r\n          },\r\n        );\r\n        break;\r\n      case \"line\":\r\n      case \"arrow\": {\r\n        const options = {\r\n          stroke: element.strokeColor,\r\n          strokeWidth: element.strokeWidth,\r\n          roughness: element.roughness,\r\n          seed: element.seed,\r\n        };\r\n        // points array can be empty in the beginning, so it is important to add\r\n        // initial position to it\r\n        const points: Point[] = element.points.length\r\n          ? element.points\r\n          : [[0, 0]];\r\n\r\n        // curve is always the first element\r\n        // this simplifies finding the curve for an element\r\n        element.shape = [generator.curve(points, options)];\r\n\r\n        // add lines only in arrow\r\n        if (element.type === \"arrow\") {\r\n          const [x2, y2, x3, y3, x4, y4] = getArrowPoints(element);\r\n          element.shape.push(\r\n            ...[\r\n              generator.line(x3, y3, x2, y2, options),\r\n              generator.line(x4, y4, x2, y2, options),\r\n            ],\r\n          );\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function renderElement(\r\n  element: ExcalidrawElement,\r\n  rc: RoughCanvas,\r\n  context: CanvasRenderingContext2D,\r\n) {\r\n  const generator = rc.generator;\r\n  switch (element.type) {\r\n    case \"selection\": {\r\n      const fillStyle = context.fillStyle;\r\n      context.fillStyle = \"rgba(0, 0, 255, 0.10)\";\r\n      context.fillRect(0, 0, element.width, element.height);\r\n      context.fillStyle = fillStyle;\r\n      break;\r\n    }\r\n    case \"rectangle\":\r\n    case \"diamond\":\r\n    case \"ellipse\":\r\n      generateElement(element, generator);\r\n      context.globalAlpha = element.opacity / 100;\r\n      rc.draw(element.shape as Drawable);\r\n      context.globalAlpha = 1;\r\n      break;\r\n    case \"line\":\r\n    case \"arrow\": {\r\n      generateElement(element, generator);\r\n      context.globalAlpha = element.opacity / 100;\r\n      (element.shape as Drawable[]).forEach(shape => rc.draw(shape));\r\n      context.globalAlpha = 1;\r\n      break;\r\n    }\r\n    default: {\r\n      if (isTextElement(element)) {\r\n        context.globalAlpha = element.opacity / 100;\r\n        const font = context.font;\r\n        context.font = element.font;\r\n        const fillStyle = context.fillStyle;\r\n        context.fillStyle = element.strokeColor;\r\n        // Canvas does not support multiline text by default\r\n        const lines = element.text.replace(/\\r\\n?/g, \"\\n\").split(\"\\n\");\r\n        const lineHeight = element.height / lines.length;\r\n        const offset = element.height - element.baseline;\r\n        for (let i = 0; i < lines.length; i++) {\r\n          context.fillText(lines[i], 0, (i + 1) * lineHeight - offset);\r\n        }\r\n        context.fillStyle = fillStyle;\r\n        context.font = font;\r\n        context.globalAlpha = 1;\r\n      } else {\r\n        throw new Error(`Unimplemented type ${element.type}`);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function renderElementToSvg(\r\n  element: ExcalidrawElement,\r\n  rsvg: RoughSVG,\r\n  svgRoot: SVGElement,\r\n  offsetX?: number,\r\n  offsetY?: number,\r\n) {\r\n  const generator = rsvg.generator;\r\n  switch (element.type) {\r\n    case \"selection\": {\r\n      // Since this is used only during editing experience, which is canvas based,\r\n      // this should not happen\r\n      throw new Error(\"Selection rendering is not supported for SVG\");\r\n    }\r\n    case \"rectangle\":\r\n    case \"diamond\":\r\n    case \"ellipse\":\r\n    case \"line\": {\r\n      generateElement(element, generator);\r\n      const node = rsvg.draw(element.shape as Drawable);\r\n      const opacity = element.opacity / 100;\r\n      if (opacity !== 1) {\r\n        node.setAttribute(\"stroke-opacity\", `${opacity}`);\r\n        node.setAttribute(\"fill-opacity\", `${opacity}`);\r\n      }\r\n      node.setAttribute(\r\n        \"transform\",\r\n        `translate(${offsetX || 0} ${offsetY || 0})`,\r\n      );\r\n      svgRoot.appendChild(node);\r\n      break;\r\n    }\r\n    case \"arrow\": {\r\n      generateElement(element, generator);\r\n      const group = svgRoot.ownerDocument!.createElementNS(SVG_NS, \"g\");\r\n      const opacity = element.opacity / 100;\r\n      (element.shape as Drawable[]).forEach(shape => {\r\n        const node = rsvg.draw(shape);\r\n        if (opacity !== 1) {\r\n          node.setAttribute(\"stroke-opacity\", `${opacity}`);\r\n          node.setAttribute(\"fill-opacity\", `${opacity}`);\r\n        }\r\n        node.setAttribute(\r\n          \"transform\",\r\n          `translate(${offsetX || 0} ${offsetY || 0})`,\r\n        );\r\n        group.appendChild(node);\r\n      });\r\n      svgRoot.appendChild(group);\r\n      break;\r\n    }\r\n    default: {\r\n      if (isTextElement(element)) {\r\n        const opacity = element.opacity / 100;\r\n        const node = svgRoot.ownerDocument!.createElementNS(SVG_NS, \"g\");\r\n        if (opacity !== 1) {\r\n          node.setAttribute(\"stroke-opacity\", `${opacity}`);\r\n          node.setAttribute(\"fill-opacity\", `${opacity}`);\r\n        }\r\n        node.setAttribute(\r\n          \"transform\",\r\n          `translate(${offsetX || 0} ${offsetY || 0})`,\r\n        );\r\n        const lines = element.text.replace(/\\r\\n?/g, \"\\n\").split(\"\\n\");\r\n        const lineHeight = element.height / lines.length;\r\n        const offset = element.height - element.baseline;\r\n        const fontSplit = element.font.split(\" \").filter(d => !!d.trim());\r\n        let fontFamily = fontSplit[0];\r\n        let fontSize = \"20px\";\r\n        if (fontSplit.length > 1) {\r\n          fontFamily = fontSplit[1];\r\n          fontSize = fontSplit[0];\r\n        }\r\n        for (let i = 0; i < lines.length; i++) {\r\n          const text = svgRoot.ownerDocument!.createElementNS(SVG_NS, \"text\");\r\n          text.textContent = lines[i];\r\n          text.setAttribute(\"x\", \"0\");\r\n          text.setAttribute(\"y\", `${(i + 1) * lineHeight - offset}`);\r\n          text.setAttribute(\"font-family\", fontFamily);\r\n          text.setAttribute(\"font-size\", fontSize);\r\n          text.setAttribute(\"fill\", element.strokeColor);\r\n          node.appendChild(text);\r\n        }\r\n        svgRoot.appendChild(node);\r\n      } else {\r\n        throw new Error(`Unimplemented type ${element.type}`);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { RoughCanvas } from \"roughjs/bin/canvas\";\r\nimport { RoughSVG } from \"roughjs/bin/svg\";\r\n\r\nimport { ExcalidrawElement } from \"../element/types\";\r\nimport { getElementAbsoluteCoords, handlerRectangles } from \"../element\";\r\n\r\nimport { roundRect } from \"./roundRect\";\r\nimport { SceneState } from \"../scene/types\";\r\nimport {\r\n  getScrollBars,\r\n  SCROLLBAR_COLOR,\r\n  SCROLLBAR_WIDTH,\r\n} from \"../scene/scrollbars\";\r\nimport { getZoomTranslation } from \"../scene/zoom\";\r\nimport { getSelectedElements } from \"../scene/selection\";\r\n\r\nimport { renderElement, renderElementToSvg } from \"./renderElement\";\r\n\r\nexport function renderScene(\r\n  elements: readonly ExcalidrawElement[],\r\n  selectionElement: ExcalidrawElement | null,\r\n  rc: RoughCanvas,\r\n  canvas: HTMLCanvasElement,\r\n  sceneState: SceneState,\r\n  // extra options, currently passed by export helper\r\n  {\r\n    offsetX,\r\n    offsetY,\r\n    renderScrollbars = true,\r\n    renderSelection = true,\r\n  }: {\r\n    offsetX?: number;\r\n    offsetY?: number;\r\n    renderScrollbars?: boolean;\r\n    renderSelection?: boolean;\r\n  } = {},\r\n): boolean {\r\n  if (!canvas) {\r\n    return false;\r\n  }\r\n\r\n  // Use offsets insteads of scrolls if available\r\n  sceneState = {\r\n    ...sceneState,\r\n    scrollX: typeof offsetX === \"number\" ? offsetX : sceneState.scrollX,\r\n    scrollY: typeof offsetY === \"number\" ? offsetY : sceneState.scrollY,\r\n  };\r\n\r\n  const context = canvas.getContext(\"2d\")!;\r\n\r\n  // Get initial scale transform as reference for later usage\r\n  const initialContextTransform = context.getTransform();\r\n\r\n  // When doing calculations based on canvas width we should used normalized one\r\n  const normalizedCanvasWidth =\r\n    canvas.width / getContextTransformScaleX(initialContextTransform);\r\n  const normalizedCanvasHeight =\r\n    canvas.height / getContextTransformScaleY(initialContextTransform);\r\n\r\n  // Handle zoom scaling\r\n  function scaleContextToZoom() {\r\n    context.setTransform(\r\n      getContextTransformScaleX(initialContextTransform) * sceneState.zoom,\r\n      0,\r\n      0,\r\n      getContextTransformScaleY(initialContextTransform) * sceneState.zoom,\r\n      getContextTransformTranslateX(context.getTransform()),\r\n      getContextTransformTranslateY(context.getTransform()),\r\n    );\r\n  }\r\n\r\n  // Handle zoom translation\r\n  const zoomTranslation = getZoomTranslation(canvas, sceneState.zoom);\r\n  function translateContextToZoom() {\r\n    context.setTransform(\r\n      getContextTransformScaleX(context.getTransform()),\r\n      0,\r\n      0,\r\n      getContextTransformScaleY(context.getTransform()),\r\n      getContextTransformTranslateX(initialContextTransform) -\r\n        zoomTranslation.x,\r\n      getContextTransformTranslateY(initialContextTransform) -\r\n        zoomTranslation.y,\r\n    );\r\n  }\r\n\r\n  // Paint background\r\n  context.save();\r\n  if (typeof sceneState.viewBackgroundColor === \"string\") {\r\n    const hasTransparence =\r\n      sceneState.viewBackgroundColor === \"transparent\" ||\r\n      sceneState.viewBackgroundColor.length === 5 ||\r\n      sceneState.viewBackgroundColor.length === 9;\r\n    if (hasTransparence) {\r\n      context.clearRect(0, 0, normalizedCanvasWidth, normalizedCanvasHeight);\r\n    }\r\n    context.fillStyle = sceneState.viewBackgroundColor;\r\n    context.fillRect(0, 0, normalizedCanvasWidth, normalizedCanvasHeight);\r\n  } else {\r\n    context.clearRect(0, 0, normalizedCanvasWidth, normalizedCanvasHeight);\r\n  }\r\n  context.restore();\r\n\r\n  // Paint visible elements\r\n  const visibleElements = elements.filter(element =>\r\n    isVisibleElement(\r\n      element,\r\n      normalizedCanvasWidth,\r\n      normalizedCanvasHeight,\r\n      sceneState,\r\n    ),\r\n  );\r\n\r\n  context.save();\r\n  scaleContextToZoom();\r\n  translateContextToZoom();\r\n  context.translate(sceneState.scrollX, sceneState.scrollY);\r\n  visibleElements.forEach(element => {\r\n    context.save();\r\n    context.translate(element.x, element.y);\r\n    renderElement(element, rc, context);\r\n    context.restore();\r\n  });\r\n  context.restore();\r\n\r\n  // Pain selection element\r\n  if (selectionElement) {\r\n    context.save();\r\n    scaleContextToZoom();\r\n    translateContextToZoom();\r\n    context.translate(sceneState.scrollX, sceneState.scrollY);\r\n    context.translate(selectionElement.x, selectionElement.y);\r\n    renderElement(selectionElement, rc, context);\r\n    context.restore();\r\n  }\r\n\r\n  // Pain selected elements\r\n  if (renderSelection) {\r\n    const selectedElements = getSelectedElements(elements);\r\n    const dashledLinePadding = 4 / sceneState.zoom;\r\n\r\n    context.save();\r\n    scaleContextToZoom();\r\n    translateContextToZoom();\r\n    context.translate(sceneState.scrollX, sceneState.scrollY);\r\n    selectedElements.forEach(element => {\r\n      const [\r\n        elementX1,\r\n        elementY1,\r\n        elementX2,\r\n        elementY2,\r\n      ] = getElementAbsoluteCoords(element);\r\n\r\n      const elementWidth = elementX2 - elementX1;\r\n      const elementHeight = elementY2 - elementY1;\r\n\r\n      const initialLineDash = context.getLineDash();\r\n      context.setLineDash([8 / sceneState.zoom, 4 / sceneState.zoom]);\r\n      context.strokeRect(\r\n        elementX1 - dashledLinePadding,\r\n        elementY1 - dashledLinePadding,\r\n        elementWidth + dashledLinePadding * 2,\r\n        elementHeight + dashledLinePadding * 2,\r\n      );\r\n      context.setLineDash(initialLineDash);\r\n    });\r\n    context.restore();\r\n\r\n    // Paint resize handlers\r\n    if (selectedElements.length === 1 && selectedElements[0].type !== \"text\") {\r\n      context.save();\r\n      scaleContextToZoom();\r\n      translateContextToZoom();\r\n      context.translate(sceneState.scrollX, sceneState.scrollY);\r\n      const handlers = handlerRectangles(selectedElements[0], sceneState.zoom);\r\n      Object.values(handlers)\r\n        .filter(handler => handler !== undefined)\r\n        .forEach(handler => {\r\n          context.strokeRect(handler[0], handler[1], handler[2], handler[3]);\r\n        });\r\n      context.restore();\r\n    }\r\n  }\r\n\r\n  // Paint scrollbars\r\n  if (renderScrollbars) {\r\n    const scrollBars = getScrollBars(\r\n      elements,\r\n      normalizedCanvasWidth,\r\n      normalizedCanvasHeight,\r\n      sceneState,\r\n    );\r\n\r\n    context.save();\r\n    context.fillStyle = SCROLLBAR_COLOR;\r\n    context.strokeStyle = \"rgba(255,255,255,0.8)\";\r\n    [scrollBars.horizontal, scrollBars.vertical].forEach(scrollBar => {\r\n      if (scrollBar) {\r\n        roundRect(\r\n          context,\r\n          scrollBar.x,\r\n          scrollBar.y,\r\n          scrollBar.width,\r\n          scrollBar.height,\r\n          SCROLLBAR_WIDTH / 2,\r\n        );\r\n      }\r\n    });\r\n    context.restore();\r\n  }\r\n\r\n  return visibleElements.length > 0;\r\n}\r\n\r\nfunction isVisibleElement(\r\n  element: ExcalidrawElement,\r\n  viewportWidth: number,\r\n  viewportHeight: number,\r\n  {\r\n    scrollX,\r\n    scrollY,\r\n    zoom,\r\n  }: {\r\n    scrollX: number;\r\n    scrollY: number;\r\n    zoom: number;\r\n  },\r\n) {\r\n  const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\r\n\r\n  // Apply zoom\r\n  const viewportWidthWithZoom = viewportWidth / zoom;\r\n  const viewportHeightWithZoom = viewportHeight / zoom;\r\n\r\n  const viewportWidthDiff = viewportWidth - viewportWidthWithZoom;\r\n  const viewportHeightDiff = viewportHeight - viewportHeightWithZoom;\r\n\r\n  return (\r\n    x2 + scrollX - viewportWidthDiff / 2 >= 0 &&\r\n    x1 + scrollX - viewportWidthDiff / 2 <= viewportWidthWithZoom &&\r\n    y2 + scrollY - viewportHeightDiff / 2 >= 0 &&\r\n    y1 + scrollY - viewportHeightDiff / 2 <= viewportHeightWithZoom\r\n  );\r\n}\r\n\r\n// This should be only called for exporting purposes\r\nexport function renderSceneToSvg(\r\n  elements: readonly ExcalidrawElement[],\r\n  rsvg: RoughSVG,\r\n  svgRoot: SVGElement,\r\n  {\r\n    offsetX = 0,\r\n    offsetY = 0,\r\n  }: {\r\n    offsetX?: number;\r\n    offsetY?: number;\r\n  } = {},\r\n) {\r\n  if (!svgRoot) {\r\n    return;\r\n  }\r\n  // render elements\r\n  elements.forEach(element => {\r\n    renderElementToSvg(\r\n      element,\r\n      rsvg,\r\n      svgRoot,\r\n      element.x + offsetX,\r\n      element.y + offsetY,\r\n    );\r\n  });\r\n}\r\n\r\nfunction getContextTransformScaleX(transform: DOMMatrix): number {\r\n  return transform.a;\r\n}\r\nfunction getContextTransformScaleY(transform: DOMMatrix): number {\r\n  return transform.d;\r\n}\r\nfunction getContextTransformTranslateX(transform: DOMMatrix): number {\r\n  return transform.e;\r\n}\r\nfunction getContextTransformTranslateY(transform: DOMMatrix): number {\r\n  return transform.f;\r\n}\r\n","import rough from \"roughjs/bin/rough\";\r\nimport { ExcalidrawElement } from \"../element/types\";\r\nimport { getCommonBounds } from \"../element/bounds\";\r\nimport { renderScene, renderSceneToSvg } from \"../renderer/renderScene\";\r\nimport { distance, SVG_NS } from \"../utils\";\r\n\r\nexport function exportToCanvas(\r\n  elements: readonly ExcalidrawElement[],\r\n  {\r\n    exportBackground,\r\n    exportPadding = 10,\r\n    viewBackgroundColor,\r\n    scale = 1,\r\n  }: {\r\n    exportBackground: boolean;\r\n    exportPadding?: number;\r\n    scale?: number;\r\n    viewBackgroundColor: string;\r\n  },\r\n  createCanvas: (width: number, height: number) => any = function(\r\n    width,\r\n    height,\r\n  ) {\r\n    const tempCanvas = document.createElement(\"canvas\");\r\n    tempCanvas.width = width * scale;\r\n    tempCanvas.height = height * scale;\r\n    return tempCanvas;\r\n  },\r\n) {\r\n  // calculate smallest area to fit the contents in\r\n  const [minX, minY, maxX, maxY] = getCommonBounds(elements);\r\n  const width = distance(minX, maxX) + exportPadding * 2;\r\n  const height = distance(minY, maxY) + exportPadding * 2;\r\n\r\n  const tempCanvas: any = createCanvas(width, height);\r\n  tempCanvas.getContext(\"2d\")?.scale(scale, scale);\r\n\r\n  renderScene(\r\n    elements,\r\n    null,\r\n    rough.canvas(tempCanvas),\r\n    tempCanvas,\r\n    {\r\n      viewBackgroundColor: exportBackground ? viewBackgroundColor : null,\r\n      scrollX: 0,\r\n      scrollY: 0,\r\n      zoom: 1,\r\n    },\r\n    {\r\n      offsetX: -minX + exportPadding,\r\n      offsetY: -minY + exportPadding,\r\n      renderScrollbars: false,\r\n      renderSelection: false,\r\n    },\r\n  );\r\n  return tempCanvas;\r\n}\r\n\r\nexport function exportToSvg(\r\n  elements: readonly ExcalidrawElement[],\r\n  {\r\n    exportBackground,\r\n    exportPadding = 10,\r\n    viewBackgroundColor,\r\n  }: {\r\n    exportBackground: boolean;\r\n    exportPadding?: number;\r\n    viewBackgroundColor: string;\r\n  },\r\n): SVGSVGElement {\r\n  // calculate canvas dimensions\r\n  const [minX, minY, maxX, maxY] = getCommonBounds(elements);\r\n  const width = distance(minX, maxX) + exportPadding * 2;\r\n  const height = distance(minY, maxY) + exportPadding * 2;\r\n\r\n  // initialze SVG root\r\n  const svgRoot = document.createElementNS(SVG_NS, \"svg\");\r\n  svgRoot.setAttribute(\"version\", \"1.1\");\r\n  svgRoot.setAttribute(\"xmlns\", SVG_NS);\r\n  svgRoot.setAttribute(\"viewBox\", `0 0 ${width} ${height}`);\r\n\r\n  svgRoot.innerHTML = `\r\n  <defs>\r\n    <style>\r\n      @font-face {\r\n        font-family: \"Virgil\";\r\n        src: url(\"https://excalidraw.com/FG_Virgil.ttf\");\r\n      }\r\n      @font-face {\r\n        font-family: \"Cascadia\";\r\n        src: url(\"https://excalidraw.com/Cascadia.ttf\");\r\n      }\r\n    </style>\r\n  </defs>\r\n  `;\r\n\r\n  // render backgroiund rect\r\n  if (exportBackground && viewBackgroundColor) {\r\n    const rect = svgRoot.ownerDocument!.createElementNS(SVG_NS, \"rect\");\r\n    rect.setAttribute(\"x\", \"0\");\r\n    rect.setAttribute(\"y\", \"0\");\r\n    rect.setAttribute(\"width\", `${width}`);\r\n    rect.setAttribute(\"height\", `${height}`);\r\n    rect.setAttribute(\"fill\", viewBackgroundColor);\r\n    svgRoot.appendChild(rect);\r\n  }\r\n\r\n  const rsvg = rough.svg(svgRoot);\r\n  renderSceneToSvg(elements, rsvg, svgRoot, {\r\n    offsetX: -minX + exportPadding,\r\n    offsetY: -minY + exportPadding,\r\n  });\r\n  return svgRoot;\r\n}\r\n","import LanguageDetector from \"i18next-browser-languagedetector\";\r\n\r\nexport const languages = [\r\n  { lng: \"en\", label: \"English\", data: require(\"./locales/en.json\") },\r\n  { lng: \"de\", label: \"Deutsch\", data: require(\"./locales/de.json\") },\r\n  { lng: \"es\", label: \"Español\", data: require(\"./locales/es.json\") },\r\n  { lng: \"fr\", label: \"Français\", data: require(\"./locales/fr.json\") },\r\n  {\r\n    lng: \"nb-no\",\r\n    label: \"Norsk Bokmål\",\r\n    data: require(\"./locales/nb-no.json\"),\r\n  },\r\n  { lng: \"pl\", label: \"Polski\", data: require(\"./locales/pl.json\") },\r\n  { lng: \"pt\", label: \"Português\", data: require(\"./locales/pt.json\") },\r\n  { lng: \"ru\", label: \"Русский\", data: require(\"./locales/ru.json\") },\r\n];\r\n\r\nlet currentLanguage = languages[0];\r\nconst fallbackLanguage = languages[0];\r\n\r\nexport function setLanguage(newLng: string | undefined) {\r\n  currentLanguage =\r\n    languages.find(language => language.lng === newLng) || fallbackLanguage;\r\n\r\n  languageDetector.cacheUserLanguage(currentLanguage.lng);\r\n}\r\n\r\nexport function getLanguage() {\r\n  return currentLanguage.lng;\r\n}\r\n\r\nfunction findPartsForData(data: any, parts: string[]) {\r\n  for (var i = 0; i < parts.length; ++i) {\r\n    const part = parts[i];\r\n    if (data[part] === undefined) {\r\n      return undefined;\r\n    }\r\n    data = data[part];\r\n  }\r\n  if (typeof data !== \"string\") {\r\n    return undefined;\r\n  }\r\n  return data;\r\n}\r\n\r\nexport function t(path: string, replacement?: { [key: string]: string }) {\r\n  const parts = path.split(\".\");\r\n  let translation =\r\n    findPartsForData(currentLanguage.data, parts) ||\r\n    findPartsForData(fallbackLanguage.data, parts);\r\n  if (translation === undefined) {\r\n    throw new Error(`Can't find translation for ${path}`);\r\n  }\r\n\r\n  if (replacement) {\r\n    for (var key in replacement) {\r\n      translation = translation.replace(`{{${key}}}`, replacement[key]);\r\n    }\r\n  }\r\n  return translation;\r\n}\r\n\r\nconst languageDetector = new LanguageDetector();\r\nlanguageDetector.init({\r\n  languageUtils: {\r\n    formatLanguageCode: function(lng: string) {\r\n      return lng;\r\n    },\r\n    isWhitelisted: () => true,\r\n  },\r\n  checkWhitelist: false,\r\n});\r\n\r\nsetLanguage(languageDetector.detect());\r\n","import { ExcalidrawElement } from \"./element/types\";\r\nimport { getSelectedElements } from \"./scene\";\r\n\r\nlet CLIPBOARD = \"\";\r\nlet PREFER_APP_CLIPBOARD = false;\r\n\r\nexport const probablySupportsClipboardReadText =\r\n  \"clipboard\" in navigator && \"readText\" in navigator.clipboard;\r\n\r\nexport const probablySupportsClipboardWriteText =\r\n  \"clipboard\" in navigator && \"writeText\" in navigator.clipboard;\r\n\r\nexport const probablySupportsClipboardBlob =\r\n  \"clipboard\" in navigator &&\r\n  \"write\" in navigator.clipboard &&\r\n  \"ClipboardItem\" in window &&\r\n  \"toBlob\" in HTMLCanvasElement.prototype;\r\n\r\nexport async function copyToAppClipboard(\r\n  elements: readonly ExcalidrawElement[],\r\n) {\r\n  CLIPBOARD = JSON.stringify(\r\n    getSelectedElements(elements).map(({ shape, ...el }) => el),\r\n  );\r\n  try {\r\n    // when copying to in-app clipboard, clear system clipboard so that if\r\n    //  system clip contains text on paste we know it was copied *after* user\r\n    //  copied elements, and thus we should prefer the text content.\r\n    await copyTextToSystemClipboard(null);\r\n    PREFER_APP_CLIPBOARD = false;\r\n  } catch (err) {\r\n    // if clearing system clipboard didn't work, we should prefer in-app\r\n    //  clipboard even if there's text in system clipboard on paste, because\r\n    //  we can't be sure of the order of copy operations\r\n    PREFER_APP_CLIPBOARD = true;\r\n  }\r\n}\r\n\r\nexport function getAppClipboard(): {\r\n  elements?: readonly ExcalidrawElement[];\r\n} {\r\n  try {\r\n    const clipboardElements = JSON.parse(CLIPBOARD);\r\n\r\n    if (\r\n      Array.isArray(clipboardElements) &&\r\n      clipboardElements.length > 0 &&\r\n      clipboardElements[0].type // need to implement a better check here...\r\n    ) {\r\n      return { elements: clipboardElements };\r\n    }\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n\r\n  return {};\r\n}\r\n\r\nexport async function getClipboardContent(\r\n  e: ClipboardEvent | null,\r\n): Promise<{\r\n  text?: string;\r\n  elements?: readonly ExcalidrawElement[];\r\n}> {\r\n  try {\r\n    const text = e\r\n      ? e.clipboardData?.getData(\"text/plain\").trim()\r\n      : probablySupportsClipboardReadText &&\r\n        (await navigator.clipboard.readText());\r\n\r\n    if (text && !PREFER_APP_CLIPBOARD) {\r\n      return { text };\r\n    }\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n\r\n  return getAppClipboard();\r\n}\r\n\r\nexport async function copyCanvasToClipboardAsPng(canvas: HTMLCanvasElement) {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      canvas.toBlob(async function(blob: any) {\r\n        try {\r\n          await navigator.clipboard.write([\r\n            new window.ClipboardItem({ \"image/png\": blob }),\r\n          ]);\r\n          resolve();\r\n        } catch (err) {\r\n          reject(err);\r\n        }\r\n      });\r\n    } catch (err) {\r\n      reject(err);\r\n    }\r\n  });\r\n}\r\n\r\nexport async function copyTextToSystemClipboard(text: string | null) {\r\n  let copied = false;\r\n  if (probablySupportsClipboardWriteText) {\r\n    try {\r\n      // NOTE: doesn't work on FF on non-HTTPS domains, or when document\r\n      //  not focused\r\n      await navigator.clipboard.writeText(text || \"\");\r\n      copied = true;\r\n    } catch (err) {}\r\n  }\r\n\r\n  // Note that execCommand doesn't allow copying empty strings, so if we're\r\n  //  clearing clipboard using this API, we must copy at least an empty char\r\n  if (!copied && !copyTextViaExecCommand(text || \" \")) {\r\n    throw new Error(\"couldn't copy\");\r\n  }\r\n}\r\n\r\n// adapted from https://github.com/zenorocha/clipboard.js/blob/ce79f170aa655c408b6aab33c9472e8e4fa52e19/src/clipboard-action.js#L48\r\nfunction copyTextViaExecCommand(text: string) {\r\n  const isRTL = document.documentElement.getAttribute(\"dir\") === \"rtl\";\r\n\r\n  const textarea = document.createElement(\"textarea\");\r\n\r\n  textarea.style.border = \"0\";\r\n  textarea.style.padding = \"0\";\r\n  textarea.style.margin = \"0\";\r\n  textarea.style.position = \"absolute\";\r\n  textarea.style[isRTL ? \"right\" : \"left\"] = \"-9999px\";\r\n  const yPosition = window.pageYOffset || document.documentElement.scrollTop;\r\n  textarea.style.top = `${yPosition}px`;\r\n  // Prevent zooming on iOS\r\n  textarea.style.fontSize = \"12pt\";\r\n\r\n  textarea.setAttribute(\"readonly\", \"\");\r\n  textarea.value = text;\r\n\r\n  document.body.appendChild(textarea);\r\n\r\n  let success = false;\r\n\r\n  try {\r\n    textarea.select();\r\n    textarea.setSelectionRange(0, textarea.value.length);\r\n\r\n    success = document.execCommand(\"copy\");\r\n  } catch (err) {}\r\n\r\n  textarea.remove();\r\n\r\n  return success;\r\n}\r\n","import { ExcalidrawElement } from \"../element/types\";\r\n\r\nimport {\r\n  getDefaultAppState,\r\n  cleanAppStateForExport,\r\n  clearAppStateForLocalStorage,\r\n} from \"../appState\";\r\n\r\nimport { AppState } from \"../types\";\r\nimport { ExportType } from \"./types\";\r\nimport { exportToCanvas, exportToSvg } from \"./export\";\r\nimport nanoid from \"nanoid\";\r\nimport { fileOpen, fileSave } from \"browser-nativefs\";\r\nimport {\r\n  getCommonBounds,\r\n  normalizeDimensions,\r\n  isInvisiblySmallElement,\r\n} from \"../element\";\r\n\r\nimport { Point } from \"roughjs/bin/geometry\";\r\nimport { t } from \"../i18n\";\r\nimport { copyCanvasToClipboardAsPng } from \"../clipboard\";\r\n\r\nconst LOCAL_STORAGE_KEY = \"excalidraw\";\r\nconst LOCAL_STORAGE_KEY_STATE = \"excalidraw-state\";\r\n\r\n// TODO: Defined globally, since file handles aren't yet serializable.\r\n// Once `FileSystemFileHandle` can be serialized, make this\r\n// part of `AppState`.\r\n(window as any).handle = null;\r\n\r\ninterface DataState {\r\n  type?: string;\r\n  version?: string;\r\n  source?: string;\r\n  elements: readonly ExcalidrawElement[];\r\n  appState: AppState | null;\r\n  selectedId?: number;\r\n}\r\n\r\nexport function serializeAsJSON(\r\n  elements: readonly ExcalidrawElement[],\r\n  appState: AppState,\r\n): string {\r\n  return JSON.stringify(\r\n    {\r\n      type: \"excalidraw\",\r\n      version: 1,\r\n      source: window.location.origin,\r\n      elements: elements.map(({ shape, isSelected, ...el }) => el),\r\n      appState: cleanAppStateForExport(appState),\r\n    },\r\n    null,\r\n    2,\r\n  );\r\n}\r\n\r\nexport function calculateScrollCenter(\r\n  elements: readonly ExcalidrawElement[],\r\n): { scrollX: number; scrollY: number } {\r\n  const [x1, y1, x2, y2] = getCommonBounds(elements);\r\n\r\n  const centerX = (x1 + x2) / 2;\r\n  const centerY = (y1 + y2) / 2;\r\n\r\n  return {\r\n    scrollX: window.innerWidth / 2 - centerX,\r\n    scrollY: window.innerHeight / 2 - centerY,\r\n  };\r\n}\r\n\r\nexport async function saveAsJSON(\r\n  elements: readonly ExcalidrawElement[],\r\n  appState: AppState,\r\n) {\r\n  const serialized = serializeAsJSON(elements, appState);\r\n\r\n  const name = `${appState.name}.json`;\r\n  await fileSave(\r\n    new Blob([serialized], { type: \"application/json\" }),\r\n    {\r\n      fileName: name,\r\n      description: \"Excalidraw file\",\r\n    },\r\n    (window as any).handle,\r\n  );\r\n}\r\nexport async function loadFromJSON() {\r\n  const blob = await fileOpen({\r\n    description: \"Excalidraw files\",\r\n    extensions: [\"json\"],\r\n    mimeTypes: [\"application/json\"],\r\n  });\r\n  return loadFromBlob(blob);\r\n}\r\n\r\nexport async function loadFromBlob(blob: any) {\r\n  const updateAppState = (contents: string) => {\r\n    const defaultAppState = getDefaultAppState();\r\n    let elements = [];\r\n    let appState = defaultAppState;\r\n    try {\r\n      const data = JSON.parse(contents);\r\n      if (data.type !== \"excalidraw\") {\r\n        throw new Error(\"Cannot load invalid json\");\r\n      }\r\n      elements = data.elements || [];\r\n      appState = { ...defaultAppState, ...data.appState };\r\n    } catch (e) {\r\n      // Do nothing because elements array is already empty\r\n    }\r\n    return { elements, appState };\r\n  };\r\n\r\n  if (blob.handle) {\r\n    (window as any).handle = blob.handle;\r\n  }\r\n  let contents;\r\n  if (\"text\" in Blob) {\r\n    contents = await blob.text();\r\n  } else {\r\n    contents = await new Promise(resolve => {\r\n      const reader = new FileReader();\r\n      reader.readAsText(blob, \"utf8\");\r\n      reader.onloadend = () => {\r\n        if (reader.readyState === FileReader.DONE) {\r\n          resolve(reader.result as string);\r\n        }\r\n      };\r\n    });\r\n  }\r\n  const { elements, appState } = updateAppState(contents);\r\n  if (!elements.length) {\r\n    return Promise.reject(\"Cannot load invalid json\");\r\n  }\r\n  return new Promise<DataState>(resolve => {\r\n    resolve(restore(elements, appState, { scrollToContent: true }));\r\n  });\r\n}\r\n\r\nexport async function exportCanvas(\r\n  type: ExportType,\r\n  elements: readonly ExcalidrawElement[],\r\n  canvas: HTMLCanvasElement,\r\n  {\r\n    exportBackground,\r\n    exportPadding = 10,\r\n    viewBackgroundColor,\r\n    name,\r\n    scale = 1,\r\n  }: {\r\n    exportBackground: boolean;\r\n    exportPadding?: number;\r\n    viewBackgroundColor: string;\r\n    name: string;\r\n    scale?: number;\r\n  },\r\n) {\r\n  if (!elements.length) {\r\n    return window.alert(t(\"alerts.cannotExportEmptyCanvas\"));\r\n  }\r\n  // calculate smallest area to fit the contents in\r\n\r\n  if (type === \"svg\") {\r\n    const tempSvg = exportToSvg(elements, {\r\n      exportBackground,\r\n      viewBackgroundColor,\r\n      exportPadding,\r\n    });\r\n    await fileSave(new Blob([tempSvg.outerHTML], { type: \"image/svg+xml\" }), {\r\n      fileName: `${name}.svg`,\r\n    });\r\n    return;\r\n  }\r\n\r\n  const tempCanvas = exportToCanvas(elements, {\r\n    exportBackground,\r\n    viewBackgroundColor,\r\n    exportPadding,\r\n    scale,\r\n  });\r\n  tempCanvas.style.display = \"none\";\r\n  document.body.appendChild(tempCanvas);\r\n\r\n  if (type === \"png\") {\r\n    const fileName = `${name}.png`;\r\n    tempCanvas.toBlob(async (blob: any) => {\r\n      if (blob) {\r\n        await fileSave(blob, {\r\n          fileName: fileName,\r\n        });\r\n      }\r\n    });\r\n  } else if (type === \"clipboard\") {\r\n    try {\r\n      copyCanvasToClipboardAsPng(tempCanvas);\r\n    } catch (err) {\r\n      window.alert(t(\"alerts.couldNotCopyToClipboard\"));\r\n    }\r\n  }\r\n\r\n  // clean up the DOM\r\n  if (tempCanvas !== canvas) {\r\n    tempCanvas.remove();\r\n  }\r\n}\r\n\r\nfunction restore(\r\n  savedElements: readonly ExcalidrawElement[],\r\n  savedState: AppState | null,\r\n  opts?: { scrollToContent: boolean },\r\n): DataState {\r\n  const elements = savedElements\r\n    .filter(el => !isInvisiblySmallElement(el))\r\n    .map(element => {\r\n      let points: Point[] = [];\r\n      if (element.type === \"arrow\") {\r\n        if (Array.isArray(element.points)) {\r\n          // if point array is empty, add one point to the arrow\r\n          // this is used as fail safe to convert incoming data to a valid\r\n          // arrow. In the new arrow, width and height are not being usde\r\n          points = element.points.length > 0 ? element.points : [[0, 0]];\r\n        } else {\r\n          // convert old arrow type to a new one\r\n          // old arrow spec used width and height\r\n          // to determine the endpoints\r\n          points = [\r\n            [0, 0],\r\n            [element.width, element.height],\r\n          ];\r\n        }\r\n      } else if (element.type === \"line\") {\r\n        // old spec, pre-arrows\r\n        // old spec, post-arrows\r\n        if (!Array.isArray(element.points) || element.points.length === 0) {\r\n          points = [\r\n            [0, 0],\r\n            [element.width, element.height],\r\n          ];\r\n        } else {\r\n          points = element.points;\r\n        }\r\n      } else {\r\n        normalizeDimensions(element);\r\n      }\r\n\r\n      return {\r\n        ...element,\r\n        id: element.id || nanoid(),\r\n        fillStyle: element.fillStyle || \"hachure\",\r\n        strokeWidth: element.strokeWidth || 1,\r\n        roughness: element.roughness || 1,\r\n        opacity:\r\n          element.opacity === null || element.opacity === undefined\r\n            ? 100\r\n            : element.opacity,\r\n        points,\r\n      };\r\n    });\r\n\r\n  if (opts?.scrollToContent && savedState) {\r\n    savedState = { ...savedState, ...calculateScrollCenter(elements) };\r\n  }\r\n\r\n  return {\r\n    elements: elements,\r\n    appState: savedState,\r\n  };\r\n}\r\n\r\nexport function restoreFromLocalStorage() {\r\n  const savedElements = localStorage.getItem(LOCAL_STORAGE_KEY);\r\n  const savedState = localStorage.getItem(LOCAL_STORAGE_KEY_STATE);\r\n\r\n  let elements = [];\r\n  if (savedElements) {\r\n    try {\r\n      elements = JSON.parse(savedElements).map(\r\n        ({ shape, ...element }: ExcalidrawElement) => element,\r\n      );\r\n    } catch (e) {\r\n      // Do nothing because elements array is already empty\r\n    }\r\n  }\r\n\r\n  let appState = null;\r\n  if (savedState) {\r\n    try {\r\n      appState = JSON.parse(savedState) as AppState;\r\n    } catch (e) {\r\n      // Do nothing because appState is already null\r\n    }\r\n  }\r\n\r\n  return restore(elements, appState);\r\n}\r\n\r\nexport function saveToLocalStorage(\r\n  elements: readonly ExcalidrawElement[],\r\n  appState: AppState,\r\n) {\r\n  localStorage.setItem(\r\n    LOCAL_STORAGE_KEY,\r\n    JSON.stringify(\r\n      elements.map(({ shape, ...element }: ExcalidrawElement) => element),\r\n    ),\r\n  );\r\n  localStorage.setItem(\r\n    LOCAL_STORAGE_KEY_STATE,\r\n    JSON.stringify(clearAppStateForLocalStorage(appState)),\r\n  );\r\n}\r\n\r\nexport async function loadScene() {\r\n  const data = restoreFromLocalStorage();\r\n\r\n  return {\r\n    elements: data.elements,\r\n    appState: data.appState && { ...data.appState, undefined },\r\n  };\r\n}\r\n","import { ExcalidrawElement } from \"../element/types\";\r\n\r\nimport { getElementAbsoluteCoords, hitTest } from \"../element\";\r\n\r\nexport const hasBackground = (type: string) =>\r\n  type === \"rectangle\" || type === \"ellipse\" || type === \"diamond\";\r\n\r\nexport const hasStroke = (type: string) =>\r\n  type === \"rectangle\" ||\r\n  type === \"ellipse\" ||\r\n  type === \"diamond\" ||\r\n  type === \"arrow\" ||\r\n  type === \"line\";\r\n\r\nexport const hasText = (type: string) => type === \"text\";\r\n\r\nexport function getElementAtPosition(\r\n  elements: readonly ExcalidrawElement[],\r\n  x: number,\r\n  y: number,\r\n  zoom: number,\r\n) {\r\n  let hitElement = null;\r\n  // We need to to hit testing from front (end of the array) to back (beginning of the array)\r\n  for (let i = elements.length - 1; i >= 0; --i) {\r\n    if (hitTest(elements[i], x, y, zoom)) {\r\n      hitElement = elements[i];\r\n      break;\r\n    }\r\n  }\r\n\r\n  return hitElement;\r\n}\r\n\r\nexport function getElementContainingPosition(\r\n  elements: readonly ExcalidrawElement[],\r\n  x: number,\r\n  y: number,\r\n) {\r\n  let hitElement = null;\r\n  // We need to to hit testing from front (end of the array) to back (beginning of the array)\r\n  for (let i = elements.length - 1; i >= 0; --i) {\r\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(elements[i]);\r\n    if (x1 < x && x < x2 && y1 < y && y < y2) {\r\n      hitElement = elements[i];\r\n      break;\r\n    }\r\n  }\r\n  return hitElement;\r\n}\r\n","import { ExcalidrawElement } from \"../element/types\";\r\n\r\nexport const createScene = () => {\r\n  const elements: readonly ExcalidrawElement[] = [];\r\n  return { elements };\r\n};\r\n","import React from \"react\";\r\n\r\n// We inline font-awesome icons in order to save on js size rather than including the font awesome react library\r\nexport const SHAPES = [\r\n  {\r\n    icon: (\r\n      // fa-mouse-pointer\r\n      <svg viewBox=\"0 0 320 512\">\r\n        <path d=\"M302.189 329.126H196.105l55.831 135.993c3.889 9.428-.555 19.999-9.444 23.999l-49.165 21.427c-9.165 4-19.443-.571-23.332-9.714l-53.053-129.136-86.664 89.138C18.729 472.71 0 463.554 0 447.977V18.299C0 1.899 19.921-6.096 30.277 5.443l284.412 292.542c11.472 11.179 3.007 31.141-12.5 31.141z\" />\r\n      </svg>\r\n    ),\r\n    value: \"selection\",\r\n  },\r\n  {\r\n    icon: (\r\n      // fa-square\r\n      <svg viewBox=\"0 0 448 512\">\r\n        <path d=\"M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z\" />\r\n      </svg>\r\n    ),\r\n    value: \"rectangle\",\r\n  },\r\n  {\r\n    icon: (\r\n      // custom\r\n      <svg viewBox=\"0 0 223.646 223.646\">\r\n        <path d=\"M111.823 0L16.622 111.823 111.823 223.646 207.025 111.823z\" />\r\n      </svg>\r\n    ),\r\n    value: \"diamond\",\r\n  },\r\n  {\r\n    icon: (\r\n      // fa-circle\r\n      <svg viewBox=\"0 0 512 512\">\r\n        <path d=\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8z\" />\r\n      </svg>\r\n    ),\r\n    value: \"ellipse\",\r\n  },\r\n  {\r\n    icon: (\r\n      // fa-long-arrow-alt-right\r\n      <svg viewBox=\"0 0 448 512\">\r\n        <path d=\"M313.941 216H12c-6.627 0-12 5.373-12 12v56c0 6.627 5.373 12 12 12h301.941v46.059c0 21.382 25.851 32.09 40.971 16.971l86.059-86.059c9.373-9.373 9.373-24.569 0-33.941l-86.059-86.059c-15.119-15.119-40.971-4.411-40.971 16.971V216z\" />\r\n      </svg>\r\n    ),\r\n    value: \"arrow\",\r\n  },\r\n  {\r\n    icon: (\r\n      // custom\r\n      <svg viewBox=\"0 0 6 6\">\r\n        <line x1=\"0\" y1=\"3\" x2=\"6\" y2=\"3\" stroke=\"#000\" strokeLinecap=\"round\" />\r\n      </svg>\r\n    ),\r\n    value: \"line\",\r\n  },\r\n  {\r\n    icon: (\r\n      // fa-font\r\n      <svg viewBox=\"0 0 448 512\">\r\n        <path d=\"M432 416h-23.41L277.88 53.69A32 32 0 0 0 247.58 32h-47.16a32 32 0 0 0-30.3 21.69L39.41 416H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-19.58l23.3-64h152.56l23.3 64H304a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM176.85 272L224 142.51 271.15 272z\" />\r\n      </svg>\r\n    ),\r\n    value: \"text\",\r\n  },\r\n] as const;\r\n\r\nexport const shapesShortcutKeys = SHAPES.map((shape, index) => [\r\n  shape.value[0],\r\n  (index + 1).toString(),\r\n]).flat(1);\r\n\r\nexport function findShapeByKey(key: string) {\r\n  return (\r\n    SHAPES.find((shape, index) => {\r\n      return shape.value[0] === key || key === (index + 1).toString();\r\n    })?.value || \"selection\"\r\n  );\r\n}\r\n","import { AppState } from \"./types\";\r\nimport { ExcalidrawElement } from \"./element/types\";\r\nimport { clearAppStatePropertiesForHistory } from \"./appState\";\r\n\r\nclass SceneHistory {\r\n  private recording: boolean = true;\r\n  private stateHistory: string[] = [];\r\n  private redoStack: string[] = [];\r\n\r\n  private generateEntry(\r\n    appState: AppState,\r\n    elements: readonly ExcalidrawElement[],\r\n  ) {\r\n    return JSON.stringify({\r\n      appState: clearAppStatePropertiesForHistory(appState),\r\n      elements: elements.map(({ shape, ...element }) => ({\r\n        ...element,\r\n        shape: null,\r\n        points:\r\n          appState.multiElement && appState.multiElement.id === element.id\r\n            ? element.points.slice(0, -1)\r\n            : element.points,\r\n      })),\r\n    });\r\n  }\r\n\r\n  pushEntry(appState: AppState, elements: readonly ExcalidrawElement[]) {\r\n    const newEntry = this.generateEntry(appState, elements);\r\n    if (\r\n      this.stateHistory.length > 0 &&\r\n      this.stateHistory[this.stateHistory.length - 1] === newEntry\r\n    ) {\r\n      // If the last entry is the same as this one, ignore it\r\n      return;\r\n    }\r\n\r\n    this.stateHistory.push(newEntry);\r\n\r\n    // As a new entry was pushed, we invalidate the redo stack\r\n    this.clearRedoStack();\r\n  }\r\n\r\n  restoreEntry(entry: string) {\r\n    try {\r\n      return JSON.parse(entry);\r\n    } catch {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  clearRedoStack() {\r\n    this.redoStack.splice(0, this.redoStack.length);\r\n  }\r\n\r\n  redoOnce() {\r\n    if (this.redoStack.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    const entryToRestore = this.redoStack.pop();\r\n\r\n    if (entryToRestore !== undefined) {\r\n      this.stateHistory.push(entryToRestore);\r\n      return this.restoreEntry(entryToRestore);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  undoOnce() {\r\n    if (this.stateHistory.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    const currentEntry = this.stateHistory.pop();\r\n\r\n    const entryToRestore = this.stateHistory[this.stateHistory.length - 1];\r\n\r\n    if (currentEntry !== undefined) {\r\n      this.redoStack.push(currentEntry);\r\n      return this.restoreEntry(entryToRestore);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  isRecording() {\r\n    return this.recording;\r\n  }\r\n\r\n  skipRecording() {\r\n    this.recording = false;\r\n  }\r\n\r\n  resumeRecording() {\r\n    this.recording = true;\r\n  }\r\n}\r\n\r\nexport const createHistory: () => { history: SceneHistory } = () => {\r\n  const history = new SceneHistory();\r\n  return { history };\r\n};\r\n","import React, { useLayoutEffect, useRef } from \"react\";\r\nimport \"./Popover.css\";\r\n\r\ntype Props = {\r\n  top?: number;\r\n  left?: number;\r\n  children?: React.ReactNode;\r\n  onCloseRequest?(): void;\r\n  fitInViewport?: boolean;\r\n};\r\n\r\nexport function Popover({\r\n  children,\r\n  left,\r\n  top,\r\n  onCloseRequest,\r\n  fitInViewport = false,\r\n}: Props) {\r\n  const popoverRef = useRef<HTMLDivElement>(null);\r\n\r\n  // ensure the popover doesn't overflow the viewport\r\n  useLayoutEffect(() => {\r\n    if (fitInViewport && popoverRef.current) {\r\n      const element = popoverRef.current;\r\n      const { x, y, width, height } = element.getBoundingClientRect();\r\n\r\n      const viewportWidth = window.innerWidth;\r\n      if (x + width > viewportWidth) {\r\n        element.style.left = `${viewportWidth - width}px`;\r\n      }\r\n      const viewportHeight = window.innerHeight;\r\n      if (y + height > viewportHeight) {\r\n        element.style.top = `${viewportHeight - height}px`;\r\n      }\r\n    }\r\n  }, [fitInViewport]);\r\n\r\n  return (\r\n    <div className=\"popover\" style={{ top: top, left: left }} ref={popoverRef}>\r\n      <div\r\n        className=\"cover\"\r\n        onClick={onCloseRequest}\r\n        onContextMenu={e => {\r\n          e.preventDefault();\r\n          if (onCloseRequest) {\r\n            onCloseRequest();\r\n          }\r\n        }}\r\n      />\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Popover } from \"./Popover\";\r\nimport { render, unmountComponentAtNode } from \"react-dom\";\r\n\r\nimport \"./ContextMenu.css\";\r\n\r\ntype ContextMenuOption = {\r\n  label: string;\r\n  action(): void;\r\n};\r\n\r\ntype Props = {\r\n  options: ContextMenuOption[];\r\n  onCloseRequest?(): void;\r\n  top: number;\r\n  left: number;\r\n};\r\n\r\nfunction ContextMenu({ options, onCloseRequest, top, left }: Props) {\r\n  return (\r\n    <Popover\r\n      onCloseRequest={onCloseRequest}\r\n      top={top}\r\n      left={left}\r\n      fitInViewport={true}\r\n    >\r\n      <ul className=\"context-menu\" onContextMenu={e => e.preventDefault()}>\r\n        {options.map((option, idx) => (\r\n          <li key={idx} onClick={onCloseRequest}>\r\n            <ContextMenuOption {...option} />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </Popover>\r\n  );\r\n}\r\n\r\nfunction ContextMenuOption({ label, action }: ContextMenuOption) {\r\n  return (\r\n    <button className=\"context-menu-option\" onClick={action}>\r\n      {label}\r\n    </button>\r\n  );\r\n}\r\n\r\nlet contextMenuNode: HTMLDivElement;\r\nfunction getContextMenuNode(): HTMLDivElement {\r\n  if (contextMenuNode) {\r\n    return contextMenuNode;\r\n  }\r\n  const div = document.createElement(\"div\");\r\n  document.body.appendChild(div);\r\n  return (contextMenuNode = div);\r\n}\r\n\r\ntype ContextMenuParams = {\r\n  options: (ContextMenuOption | false | null | undefined)[];\r\n  top: number;\r\n  left: number;\r\n};\r\n\r\nfunction handleClose() {\r\n  unmountComponentAtNode(getContextMenuNode());\r\n}\r\n\r\nexport default {\r\n  push(params: ContextMenuParams) {\r\n    const options = Array.of<ContextMenuOption>();\r\n    params.options.forEach(option => {\r\n      if (option) {\r\n        options.push(option);\r\n      }\r\n    });\r\n    if (options.length) {\r\n      render(\r\n        <ContextMenu\r\n          top={params.top}\r\n          left={params.left}\r\n          options={options}\r\n          onCloseRequest={handleClose}\r\n        />,\r\n        getContextMenuNode(),\r\n      );\r\n    }\r\n  },\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  Action,\r\n  ActionsManagerInterface,\r\n  UpdaterFn,\r\n  ActionFilterFn,\r\n} from \"./types\";\r\nimport { ExcalidrawElement } from \"../element/types\";\r\nimport { AppState } from \"../types\";\r\nimport { t } from \"../i18n\";\r\n\r\nexport class ActionManager implements ActionsManagerInterface {\r\n  actions: { [keyProp: string]: Action } = {};\r\n\r\n  updater: UpdaterFn;\r\n\r\n  getAppState: () => AppState;\r\n\r\n  getElements: () => readonly ExcalidrawElement[];\r\n\r\n  constructor(\r\n    updater: UpdaterFn,\r\n    getAppState: () => AppState,\r\n    getElements: () => readonly ExcalidrawElement[],\r\n  ) {\r\n    this.updater = updater;\r\n    this.getAppState = getAppState;\r\n    this.getElements = getElements;\r\n  }\r\n\r\n  registerAction(action: Action) {\r\n    this.actions[action.name] = action;\r\n  }\r\n\r\n  handleKeyDown(event: KeyboardEvent) {\r\n    const data = Object.values(this.actions)\r\n      .sort((a, b) => (b.keyPriority || 0) - (a.keyPriority || 0))\r\n      .filter(\r\n        action =>\r\n          action.keyTest &&\r\n          action.keyTest(event, this.getAppState(), this.getElements()),\r\n      );\r\n\r\n    if (data.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    event.preventDefault();\r\n    const commitToHistory =\r\n      data[0].commitToHistory &&\r\n      data[0].commitToHistory(this.getAppState(), this.getElements());\r\n    this.updater(\r\n      data[0].perform(this.getElements(), this.getAppState(), null),\r\n      commitToHistory,\r\n    );\r\n    return true;\r\n  }\r\n\r\n  getContextMenuItems(actionFilter: ActionFilterFn = action => action) {\r\n    return Object.values(this.actions)\r\n      .filter(actionFilter)\r\n      .filter(action => \"contextItemLabel\" in action)\r\n      .sort(\r\n        (a, b) =>\r\n          (a.contextMenuOrder !== undefined ? a.contextMenuOrder : 999) -\r\n          (b.contextMenuOrder !== undefined ? b.contextMenuOrder : 999),\r\n      )\r\n      .map(action => ({\r\n        label: action.contextItemLabel ? t(action.contextItemLabel) : \"\",\r\n        action: () => {\r\n          const commitToHistory =\r\n            action.commitToHistory &&\r\n            action.commitToHistory(this.getAppState(), this.getElements());\r\n          this.updater(\r\n            action.perform(this.getElements(), this.getAppState(), null),\r\n            commitToHistory,\r\n          );\r\n        },\r\n      }));\r\n  }\r\n\r\n  renderAction(name: string) {\r\n    if (this.actions[name] && \"PanelComponent\" in this.actions[name]) {\r\n      const action = this.actions[name];\r\n      const PanelComponent = action.PanelComponent!;\r\n      const updateData = (formState: any) => {\r\n        const commitToHistory =\r\n          action.commitToHistory &&\r\n          action.commitToHistory(this.getAppState(), this.getElements());\r\n        this.updater(\r\n          action.perform(this.getElements(), this.getAppState(), formState),\r\n          commitToHistory,\r\n        );\r\n      };\r\n\r\n      return (\r\n        <PanelComponent\r\n          elements={this.getElements()}\r\n          appState={this.getAppState()}\r\n          updateData={updateData}\r\n        />\r\n      );\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n","import { Action } from \"./types\";\r\nimport { deleteSelectedElements, isSomeElementSelected } from \"../scene\";\r\nimport { KEYS } from \"../keys\";\r\n\r\nexport const actionDeleteSelected: Action = {\r\n  name: \"deleteSelectedElements\",\r\n  perform: (elements, appState) => {\r\n    return {\r\n      elements: deleteSelectedElements(elements),\r\n      appState: { ...appState, elementType: \"selection\", multiElement: null },\r\n    };\r\n  },\r\n  contextItemLabel: \"labels.delete\",\r\n  contextMenuOrder: 3,\r\n  commitToHistory: (_, elements) => isSomeElementSelected(elements),\r\n  keyTest: event => event.key === KEYS.BACKSPACE || event.key === KEYS.DELETE,\r\n};\r\n","function swap<T>(elements: T[], indexA: number, indexB: number) {\r\n  const element = elements[indexA];\r\n  elements[indexA] = elements[indexB];\r\n  elements[indexB] = element;\r\n}\r\n\r\nexport function moveOneLeft<T>(elements: T[], indicesToMove: number[]) {\r\n  indicesToMove.sort((a: number, b: number) => a - b);\r\n  let isSorted = true;\r\n  // We go from left to right to avoid overriding the wrong elements\r\n  indicesToMove.forEach((index, i) => {\r\n    // We don't want to bubble the first elements that are sorted as they are\r\n    // already in their correct position\r\n    isSorted = isSorted && index === i;\r\n    if (isSorted) {\r\n      return;\r\n    }\r\n    swap(elements, index - 1, index);\r\n  });\r\n\r\n  return elements;\r\n}\r\n\r\nexport function moveOneRight<T>(elements: T[], indicesToMove: number[]) {\r\n  const reversedIndicesToMove = indicesToMove.sort(\r\n    (a: number, b: number) => b - a,\r\n  );\r\n  let isSorted = true;\r\n\r\n  // We go from right to left to avoid overriding the wrong elements\r\n  reversedIndicesToMove.forEach((index, i) => {\r\n    // We don't want to bubble the first elements that are sorted as they are\r\n    // already in their correct position\r\n    isSorted = isSorted && index === elements.length - i - 1;\r\n    if (isSorted) {\r\n      return;\r\n    }\r\n    swap(elements, index + 1, index);\r\n  });\r\n  return elements;\r\n}\r\n\r\n// Let's go through an example\r\n//        |        |\r\n// [a, b, c, d, e, f, g]\r\n// -->\r\n// [c, f, a, b, d, e, g]\r\n//\r\n// We are going to override all the elements we want to move, so we keep them in an array\r\n// that we will restore at the end.\r\n// [c, f]\r\n//\r\n// From now on, we'll never read those values from the array anymore\r\n//        |1       |0\r\n// [a, b, _, d, e, _, g]\r\n//\r\n// The idea is that we want to shift all the elements between the marker 0 and 1\r\n// by one slot to the right.\r\n//\r\n//        |1       |0\r\n// [a, b, _, d, e, _, g]\r\n//          -> ->\r\n//\r\n// which gives us\r\n//\r\n//        |1       |0\r\n// [a, b, _, _, d, e, g]\r\n//\r\n// Now, we need to move all the elements from marker 1 to the beginning by two (not one)\r\n// slots to the right, which gives us\r\n//\r\n//        |1       |0\r\n// [a, b, _, _, d, e, g]\r\n//  ---|--^  ^\r\n//     ------|\r\n//\r\n// which gives us\r\n//\r\n//        |1       |0\r\n// [_, _, a, b, d, e, g]\r\n//\r\n// At this point, we can fill back the leftmost elements with the array we saved at\r\n// the beginning\r\n//\r\n//        |1       |0\r\n// [c, f, a, b, d, e, g]\r\n//\r\n// And we are done!\r\nexport function moveAllLeft<T>(elements: T[], indicesToMove: number[]) {\r\n  indicesToMove.sort((a: number, b: number) => a - b);\r\n\r\n  // Copy the elements to move\r\n  const leftMostElements = indicesToMove.map(index => elements[index]);\r\n\r\n  const reversedIndicesToMove = indicesToMove\r\n    // We go from right to left to avoid overriding elements.\r\n    .reverse()\r\n    // We add 0 for the final marker\r\n    .concat([0]);\r\n\r\n  reversedIndicesToMove.forEach((index, i) => {\r\n    // We skip the first one as it is not paired with anything else\r\n    if (i === 0) {\r\n      return;\r\n    }\r\n\r\n    // We go from the next marker to the right (i - 1) to the current one (index)\r\n    for (let pos = reversedIndicesToMove[i - 1] - 1; pos >= index; --pos) {\r\n      // We move by 1 the first time, 2 the second... So we can use the index i in the array\r\n      elements[pos + i] = elements[pos];\r\n    }\r\n  });\r\n\r\n  // The final step\r\n  leftMostElements.forEach((element, i) => {\r\n    elements[i] = element;\r\n  });\r\n\r\n  return elements;\r\n}\r\n\r\n// Let's go through an example\r\n//        |        |\r\n// [a, b, c, d, e, f, g]\r\n// -->\r\n// [a, b, d, e, g, c, f]\r\n//\r\n// We are going to override all the elements we want to move, so we keep them in an array\r\n// that we will restore at the end.\r\n// [c, f]\r\n//\r\n// From now on, we'll never read those values from the array anymore\r\n//        |0       |1\r\n// [a, b, _, d, e, _, g]\r\n//\r\n// The idea is that we want to shift all the elements between the marker 0 and 1\r\n// by one slot to the left.\r\n//\r\n//        |0       |1\r\n// [a, b, _, d, e, _, g]\r\n//          <- <-\r\n//\r\n// which gives us\r\n//\r\n//        |0       |1\r\n// [a, b, d, e, _, _, g]\r\n//\r\n// Now, we need to move all the elements from marker 1 to the end by two (not one)\r\n// slots to the left, which gives us\r\n//\r\n//        |0       |1\r\n// [a, b, d, e, _, _, g]\r\n//              ^------\r\n//\r\n// which gives us\r\n//\r\n//        |0       |1\r\n// [a, b, d, e, g, _, _]\r\n//\r\n// At this point, we can fill back the rightmost elements with the array we saved at\r\n// the beginning\r\n//\r\n//        |0       |1\r\n// [a, b, d, e, g, c, f]\r\n//\r\n// And we are done!\r\nexport function moveAllRight<T>(elements: T[], indicesToMove: number[]) {\r\n  const reversedIndicesToMove = indicesToMove.sort(\r\n    (a: number, b: number) => b - a,\r\n  );\r\n\r\n  // Copy the elements to move\r\n  const rightMostElements = reversedIndicesToMove.map(index => elements[index]);\r\n\r\n  indicesToMove = reversedIndicesToMove\r\n    // We go from left to right to avoid overriding elements.\r\n    .reverse()\r\n    // We last element index for the final marker\r\n    .concat([elements.length]);\r\n\r\n  indicesToMove.forEach((index, i) => {\r\n    // We skip the first one as it is not paired with anything else\r\n    if (i === 0) {\r\n      return;\r\n    }\r\n\r\n    // We go from the next marker to the left (i - 1) to the current one (index)\r\n    for (let pos = indicesToMove[i - 1] + 1; pos < index; ++pos) {\r\n      // We move by 1 the first time, 2 the second... So we can use the index i in the array\r\n      elements[pos - i] = elements[pos];\r\n    }\r\n  });\r\n\r\n  // The final step\r\n  rightMostElements.forEach((element, i) => {\r\n    elements[elements.length - i - 1] = element;\r\n  });\r\n\r\n  return elements;\r\n}\r\n","import React from \"react\";\r\nimport { Action } from \"./types\";\r\nimport {\r\n  moveOneLeft,\r\n  moveOneRight,\r\n  moveAllLeft,\r\n  moveAllRight,\r\n} from \"../zindex\";\r\nimport { getSelectedIndices } from \"../scene\";\r\nimport { KEYS } from \"../keys\";\r\nimport { t } from \"../i18n\";\r\n\r\nconst ACTIVE_ELEM_COLOR = \"#ffa94d\"; // OC ORANGE 4\r\n\r\nconst ICONS = {\r\n  bringForward: (\r\n    <svg viewBox=\"0 0 24 24\">\r\n      <path\r\n        d=\"M22 9.556C22 8.696 21.303 8 20.444 8H16v8H8v4.444C8 21.304 8.697 22 9.556 22h10.888c.86 0 1.556-.697 1.556-1.556V9.556z\"\r\n        stroke=\"#000\"\r\n        strokeWidth=\"2\"\r\n      />\r\n      <path\r\n        d=\"M16 3.556C16 2.696 15.303 2 14.444 2H3.556C2.696 2 2 2.697 2 3.556v10.888C2 15.304 2.697 16 3.556 16h10.888c.86 0 1.556-.697 1.556-1.556V3.556z\"\r\n        fill={ACTIVE_ELEM_COLOR}\r\n        stroke={ACTIVE_ELEM_COLOR}\r\n        strokeWidth=\"2\"\r\n      />\r\n    </svg>\r\n  ),\r\n  sendBackward: (\r\n    <svg viewBox=\"0 0 24 24\">\r\n      <path\r\n        d=\"M16 3.556C16 2.696 15.303 2 14.444 2H3.556C2.696 2 2 2.697 2 3.556v10.888C2 15.304 2.697 16 3.556 16h10.888c.86 0 1.556-.697 1.556-1.556V3.556z\"\r\n        fill={ACTIVE_ELEM_COLOR}\r\n        stroke={ACTIVE_ELEM_COLOR}\r\n        strokeWidth=\"2\"\r\n      />\r\n      <path\r\n        d=\"M22 9.556C22 8.696 21.303 8 20.444 8H9.556C8.696 8 8 8.697 8 9.556v10.888C8 21.304 8.697 22 9.556 22h10.888c.86 0 1.556-.697 1.556-1.556V9.556z\"\r\n        stroke=\"#000\"\r\n        strokeWidth=\"2\"\r\n      />\r\n    </svg>\r\n  ),\r\n  bringToFront: (\r\n    <svg viewBox=\"0 0 24 24\">\r\n      <path\r\n        d=\"M13 21a1 1 0 001 1h7a1 1 0 001-1v-7a1 1 0 00-1-1h-3v5h-5v3zM11 3a1 1 0 00-1-1H3a1 1 0 00-1 1v7a1 1 0 001 1h3V6h5V3z\"\r\n        stroke=\"#000\"\r\n        strokeWidth=\"2\"\r\n      />\r\n      <path\r\n        d=\"M18 7.333C18 6.597 17.403 6 16.667 6H7.333C6.597 6 6 6.597 6 7.333v9.334C6 17.403 6.597 18 7.333 18h9.334c.736 0 1.333-.597 1.333-1.333V7.333z\"\r\n        fill={ACTIVE_ELEM_COLOR}\r\n        stroke={ACTIVE_ELEM_COLOR}\r\n        strokeWidth=\"2\"\r\n      />\r\n    </svg>\r\n  ),\r\n  sendToBack: (\r\n    <svg viewBox=\"0 0 24 24\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n      <path\r\n        d=\"M18 7.333C18 6.597 17.403 6 16.667 6H7.333C6.597 6 6 6.597 6 7.333v9.334C6 17.403 6.597 18 7.333 18h9.334c.736 0 1.333-.597 1.333-1.333V7.333z\"\r\n        fill={ACTIVE_ELEM_COLOR}\r\n        stroke={ACTIVE_ELEM_COLOR}\r\n        strokeWidth=\"2\"\r\n      />\r\n      <path\r\n        d=\"M11 3a1 1 0 00-1-1H3a1 1 0 00-1 1v7a1 1 0 001 1h8V3zM22 14a1 1 0 00-1-1h-7a1 1 0 00-1 1v7a1 1 0 001 1h8v-8z\"\r\n        stroke=\"#000\"\r\n        strokeWidth=\"2\"\r\n      />\r\n    </svg>\r\n  ),\r\n};\r\n\r\nexport const actionSendBackward: Action = {\r\n  name: \"sendBackward\",\r\n  perform: (elements, appState) => {\r\n    return {\r\n      elements: moveOneLeft([...elements], getSelectedIndices(elements)),\r\n      appState,\r\n    };\r\n  },\r\n  contextItemLabel: \"labels.sendBackward\",\r\n  keyPriority: 40,\r\n  commitToHistory: () => true,\r\n  keyTest: event => event[KEYS.META] && event.altKey && event.key === \"B\",\r\n  PanelComponent: ({ updateData }) => (\r\n    <button\r\n      type=\"button\"\r\n      className=\"zIndexButton\"\r\n      onClick={e => updateData(null)}\r\n      title={t(\"labels.sendBackward\")}\r\n    >\r\n      {ICONS.sendBackward}\r\n    </button>\r\n  ),\r\n};\r\n\r\nexport const actionBringForward: Action = {\r\n  name: \"bringForward\",\r\n  perform: (elements, appState) => {\r\n    return {\r\n      elements: moveOneRight([...elements], getSelectedIndices(elements)),\r\n      appState,\r\n    };\r\n  },\r\n  contextItemLabel: \"labels.bringForward\",\r\n  keyPriority: 40,\r\n  commitToHistory: () => true,\r\n  keyTest: event => event[KEYS.META] && event.altKey && event.key === \"F\",\r\n  PanelComponent: ({ updateData }) => (\r\n    <button\r\n      type=\"button\"\r\n      className=\"zIndexButton\"\r\n      onClick={e => updateData(null)}\r\n      title={t(\"labels.bringForward\")}\r\n    >\r\n      {ICONS.bringForward}\r\n    </button>\r\n  ),\r\n};\r\n\r\nexport const actionSendToBack: Action = {\r\n  name: \"sendToBack\",\r\n  perform: (elements, appState) => {\r\n    return {\r\n      elements: moveAllLeft([...elements], getSelectedIndices(elements)),\r\n      appState,\r\n    };\r\n  },\r\n  contextItemLabel: \"labels.sendToBack\",\r\n  commitToHistory: () => true,\r\n  keyTest: event => event[KEYS.META] && event.shiftKey && event.key === \"B\",\r\n  PanelComponent: ({ updateData }) => (\r\n    <button\r\n      type=\"button\"\r\n      className=\"zIndexButton\"\r\n      onClick={e => updateData(null)}\r\n      title={t(\"labels.sendToBack\")}\r\n    >\r\n      {ICONS.sendToBack}\r\n    </button>\r\n  ),\r\n};\r\n\r\nexport const actionBringToFront: Action = {\r\n  name: \"bringToFront\",\r\n  perform: (elements, appState) => {\r\n    return {\r\n      elements: moveAllRight([...elements], getSelectedIndices(elements)),\r\n      appState,\r\n    };\r\n  },\r\n  commitToHistory: () => true,\r\n  contextItemLabel: \"labels.bringToFront\",\r\n  keyTest: event => event[KEYS.META] && event.shiftKey && event.key === \"F\",\r\n  PanelComponent: ({ updateData }) => (\r\n    <button\r\n      type=\"button\"\r\n      className=\"zIndexButton\"\r\n      onClick={e => updateData(null)}\r\n      title={t(\"labels.bringToFront\")}\r\n    >\r\n      {ICONS.bringToFront}\r\n    </button>\r\n  ),\r\n};\r\n","import { Action } from \"./types\";\r\nimport { KEYS } from \"../keys\";\r\n\r\nexport const actionSelectAll: Action = {\r\n  name: \"selectAll\",\r\n  perform: elements => {\r\n    return {\r\n      elements: elements.map(elem => ({ ...elem, isSelected: true })),\r\n    };\r\n  },\r\n  contextItemLabel: \"labels.selectAll\",\r\n  keyTest: event => event[KEYS.META] && event.key === \"a\",\r\n};\r\n","import React from \"react\";\r\n\r\nexport function ButtonSelect<T>({\r\n  options,\r\n  value,\r\n  onChange,\r\n  group,\r\n}: {\r\n  options: { value: T; text: string }[];\r\n  value: T | null;\r\n  onChange: (value: T) => void;\r\n  group: string;\r\n}) {\r\n  return (\r\n    <div className=\"buttonList\">\r\n      {options.map(option => (\r\n        <label\r\n          key={option.text}\r\n          className={value === option.value ? \"active\" : \"\"}\r\n        >\r\n          <input\r\n            type=\"radio\"\r\n            name={group}\r\n            onChange={() => onChange(option.value)}\r\n            checked={value === option.value ? true : false}\r\n          />\r\n          {option.text}\r\n        </label>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Popover } from \"./Popover\";\r\n\r\nimport \"./ColorPicker.css\";\r\nimport { KEYS } from \"../keys\";\r\nimport { t } from \"../i18n\";\r\nimport { isWritableElement } from \"../utils\";\r\n\r\n// This is a narrow reimplementation of the awesome react-color Twitter component\r\n// https://github.com/casesandberg/react-color/blob/master/src/components/twitter/Twitter.js\r\n\r\n// Unfortunately, we can't detect keyboard layout in the browser. So this will\r\n// only work well for QWERTY but not AZERTY or others...\r\nconst keyBindings = [\r\n  [\"1\", \"2\", \"3\", \"4\", \"5\"],\r\n  [\"q\", \"w\", \"e\", \"r\", \"t\"],\r\n  [\"a\", \"s\", \"d\", \"f\", \"g\"],\r\n].flat();\r\n\r\nconst Picker = function({\r\n  colors,\r\n  color,\r\n  onChange,\r\n  onClose,\r\n  label,\r\n}: {\r\n  colors: string[];\r\n  color: string | null;\r\n  onChange: (color: string) => void;\r\n  onClose: () => void;\r\n  label: string;\r\n}) {\r\n  const firstItem = React.useRef<HTMLButtonElement>();\r\n  const activeItem = React.useRef<HTMLButtonElement>();\r\n  const gallery = React.useRef<HTMLDivElement>();\r\n  const colorInput = React.useRef<HTMLInputElement>();\r\n\r\n  React.useEffect(() => {\r\n    // After the component is first mounted\r\n    // focus on first input\r\n    if (activeItem.current) {\r\n      activeItem.current.focus();\r\n    } else if (colorInput.current) {\r\n      colorInput.current.focus();\r\n    }\r\n  }, []);\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent) => {\r\n    if (e.key === KEYS.TAB) {\r\n      const { activeElement } = document;\r\n      if (e.shiftKey) {\r\n        if (activeElement === firstItem.current) {\r\n          colorInput.current?.focus();\r\n          e.preventDefault();\r\n        }\r\n      } else {\r\n        if (activeElement === colorInput.current) {\r\n          firstItem.current?.focus();\r\n          e.preventDefault();\r\n        }\r\n      }\r\n    } else if (\r\n      e.key === KEYS.ARROW_RIGHT ||\r\n      e.key === KEYS.ARROW_LEFT ||\r\n      e.key === KEYS.ARROW_UP ||\r\n      e.key === KEYS.ARROW_DOWN\r\n    ) {\r\n      const { activeElement } = document;\r\n      const index = Array.prototype.indexOf.call(\r\n        gallery!.current!.children,\r\n        activeElement,\r\n      );\r\n      if (index !== -1) {\r\n        const length = gallery!.current!.children.length;\r\n        const nextIndex =\r\n          e.key === KEYS.ARROW_RIGHT\r\n            ? (index + 1) % length\r\n            : e.key === KEYS.ARROW_LEFT\r\n            ? (length + index - 1) % length\r\n            : e.key === KEYS.ARROW_DOWN\r\n            ? (index + 5) % length\r\n            : e.key === KEYS.ARROW_UP\r\n            ? (length + index - 5) % length\r\n            : index;\r\n        (gallery!.current!.children![nextIndex] as any).focus();\r\n      }\r\n      e.preventDefault();\r\n    } else if (\r\n      keyBindings.includes(e.key.toLowerCase()) &&\r\n      !isWritableElement(e.target)\r\n    ) {\r\n      const index = keyBindings.indexOf(e.key.toLowerCase());\r\n      (gallery!.current!.children![index] as any).focus();\r\n      e.preventDefault();\r\n    } else if (e.key === KEYS.ESCAPE || e.key === KEYS.ENTER) {\r\n      e.preventDefault();\r\n      onClose();\r\n    }\r\n    e.nativeEvent.stopImmediatePropagation();\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"color-picker\"\r\n      role=\"dialog\"\r\n      aria-modal=\"true\"\r\n      aria-label={t(\"labels.colorPicker\")}\r\n      onKeyDown={handleKeyDown}\r\n    >\r\n      <div className=\"color-picker-triangle-shadow\"></div>\r\n      <div className=\"color-picker-triangle\"></div>\r\n      <div className=\"color-picker-content\">\r\n        <div\r\n          className=\"colors-gallery\"\r\n          ref={el => {\r\n            if (el) {\r\n              gallery.current = el;\r\n            }\r\n          }}\r\n        >\r\n          {colors.map((_color, i) => (\r\n            <button\r\n              className=\"color-picker-swatch\"\r\n              onClick={() => {\r\n                onChange(_color);\r\n              }}\r\n              title={`${_color} — ${keyBindings[i].toUpperCase()}`}\r\n              aria-label={_color}\r\n              aria-keyshortcuts={keyBindings[i]}\r\n              style={{ backgroundColor: _color }}\r\n              key={_color}\r\n              ref={el => {\r\n                if (el && i === 0) {\r\n                  firstItem.current = el;\r\n                }\r\n                if (el && _color === color) {\r\n                  activeItem.current = el;\r\n                }\r\n              }}\r\n              onFocus={() => {\r\n                onChange(_color);\r\n              }}\r\n            >\r\n              {_color === \"transparent\" ? (\r\n                <div className=\"color-picker-transparent\"></div>\r\n              ) : (\r\n                undefined\r\n              )}\r\n              <span className=\"color-picker-keybinding\">{keyBindings[i]}</span>\r\n            </button>\r\n          ))}\r\n        </div>\r\n        <ColorInput\r\n          color={color}\r\n          label={label}\r\n          onChange={color => {\r\n            onChange(color);\r\n          }}\r\n          ref={colorInput}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ColorInput = React.forwardRef(\r\n  (\r\n    {\r\n      color,\r\n      onChange,\r\n      label,\r\n    }: {\r\n      color: string | null;\r\n      onChange: (color: string) => void;\r\n      label: string;\r\n    },\r\n    ref,\r\n  ) => {\r\n    const colorRegex = /^([0-9a-f]{3}|[0-9a-f]{6}|[0-9a-f]{8}|transparent)$/;\r\n    const [innerValue, setInnerValue] = React.useState(color);\r\n    const inputRef = React.useRef(null);\r\n\r\n    React.useEffect(() => {\r\n      setInnerValue(color);\r\n    }, [color]);\r\n\r\n    React.useImperativeHandle(ref, () => inputRef.current);\r\n\r\n    return (\r\n      <div className=\"color-input-container\">\r\n        <div className=\"color-picker-hash\">#</div>\r\n        <input\r\n          spellCheck={false}\r\n          className=\"color-picker-input\"\r\n          aria-label={label}\r\n          onChange={e => {\r\n            const value = e.target.value.toLowerCase();\r\n            if (value.match(colorRegex)) {\r\n              onChange(value === \"transparent\" ? \"transparent\" : `#${value}`);\r\n            }\r\n            setInnerValue(value);\r\n          }}\r\n          value={(innerValue || \"\").replace(/^#/, \"\")}\r\n          onPaste={e => onChange(e.clipboardData.getData(\"text\"))}\r\n          onBlur={() => setInnerValue(color)}\r\n          ref={inputRef}\r\n        />\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\nexport function ColorPicker({\r\n  type,\r\n  color,\r\n  onChange,\r\n  label,\r\n}: {\r\n  type: \"canvasBackground\" | \"elementBackground\" | \"elementStroke\";\r\n  color: string | null;\r\n  onChange: (color: string) => void;\r\n  label: string;\r\n}) {\r\n  const [isActive, setActive] = React.useState(false);\r\n  const pickerButton = React.useRef<HTMLButtonElement>(null);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"color-picker-control-container\">\r\n        <button\r\n          className=\"color-picker-label-swatch\"\r\n          aria-label={label}\r\n          style={color ? { backgroundColor: color } : undefined}\r\n          onClick={() => setActive(!isActive)}\r\n          ref={pickerButton}\r\n        />\r\n        <ColorInput\r\n          color={color}\r\n          label={label}\r\n          onChange={color => {\r\n            onChange(color);\r\n          }}\r\n        />\r\n      </div>\r\n      <React.Suspense fallback=\"\">\r\n        {isActive ? (\r\n          <Popover onCloseRequest={() => setActive(false)}>\r\n            <Picker\r\n              colors={colors[type]}\r\n              color={color || null}\r\n              onChange={changedColor => {\r\n                onChange(changedColor);\r\n              }}\r\n              onClose={() => {\r\n                setActive(false);\r\n                pickerButton.current?.focus();\r\n              }}\r\n              label={label}\r\n            />\r\n          </Popover>\r\n        ) : null}\r\n      </React.Suspense>\r\n    </div>\r\n  );\r\n}\r\n\r\n// https://yeun.github.io/open-color/\r\nconst colors = {\r\n  // Shade 0\r\n  canvasBackground: [\r\n    \"#ffffff\",\r\n    \"#f8f9fa\",\r\n    \"#f1f3f5\",\r\n    \"#fff5f5\",\r\n    \"#fff0f6\",\r\n    \"#f8f0fc\",\r\n    \"#f3f0ff\",\r\n    \"#edf2ff\",\r\n    \"#e7f5ff\",\r\n    \"#e3fafc\",\r\n    \"#e6fcf5\",\r\n    \"#ebfbee\",\r\n    \"#f4fce3\",\r\n    \"#fff9db\",\r\n    \"#fff4e6\",\r\n  ],\r\n  // Shade 6\r\n  elementBackground: [\r\n    \"transparent\",\r\n    \"#ced4da\",\r\n    \"#868e96\",\r\n    \"#fa5252\",\r\n    \"#e64980\",\r\n    \"#be4bdb\",\r\n    \"#7950f2\",\r\n    \"#4c6ef5\",\r\n    \"#228be6\",\r\n    \"#15aabf\",\r\n    \"#12b886\",\r\n    \"#40c057\",\r\n    \"#82c91e\",\r\n    \"#fab005\",\r\n    \"#fd7e14\",\r\n  ],\r\n  // Shade 9\r\n  elementStroke: [\r\n    \"#000000\",\r\n    \"#343a40\",\r\n    \"#495057\",\r\n    \"#c92a2a\",\r\n    \"#a61e4d\",\r\n    \"#862e9c\",\r\n    \"#5f3dc4\",\r\n    \"#364fc7\",\r\n    \"#1864ab\",\r\n    \"#0b7285\",\r\n    \"#087f5b\",\r\n    \"#2b8a3e\",\r\n    \"#5c940d\",\r\n    \"#e67700\",\r\n    \"#d9480f\",\r\n  ],\r\n};\r\n","import React from \"react\";\r\nimport { Action } from \"./types\";\r\nimport { ExcalidrawElement, ExcalidrawTextElement } from \"../element/types\";\r\nimport {\r\n  getCommonAttributeOfSelectedElements,\r\n  isSomeElementSelected,\r\n} from \"../scene\";\r\nimport { ButtonSelect } from \"../components/ButtonSelect\";\r\nimport { isTextElement, redrawTextBoundingBox } from \"../element\";\r\nimport { ColorPicker } from \"../components/ColorPicker\";\r\nimport { AppState } from \"../../src/types\";\r\nimport { t } from \"../i18n\";\r\n\r\nconst changeProperty = (\r\n  elements: readonly ExcalidrawElement[],\r\n  callback: (element: ExcalidrawElement) => ExcalidrawElement,\r\n) => {\r\n  return elements.map(element => {\r\n    if (element.isSelected) {\r\n      return callback(element);\r\n    }\r\n    return element;\r\n  });\r\n};\r\n\r\nconst getFormValue = function<T>(\r\n  editingElement: AppState[\"editingElement\"],\r\n  elements: readonly ExcalidrawElement[],\r\n  getAttribute: (element: ExcalidrawElement) => T,\r\n  defaultValue?: T,\r\n): T | null {\r\n  return (\r\n    (editingElement && getAttribute(editingElement)) ??\r\n    (isSomeElementSelected(elements)\r\n      ? getCommonAttributeOfSelectedElements(elements, getAttribute)\r\n      : defaultValue) ??\r\n    null\r\n  );\r\n};\r\n\r\nexport const actionChangeStrokeColor: Action = {\r\n  name: \"changeStrokeColor\",\r\n  perform: (elements, appState, value) => {\r\n    return {\r\n      elements: changeProperty(elements, el => ({\r\n        ...el,\r\n        shape: null,\r\n        strokeColor: value,\r\n      })),\r\n      appState: { ...appState, currentItemStrokeColor: value },\r\n    };\r\n  },\r\n  commitToHistory: () => true,\r\n  PanelComponent: ({ elements, appState, updateData }) => (\r\n    <>\r\n      <h3 aria-hidden=\"true\">{t(\"labels.stroke\")}</h3>\r\n      <ColorPicker\r\n        type=\"elementStroke\"\r\n        label={t(\"labels.stroke\")}\r\n        color={getFormValue(\r\n          appState.editingElement,\r\n          elements,\r\n          element => element.strokeColor,\r\n          appState.currentItemStrokeColor,\r\n        )}\r\n        onChange={updateData}\r\n      />\r\n    </>\r\n  ),\r\n};\r\n\r\nexport const actionChangeBackgroundColor: Action = {\r\n  name: \"changeBackgroundColor\",\r\n  perform: (elements, appState, value) => {\r\n    return {\r\n      elements: changeProperty(elements, el => ({\r\n        ...el,\r\n        shape: null,\r\n        backgroundColor: value,\r\n      })),\r\n      appState: { ...appState, currentItemBackgroundColor: value },\r\n    };\r\n  },\r\n  commitToHistory: () => true,\r\n  PanelComponent: ({ elements, appState, updateData }) => (\r\n    <>\r\n      <h3 aria-hidden=\"true\">{t(\"labels.background\")}</h3>\r\n      <ColorPicker\r\n        type=\"elementBackground\"\r\n        label={t(\"labels.background\")}\r\n        color={getFormValue(\r\n          appState.editingElement,\r\n          elements,\r\n          element => element.backgroundColor,\r\n          appState.currentItemBackgroundColor,\r\n        )}\r\n        onChange={updateData}\r\n      />\r\n    </>\r\n  ),\r\n};\r\n\r\nexport const actionChangeFillStyle: Action = {\r\n  name: \"changeFillStyle\",\r\n  perform: (elements, appState, value) => {\r\n    return {\r\n      elements: changeProperty(elements, el => ({\r\n        ...el,\r\n        shape: null,\r\n        fillStyle: value,\r\n      })),\r\n      appState: { ...appState, currentItemFillStyle: value },\r\n    };\r\n  },\r\n  commitToHistory: () => true,\r\n  PanelComponent: ({ elements, appState, updateData }) => (\r\n    <fieldset>\r\n      <legend>{t(\"labels.fill\")}</legend>\r\n      <ButtonSelect\r\n        options={[\r\n          { value: \"solid\", text: t(\"labels.solid\") },\r\n          { value: \"hachure\", text: t(\"labels.hachure\") },\r\n          { value: \"cross-hatch\", text: t(\"labels.crossHatch\") },\r\n        ]}\r\n        group=\"fill\"\r\n        value={getFormValue(\r\n          appState.editingElement,\r\n          elements,\r\n          element => element.fillStyle,\r\n          appState.currentItemFillStyle,\r\n        )}\r\n        onChange={value => {\r\n          updateData(value);\r\n        }}\r\n      />\r\n    </fieldset>\r\n  ),\r\n};\r\n\r\nexport const actionChangeStrokeWidth: Action = {\r\n  name: \"changeStrokeWidth\",\r\n  perform: (elements, appState, value) => {\r\n    return {\r\n      elements: changeProperty(elements, el => ({\r\n        ...el,\r\n        shape: null,\r\n        strokeWidth: value,\r\n      })),\r\n      appState: { ...appState, currentItemStrokeWidth: value },\r\n    };\r\n  },\r\n  commitToHistory: () => true,\r\n  PanelComponent: ({ elements, appState, updateData }) => (\r\n    <fieldset>\r\n      <legend>{t(\"labels.strokeWidth\")}</legend>\r\n      <ButtonSelect\r\n        group=\"stroke-width\"\r\n        options={[\r\n          { value: 1, text: t(\"labels.thin\") },\r\n          { value: 2, text: t(\"labels.bold\") },\r\n          { value: 4, text: t(\"labels.extraBold\") },\r\n        ]}\r\n        value={getFormValue(\r\n          appState.editingElement,\r\n          elements,\r\n          element => element.strokeWidth,\r\n          appState.currentItemStrokeWidth,\r\n        )}\r\n        onChange={value => updateData(value)}\r\n      />\r\n    </fieldset>\r\n  ),\r\n};\r\n\r\nexport const actionChangeSloppiness: Action = {\r\n  name: \"changeSloppiness\",\r\n  perform: (elements, appState, value) => {\r\n    return {\r\n      elements: changeProperty(elements, el => ({\r\n        ...el,\r\n        shape: null,\r\n        roughness: value,\r\n      })),\r\n      appState: { ...appState, currentItemRoughness: value },\r\n    };\r\n  },\r\n  commitToHistory: () => true,\r\n  PanelComponent: ({ elements, appState, updateData }) => (\r\n    <fieldset>\r\n      <legend>{t(\"labels.sloppiness\")}</legend>\r\n      <ButtonSelect\r\n        group=\"sloppiness\"\r\n        options={[\r\n          { value: 0, text: t(\"labels.architect\") },\r\n          { value: 1, text: t(\"labels.artist\") },\r\n          { value: 2, text: t(\"labels.cartoonist\") },\r\n        ]}\r\n        value={getFormValue(\r\n          appState.editingElement,\r\n          elements,\r\n          element => element.roughness,\r\n          appState.currentItemRoughness,\r\n        )}\r\n        onChange={value => updateData(value)}\r\n      />\r\n    </fieldset>\r\n  ),\r\n};\r\n\r\nexport const actionChangeOpacity: Action = {\r\n  name: \"changeOpacity\",\r\n  perform: (elements, appState, value) => {\r\n    return {\r\n      elements: changeProperty(elements, el => ({\r\n        ...el,\r\n        shape: null,\r\n        opacity: value,\r\n      })),\r\n      appState: { ...appState, currentItemOpacity: value },\r\n    };\r\n  },\r\n  commitToHistory: () => true,\r\n  PanelComponent: ({ elements, appState, updateData }) => (\r\n    <label className=\"control-label\">\r\n      {t(\"labels.opacity\")}\r\n      <input\r\n        type=\"range\"\r\n        min=\"0\"\r\n        max=\"100\"\r\n        step=\"10\"\r\n        onChange={e => updateData(+e.target.value)}\r\n        onWheel={e => {\r\n          e.stopPropagation();\r\n          const target = e.target as HTMLInputElement;\r\n          const STEP = 10;\r\n          const MAX = 100;\r\n          const MIN = 0;\r\n          const value = +target.value;\r\n\r\n          if (e.deltaY < 0 && value < MAX) {\r\n            updateData(value + STEP);\r\n          } else if (e.deltaY > 0 && value > MIN) {\r\n            updateData(value - STEP);\r\n          }\r\n        }}\r\n        value={\r\n          getFormValue(\r\n            appState.editingElement,\r\n            elements,\r\n            element => element.opacity,\r\n            appState.currentItemOpacity,\r\n          ) ?? undefined\r\n        }\r\n      />\r\n    </label>\r\n  ),\r\n};\r\n\r\nexport const actionChangeFontSize: Action = {\r\n  name: \"changeFontSize\",\r\n  perform: (elements, appState, value) => {\r\n    return {\r\n      elements: changeProperty(elements, el => {\r\n        if (isTextElement(el)) {\r\n          const element: ExcalidrawTextElement = {\r\n            ...el,\r\n            shape: null,\r\n            font: `${value}px ${el.font.split(\"px \")[1]}`,\r\n          };\r\n          redrawTextBoundingBox(element);\r\n          return element;\r\n        }\r\n\r\n        return el;\r\n      }),\r\n      appState: {\r\n        ...appState,\r\n        currentItemFont: `${value}px ${\r\n          appState.currentItemFont.split(\"px \")[1]\r\n        }`,\r\n      },\r\n    };\r\n  },\r\n  commitToHistory: () => true,\r\n  PanelComponent: ({ elements, appState, updateData }) => (\r\n    <fieldset>\r\n      <legend>{t(\"labels.fontSize\")}</legend>\r\n      <ButtonSelect\r\n        group=\"font-size\"\r\n        options={[\r\n          { value: 16, text: t(\"labels.small\") },\r\n          { value: 20, text: t(\"labels.medium\") },\r\n          { value: 28, text: t(\"labels.large\") },\r\n          { value: 36, text: t(\"labels.veryLarge\") },\r\n        ]}\r\n        value={getFormValue(\r\n          appState.editingElement,\r\n          elements,\r\n          element => isTextElement(element) && +element.font.split(\"px \")[0],\r\n          +(appState.currentItemFont || \"20px Virgil\").split(\"px \")[0],\r\n        )}\r\n        onChange={value => updateData(value)}\r\n      />\r\n    </fieldset>\r\n  ),\r\n};\r\n\r\nexport const actionChangeFontFamily: Action = {\r\n  name: \"changeFontFamily\",\r\n  perform: (elements, appState, value) => {\r\n    return {\r\n      elements: changeProperty(elements, el => {\r\n        if (isTextElement(el)) {\r\n          const element: ExcalidrawTextElement = {\r\n            ...el,\r\n            shape: null,\r\n            font: `${el.font.split(\"px \")[0]}px ${value}`,\r\n          };\r\n          redrawTextBoundingBox(element);\r\n          return element;\r\n        }\r\n\r\n        return el;\r\n      }),\r\n      appState: {\r\n        ...appState,\r\n        currentItemFont: `${\r\n          appState.currentItemFont.split(\"px \")[0]\r\n        }px ${value}`,\r\n      },\r\n    };\r\n  },\r\n  commitToHistory: () => true,\r\n  PanelComponent: ({ elements, appState, updateData }) => (\r\n    <fieldset>\r\n      <legend>{t(\"labels.fontFamily\")}</legend>\r\n      <ButtonSelect\r\n        group=\"font-family\"\r\n        options={[\r\n          { value: \"Virgil\", text: t(\"labels.handDrawn\") },\r\n          { value: \"Helvetica\", text: t(\"labels.normal\") },\r\n          { value: \"Cascadia\", text: t(\"labels.code\") },\r\n        ]}\r\n        value={getFormValue(\r\n          appState.editingElement,\r\n          elements,\r\n          element => isTextElement(element) && element.font.split(\"px \")[1],\r\n          (appState.currentItemFont || \"20px Virgil\").split(\"px \")[1],\r\n        )}\r\n        onChange={value => updateData(value)}\r\n      />\r\n    </fieldset>\r\n  ),\r\n};\r\n","//\r\n// All icons are imported from https://fontawesome.com/icons?d=gallery\r\n// Icons are under the license https://fontawesome.com/license\r\n//\r\n\r\nimport React from \"react\";\r\n\r\nexport const link = (\r\n  <svg aria-hidden=\"true\" focusable=\"false\" role=\"img\" viewBox=\"0 0 512 512\">\r\n    <path\r\n      fill=\"currentColor\"\r\n      d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\r\n    />\r\n  </svg>\r\n);\r\n\r\nexport const save = (\r\n  <svg aria-hidden=\"true\" focusable=\"false\" role=\"img\" viewBox=\"0 0 448 512\">\r\n    <path\r\n      fill=\"currentColor\"\r\n      d=\"M433.941 129.941l-83.882-83.882A48 48 0 0 0 316.118 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V163.882a48 48 0 0 0-14.059-33.941zM224 416c-35.346 0-64-28.654-64-64 0-35.346 28.654-64 64-64s64 28.654 64 64c0 35.346-28.654 64-64 64zm96-304.52V212c0 6.627-5.373 12-12 12H76c-6.627 0-12-5.373-12-12V108c0-6.627 5.373-12 12-12h228.52c3.183 0 6.235 1.264 8.485 3.515l3.48 3.48A11.996 11.996 0 0 1 320 111.48z\"\r\n    />\r\n  </svg>\r\n);\r\n\r\nexport const load = (\r\n  <svg aria-hidden=\"true\" focusable=\"false\" role=\"img\" viewBox=\"0 0 576 512\">\r\n    <path\r\n      fill=\"currentColor\"\r\n      d=\"M572.694 292.093L500.27 416.248A63.997 63.997 0 0 1 444.989 448H45.025c-18.523 0-30.064-20.093-20.731-36.093l72.424-124.155A64 64 0 0 1 152 256h399.964c18.523 0 30.064 20.093 20.73 36.093zM152 224h328v-48c0-26.51-21.49-48-48-48H272l-64-64H48C21.49 64 0 85.49 0 112v278.046l69.077-118.418C86.214 242.25 117.989 224 152 224z\"\r\n    />\r\n  </svg>\r\n);\r\n\r\nexport const image = (\r\n  <svg aria-hidden=\"true\" focusable=\"false\" role=\"img\" viewBox=\"0 0 384 512\">\r\n    <path\r\n      fill=\"currentColor\"\r\n      d=\"M384 121.941V128H256V0h6.059a24 24 0 0 1 16.97 7.029l97.941 97.941a24.002 24.002 0 0 1 7.03 16.971zM248 160c-13.2 0-24-10.8-24-24V0H24C10.745 0 0 10.745 0 24v464c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24V160H248zm-135.455 16c26.51 0 48 21.49 48 48s-21.49 48-48 48-48-21.49-48-48 21.491-48 48-48zm208 240h-256l.485-48.485L104.545 328c4.686-4.686 11.799-4.201 16.485.485L160.545 368 264.06 264.485c4.686-4.686 12.284-4.686 16.971 0L320.545 304v112z\"\r\n    />\r\n  </svg>\r\n);\r\n\r\nexport const clipboard = (\r\n  <svg aria-hidden=\"true\" focusable=\"false\" role=\"img\" viewBox=\"0 0 384 512\">\r\n    <path\r\n      fill=\"currentColor\"\r\n      d=\"M384 112v352c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h80c0-35.29 28.71-64 64-64s64 28.71 64 64h80c26.51 0 48 21.49 48 48zM192 40c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24m96 114v-20a6 6 0 0 0-6-6H102a6 6 0 0 0-6 6v20a6 6 0 0 0 6 6h180a6 6 0 0 0 6-6z\"\r\n    />\r\n  </svg>\r\n);\r\n\r\nexport const trash = (\r\n  <svg aria-hidden=\"true\" focusable=\"false\" role=\"img\" viewBox=\"0 0 448 512\">\r\n    <path\r\n      fill=\"currentColor\"\r\n      d=\"M32 464a48 48 0 0 0 48 48h288a48 48 0 0 0 48-48V128H32zm272-256a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zm-96 0a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zm-96 0a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zM432 32H312l-9.4-18.7A24 24 0 0 0 281.1 0H166.8a23.72 23.72 0 0 0-21.4 13.3L136 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16z\"\r\n    />\r\n  </svg>\r\n);\r\n\r\nexport const palete = (\r\n  <svg aria-hidden=\"true\" focusable=\"false\" role=\"img\" viewBox=\"0 0 512 512\">\r\n    <path\r\n      fill=\"currentColor\"\r\n      d=\"M204.3 5C104.9 24.4 24.8 104.3 5.2 203.4c-37 187 131.7 326.4 258.8 306.7 41.2-6.4 61.4-54.6 42.5-91.7-23.1-45.4 9.9-98.4 60.9-98.4h79.7c35.8 0 64.8-29.6 64.9-65.3C511.5 97.1 368.1-26.9 204.3 5zM96 320c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm32-128c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm128-64c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm128 64c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z\"\r\n    />\r\n  </svg>\r\n);\r\n\r\nexport const exportFile = (\r\n  <svg aria-hidden=\"true\" focusable=\"false\" role=\"img\" viewBox=\"0 0 576 512\">\r\n    <path\r\n      fill=\"currentColor\"\r\n      d=\"M384 121.9c0-6.3-2.5-12.4-7-16.9L279.1 7c-4.5-4.5-10.6-7-17-7H256v128h128zM571 308l-95.7-96.4c-10.1-10.1-27.4-3-27.4 11.3V288h-64v64h64v65.2c0 14.3 17.3 21.4 27.4 11.3L571 332c6.6-6.6 6.6-17.4 0-24zm-379 28v-32c0-8.8 7.2-16 16-16h176V160H248c-13.2 0-24-10.8-24-24V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V352H208c-8.8 0-16-7.2-16-16z\"\r\n    />\r\n  </svg>\r\n);\r\n\r\nexport const zoomIn = (\r\n  <svg aria-hidden=\"true\" focusable=\"false\" role=\"img\" viewBox=\"0 0 448 512\">\r\n    <path\r\n      fill=\"currentColor\"\r\n      d=\"M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z\"\r\n    />\r\n  </svg>\r\n);\r\n\r\nexport const zoomOut = (\r\n  <svg aria-hidden=\"true\" focusable=\"false\" role=\"img\" viewBox=\"0 0 448 512\">\r\n    <path\r\n      fill=\"currentColor\"\r\n      d=\"M416 208H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z\"\r\n    />\r\n  </svg>\r\n);\r\n","import \"./ToolIcon.scss\";\r\n\r\nimport React from \"react\";\r\n\r\ntype ToolIconSize = \"s\" | \"m\";\r\n\r\ntype ToolButtonBaseProps = {\r\n  icon?: React.ReactNode;\r\n  \"aria-label\": string;\r\n  \"aria-keyshortcuts\"?: string;\r\n  label?: string;\r\n  title?: string;\r\n  name?: string;\r\n  id?: string;\r\n  size?: ToolIconSize;\r\n  keyBindingLabel?: string;\r\n};\r\n\r\ntype ToolButtonProps =\r\n  | (ToolButtonBaseProps & { type: \"button\"; onClick?(): void })\r\n  | (ToolButtonBaseProps & {\r\n      type: \"radio\";\r\n\r\n      checked: boolean;\r\n      onChange?(): void;\r\n    });\r\n\r\nconst DEFAULT_SIZE: ToolIconSize = \"m\";\r\n\r\nexport const ToolButton = React.forwardRef(function(\r\n  props: ToolButtonProps,\r\n  ref,\r\n) {\r\n  const innerRef = React.useRef(null);\r\n  React.useImperativeHandle(ref, () => innerRef.current);\r\n  const sizeCn = `ToolIcon_size_${props.size || DEFAULT_SIZE}`;\r\n\r\n  if (props.type === \"button\") {\r\n    return (\r\n      <button\r\n        className={`ToolIcon_type_button ToolIcon ${sizeCn}`}\r\n        title={props.title}\r\n        aria-label={props[\"aria-label\"]}\r\n        type=\"button\"\r\n        onClick={props.onClick}\r\n        ref={innerRef}\r\n      >\r\n        <div className=\"ToolIcon__icon\" aria-hidden=\"true\">\r\n          {props.icon || props.label}\r\n        </div>\r\n      </button>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <label className=\"ToolIcon\" title={props.title}>\r\n      <input\r\n        className={`ToolIcon_type_radio ${sizeCn}`}\r\n        type=\"radio\"\r\n        name={props.name}\r\n        aria-label={props[\"aria-label\"]}\r\n        aria-keyshortcuts={props[\"aria-keyshortcuts\"]}\r\n        id={props.id}\r\n        onChange={props.onChange}\r\n        checked={props.checked}\r\n        ref={innerRef}\r\n      />\r\n      <div className=\"ToolIcon__icon\">\r\n        {props.icon}\r\n        {props.keyBindingLabel && (\r\n          <span className=\"ToolIcon__keybinding\">{props.keyBindingLabel}</span>\r\n        )}\r\n      </div>\r\n    </label>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport { Action } from \"./types\";\r\nimport { ColorPicker } from \"../components/ColorPicker\";\r\nimport { getDefaultAppState } from \"../appState\";\r\nimport { trash, zoomIn, zoomOut } from \"../components/icons\";\r\nimport { ToolButton } from \"../components/ToolButton\";\r\nimport { t } from \"../i18n\";\r\nimport { getNormalizedZoom } from \"../scene\";\r\nimport { KEYS } from \"../keys\";\r\n\r\nexport const actionChangeViewBackgroundColor: Action = {\r\n  name: \"changeViewBackgroundColor\",\r\n  perform: (_, appState, value) => {\r\n    return { appState: { ...appState, viewBackgroundColor: value } };\r\n  },\r\n  PanelComponent: ({ appState, updateData }) => {\r\n    return (\r\n      <div style={{ position: \"relative\" }}>\r\n        <ColorPicker\r\n          label={t(\"labels.canvasBackground\")}\r\n          type=\"canvasBackground\"\r\n          color={appState.viewBackgroundColor}\r\n          onChange={color => updateData(color)}\r\n        />\r\n      </div>\r\n    );\r\n  },\r\n  commitToHistory: () => true,\r\n};\r\n\r\nexport const actionClearCanvas: Action = {\r\n  name: \"clearCanvas\",\r\n  commitToHistory: () => true,\r\n  perform: () => {\r\n    return {\r\n      elements: [],\r\n      appState: getDefaultAppState(),\r\n    };\r\n  },\r\n  PanelComponent: ({ updateData }) => (\r\n    <ToolButton\r\n      type=\"button\"\r\n      icon={trash}\r\n      title={t(\"buttons.clearReset\")}\r\n      aria-label={t(\"buttons.clearReset\")}\r\n      onClick={() => {\r\n        if (window.confirm(t(\"alerts.clearReset\"))) {\r\n          // TODO: Defined globally, since file handles aren't yet serializable.\r\n          // Once `FileSystemFileHandle` can be serialized, make this\r\n          // part of `AppState`.\r\n          (window as any).handle = null;\r\n          updateData(null);\r\n        }\r\n      }}\r\n    />\r\n  ),\r\n};\r\n\r\nconst ZOOM_STEP = 0.1;\r\n\r\nconst KEY_CODES = {\r\n  MINUS: \"Minus\",\r\n  EQUAL: \"Equal\",\r\n  ZERO: \"Digit0\",\r\n  NUM_SUBTRACT: \"NumpadSubtract\",\r\n  NUM_ADD: \"NumpadAdd\",\r\n  NUM_ZERO: \"Numpad0\",\r\n};\r\n\r\nexport const actionZoomIn: Action = {\r\n  name: \"zoomIn\",\r\n  perform: (elements, appState) => {\r\n    return {\r\n      appState: {\r\n        ...appState,\r\n        zoom: getNormalizedZoom(appState.zoom + ZOOM_STEP),\r\n      },\r\n    };\r\n  },\r\n  PanelComponent: ({ updateData }) => (\r\n    <ToolButton\r\n      type=\"button\"\r\n      icon={zoomIn}\r\n      title={t(\"buttons.zoomIn\")}\r\n      aria-label={t(\"buttons.zoomIn\")}\r\n      onClick={() => {\r\n        updateData(null);\r\n      }}\r\n    />\r\n  ),\r\n  keyTest: event =>\r\n    (event.code === KEY_CODES.EQUAL || event.code === KEY_CODES.NUM_ADD) &&\r\n    (event[KEYS.META] || event.shiftKey),\r\n};\r\n\r\nexport const actionZoomOut: Action = {\r\n  name: \"zoomOut\",\r\n  perform: (elements, appState) => {\r\n    return {\r\n      appState: {\r\n        ...appState,\r\n        zoom: getNormalizedZoom(appState.zoom - ZOOM_STEP),\r\n      },\r\n    };\r\n  },\r\n  PanelComponent: ({ updateData }) => (\r\n    <ToolButton\r\n      type=\"button\"\r\n      icon={zoomOut}\r\n      title={t(\"buttons.zoomOut\")}\r\n      aria-label={t(\"buttons.zoomOut\")}\r\n      onClick={() => {\r\n        updateData(null);\r\n      }}\r\n    />\r\n  ),\r\n  keyTest: event =>\r\n    (event.code === KEY_CODES.MINUS || event.code === KEY_CODES.NUM_SUBTRACT) &&\r\n    (event[KEYS.META] || event.shiftKey),\r\n};\r\n\r\nexport const actionResetZoom: Action = {\r\n  name: \"resetZoom\",\r\n  perform: (elements, appState) => {\r\n    return {\r\n      appState: {\r\n        ...appState,\r\n        zoom: 1,\r\n      },\r\n    };\r\n  },\r\n  keyTest: event =>\r\n    (event.code === KEY_CODES.ZERO || event.code === KEY_CODES.NUM_ZERO) &&\r\n    (event[KEYS.META] || event.shiftKey),\r\n};\r\n","import { Action } from \"./types\";\r\nimport { KEYS } from \"../keys\";\r\nimport { clearSelection } from \"../scene\";\r\nimport { isInvisiblySmallElement } from \"../element\";\r\nimport { resetCursor } from \"../utils\";\r\n\r\nexport const actionFinalize: Action = {\r\n  name: \"finalize\",\r\n  perform: (elements, appState) => {\r\n    let newElements = clearSelection(elements);\r\n    if (window.document.activeElement instanceof HTMLElement) {\r\n      window.document.activeElement.blur();\r\n    }\r\n    if (appState.multiElement) {\r\n      appState.multiElement.points = appState.multiElement.points.slice(\r\n        0,\r\n        appState.multiElement.points.length - 1,\r\n      );\r\n      if (isInvisiblySmallElement(appState.multiElement)) {\r\n        newElements = newElements.slice(0, -1);\r\n      }\r\n      appState.multiElement.shape = null;\r\n    }\r\n    if (!appState.elementLocked || !appState.multiElement) {\r\n      resetCursor();\r\n    }\r\n    return {\r\n      elements: newElements,\r\n      appState: {\r\n        ...appState,\r\n        elementType:\r\n          appState.elementLocked && appState.multiElement\r\n            ? appState.elementType\r\n            : \"selection\",\r\n        draggingElement: null,\r\n        multiElement: null,\r\n      },\r\n    };\r\n  },\r\n  keyTest: (event, appState) =>\r\n    (event.key === KEYS.ESCAPE &&\r\n      !appState.draggingElement &&\r\n      appState.multiElement === null) ||\r\n    ((event.key === KEYS.ESCAPE || event.key === KEYS.ENTER) &&\r\n      appState.multiElement !== null),\r\n};\r\n","import \"./ProjectName.css\";\r\n\r\nimport React, { Component } from \"react\";\r\nimport { selectNode, removeSelection } from \"../utils\";\r\n\r\ntype Props = {\r\n  value: string;\r\n  onChange: (value: string) => void;\r\n  label: string;\r\n};\r\n\r\nexport class ProjectName extends Component<Props> {\r\n  private handleFocus = (e: React.FocusEvent<HTMLElement>) => {\r\n    selectNode(e.currentTarget);\r\n  };\r\n\r\n  private handleBlur = (e: React.FocusEvent<HTMLElement>) => {\r\n    const value = e.currentTarget.innerText.trim();\r\n    if (value !== this.props.value) {\r\n      this.props.onChange(value);\r\n    }\r\n    removeSelection();\r\n  };\r\n\r\n  private handleKeyDown = (e: React.KeyboardEvent<HTMLElement>) => {\r\n    if (e.key === \"Enter\") {\r\n      e.preventDefault();\r\n      if (e.nativeEvent.isComposing || e.keyCode === 229) {\r\n        return;\r\n      }\r\n      e.currentTarget.blur();\r\n    }\r\n  };\r\n\r\n  public render() {\r\n    return (\r\n      <span\r\n        suppressContentEditableWarning\r\n        contentEditable=\"true\"\r\n        data-type=\"wysiwyg\"\r\n        className=\"ProjectName\"\r\n        role=\"textbox\"\r\n        aria-label={this.props.label}\r\n        onBlur={this.handleBlur}\r\n        onKeyDown={this.handleKeyDown}\r\n        onFocus={this.handleFocus}\r\n      >\r\n        {this.props.value}\r\n      </span>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Action } from \"./types\";\r\nimport { ProjectName } from \"../components/ProjectName\";\r\nimport { saveAsJSON, loadFromJSON } from \"../scene\";\r\nimport { load, save } from \"../components/icons\";\r\nimport { ToolButton } from \"../components/ToolButton\";\r\nimport { t } from \"../i18n\";\r\n\r\nexport const actionChangeProjectName: Action = {\r\n  name: \"changeProjectName\",\r\n  perform: (elements, appState, value) => {\r\n    return { appState: { ...appState, name: value } };\r\n  },\r\n  PanelComponent: ({ appState, updateData }) => (\r\n    <ProjectName\r\n      label={t(\"labels.fileTitle\")}\r\n      value={appState.name || \"Unnamed\"}\r\n      onChange={(name: string) => updateData(name)}\r\n    />\r\n  ),\r\n};\r\n\r\nexport const actionChangeExportBackground: Action = {\r\n  name: \"changeExportBackground\",\r\n  perform: (elements, appState, value) => {\r\n    return { appState: { ...appState, exportBackground: value } };\r\n  },\r\n  PanelComponent: ({ appState, updateData }) => (\r\n    <label>\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={appState.exportBackground}\r\n        onChange={e => {\r\n          updateData(e.target.checked);\r\n        }}\r\n      />{\" \"}\r\n      {t(\"labels.withBackground\")}\r\n    </label>\r\n  ),\r\n};\r\n\r\nexport const actionSaveScene: Action = {\r\n  name: \"saveScene\",\r\n  perform: (elements, appState, value) => {\r\n    saveAsJSON(elements, appState).catch(err => console.error(err));\r\n    return {};\r\n  },\r\n  PanelComponent: ({ updateData }) => (\r\n    <ToolButton\r\n      type=\"button\"\r\n      icon={save}\r\n      title={t(\"buttons.save\")}\r\n      aria-label={t(\"buttons.save\")}\r\n      onClick={() => updateData(null)}\r\n    />\r\n  ),\r\n};\r\n\r\nexport const actionLoadScene: Action = {\r\n  name: \"loadScene\",\r\n  perform: (\r\n    elements,\r\n    appState,\r\n    { elements: loadedElements, appState: loadedAppState },\r\n  ) => {\r\n    return { elements: loadedElements, appState: loadedAppState };\r\n  },\r\n  PanelComponent: ({ updateData }) => (\r\n    <ToolButton\r\n      type=\"button\"\r\n      icon={load}\r\n      title={t(\"buttons.load\")}\r\n      aria-label={t(\"buttons.load\")}\r\n      onClick={() => {\r\n        loadFromJSON()\r\n          .then(({ elements, appState }) => {\r\n            updateData({ elements: elements, appState: appState });\r\n          })\r\n          .catch(err => console.error(err));\r\n      }}\r\n    />\r\n  ),\r\n};\r\n","import { Action } from \"./types\";\r\nimport { isTextElement, redrawTextBoundingBox } from \"../element\";\r\nimport { KEYS } from \"../keys\";\r\n\r\nlet copiedStyles: string = \"{}\";\r\n\r\nexport const actionCopyStyles: Action = {\r\n  name: \"copyStyles\",\r\n  perform: elements => {\r\n    const element = elements.find(el => el.isSelected);\r\n    if (element) {\r\n      copiedStyles = JSON.stringify(element);\r\n    }\r\n    return {};\r\n  },\r\n  contextItemLabel: \"labels.copyStyles\",\r\n  keyTest: event => event[KEYS.META] && event.shiftKey && event.key === \"C\",\r\n  contextMenuOrder: 0,\r\n};\r\n\r\nexport const actionPasteStyles: Action = {\r\n  name: \"pasteStyles\",\r\n  perform: elements => {\r\n    const pastedElement = JSON.parse(copiedStyles);\r\n    return {\r\n      elements: elements.map(element => {\r\n        if (element.isSelected) {\r\n          const newElement = {\r\n            ...element,\r\n            shape: null,\r\n            backgroundColor: pastedElement?.backgroundColor,\r\n            strokeWidth: pastedElement?.strokeWidth,\r\n            strokeColor: pastedElement?.strokeColor,\r\n            fillStyle: pastedElement?.fillStyle,\r\n            opacity: pastedElement?.opacity,\r\n            roughness: pastedElement?.roughness,\r\n          };\r\n          if (isTextElement(newElement)) {\r\n            newElement.font = pastedElement?.font;\r\n            redrawTextBoundingBox(newElement);\r\n          }\r\n          return newElement;\r\n        }\r\n        return element;\r\n      }),\r\n    };\r\n  },\r\n  commitToHistory: () => true,\r\n  contextItemLabel: \"labels.pasteStyles\",\r\n  keyTest: event => event[KEYS.META] && event.shiftKey && event.key === \"V\",\r\n  contextMenuOrder: 1,\r\n};\r\n","import \"./Island.css\";\r\n\r\nimport React from \"react\";\r\n\r\ntype IslandProps = { children: React.ReactNode; padding?: number };\r\n\r\nexport function Island({ children, padding }: IslandProps) {\r\n  return (\r\n    <div\r\n      className=\"Island\"\r\n      style={{ \"--padding\": padding } as React.CSSProperties}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n","import \"./Stack.css\";\r\n\r\nimport React from \"react\";\r\n\r\ntype StackProps = {\r\n  children: React.ReactNode;\r\n  gap?: number;\r\n  align?: \"start\" | \"center\" | \"end\" | \"baseline\";\r\n  justifyContent?: \"center\" | \"space-around\" | \"space-between\";\r\n};\r\n\r\nfunction RowStack({ children, gap, align, justifyContent }: StackProps) {\r\n  return (\r\n    <div\r\n      className=\"Stack Stack_horizontal\"\r\n      style={\r\n        {\r\n          \"--gap\": gap,\r\n          alignItems: align,\r\n          justifyContent,\r\n        } as React.CSSProperties\r\n      }\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ColStack({ children, gap, align, justifyContent }: StackProps) {\r\n  return (\r\n    <div\r\n      className=\"Stack Stack_vertical\"\r\n      style={\r\n        {\r\n          \"--gap\": gap,\r\n          justifyItems: align,\r\n          justifyContent,\r\n        } as React.CSSProperties\r\n      }\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default {\r\n  Row: RowStack,\r\n  Col: ColStack,\r\n};\r\n","import \"./FixedSideContainer.css\";\r\n\r\nimport React from \"react\";\r\n\r\ntype FixedSideContainerProps = {\r\n  children: React.ReactNode;\r\n  side: \"top\" | \"left\" | \"right\";\r\n};\r\n\r\nexport function FixedSideContainer({\r\n  children,\r\n  side,\r\n}: FixedSideContainerProps) {\r\n  return (\r\n    <div className={`FixedSideContainer FixedSideContainer_side_${side}`}>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n","import \"./ToolIcon.scss\";\r\n\r\nimport React from \"react\";\r\n\r\ntype LockIconSize = \"s\" | \"m\";\r\n\r\ntype LockIconProps = {\r\n  title?: string;\r\n  name?: string;\r\n  id?: string;\r\n  checked: boolean;\r\n  onChange?(): void;\r\n  size?: LockIconSize;\r\n};\r\n\r\nconst DEFAULT_SIZE: LockIconSize = \"m\";\r\n\r\nconst ICONS = {\r\n  CHECKED: (\r\n    <svg\r\n      width=\"1792\"\r\n      height=\"1792\"\r\n      viewBox=\"0 0 1792 1792\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n      <path d=\"M640 768h512v-192q0-106-75-181t-181-75-181 75-75 181v192zm832 96v576q0 40-28 68t-68 28h-960q-40 0-68-28t-28-68v-576q0-40 28-68t68-28h32v-192q0-184 132-316t316-132 316 132 132 316v192h32q40 0 68 28t28 68z\" />\r\n    </svg>\r\n  ),\r\n  UNCHECKED: (\r\n    <svg\r\n      width=\"1792\"\r\n      height=\"1792\"\r\n      viewBox=\"0 0 1792 1792\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      style={{ left: 2 }}\r\n    >\r\n      <path d=\"M1728 576v256q0 26-19 45t-45 19h-64q-26 0-45-19t-19-45v-256q0-106-75-181t-181-75-181 75-75 181v192h96q40 0 68 28t28 68v576q0 40-28 68t-68 28h-960q-40 0-68-28t-28-68v-576q0-40 28-68t68-28h672v-192q0-185 131.5-316.5t316.5-131.5 316.5 131.5 131.5 316.5z\" />\r\n    </svg>\r\n  ),\r\n};\r\n\r\nexport function LockIcon(props: LockIconProps) {\r\n  const sizeCn = `ToolIcon_size_${props.size || DEFAULT_SIZE}`;\r\n\r\n  return (\r\n    <label className={`ToolIcon ToolIcon__lock ${sizeCn}`} title={props.title}>\r\n      <input\r\n        className=\"ToolIcon_type_checkbox\"\r\n        type=\"checkbox\"\r\n        name={props.name}\r\n        id={props.id}\r\n        onChange={props.onChange}\r\n        checked={props.checked}\r\n        aria-label={props.title}\r\n      />\r\n      <div className=\"ToolIcon__icon\">\r\n        {props.checked ? ICONS.CHECKED : ICONS.UNCHECKED}\r\n      </div>\r\n    </label>\r\n  );\r\n}\r\n","import \"./Modal.css\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport { KEYS } from \"../keys\";\r\n\r\nexport function Modal(props: {\r\n  children: React.ReactNode;\r\n  maxWidth?: number;\r\n  onCloseRequest(): void;\r\n  labelledBy: string;\r\n}) {\r\n  const modalRoot = useBodyRoot();\r\n\r\n  const handleKeydown = (e: React.KeyboardEvent) => {\r\n    if (e.key === KEYS.ESCAPE) {\r\n      e.nativeEvent.stopImmediatePropagation();\r\n      props.onCloseRequest();\r\n    }\r\n  };\r\n  return createPortal(\r\n    <div\r\n      className=\"Modal\"\r\n      role=\"dialog\"\r\n      aria-modal=\"true\"\r\n      onKeyDown={handleKeydown}\r\n      aria-labelledby={props.labelledBy}\r\n    >\r\n      <div className=\"Modal__background\" onClick={props.onCloseRequest}></div>\r\n      <div className=\"Modal__content\" style={{ maxWidth: props.maxWidth }}>\r\n        {props.children}\r\n      </div>\r\n    </div>,\r\n    modalRoot,\r\n  );\r\n}\r\n\r\nfunction useBodyRoot() {\r\n  function createDiv() {\r\n    const div = document.createElement(\"div\");\r\n    document.body.appendChild(div);\r\n    return div;\r\n  }\r\n  const [div] = useState(createDiv);\r\n  useEffect(() => {\r\n    return () => {\r\n      document.body.removeChild(div);\r\n    };\r\n  }, [div]);\r\n  return div;\r\n}\r\n","import \"./ExportDialog.css\";\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\n\r\nimport { Modal } from \"./Modal\";\r\nimport { ToolButton } from \"./ToolButton\";\r\nimport { clipboard, exportFile } from \"./icons\";\r\nimport { Island } from \"./Island\";\r\nimport { ExcalidrawElement } from \"../element/types\";\r\nimport { AppState } from \"../types\";\r\nimport { exportToCanvas } from \"../scene/export\";\r\nimport { ActionsManagerInterface } from \"../actions/types\";\r\nimport Stack from \"./Stack\";\r\nimport { t } from \"../i18n\";\r\n\r\nimport { KEYS } from \"../keys\";\r\n\r\nimport { probablySupportsClipboardBlob } from \"../clipboard\";\r\nimport { getSelectedElements, isSomeElementSelected } from \"../scene\";\r\n\r\nconst scales = [1, 2, 3];\r\nconst defaultScale = scales.includes(devicePixelRatio) ? devicePixelRatio : 1;\r\n\r\ntype ExportCB = (\r\n  elements: readonly ExcalidrawElement[],\r\n  scale?: number,\r\n) => void;\r\n\r\nfunction ExportModal({\r\n  elements,\r\n  appState,\r\n  exportPadding = 10,\r\n  actionManager,\r\n  onExportToPng,\r\n  onExportToSvg,\r\n  onExportToClipboard,\r\n  onCloseRequest,\r\n}: {\r\n  appState: AppState;\r\n  elements: readonly ExcalidrawElement[];\r\n  exportPadding?: number;\r\n  actionManager: ActionsManagerInterface;\r\n  onExportToPng: ExportCB;\r\n  onExportToSvg: ExportCB;\r\n  onExportToClipboard: ExportCB;\r\n  onCloseRequest: () => void;\r\n}) {\r\n  const someElementIsSelected = isSomeElementSelected(elements);\r\n  const [scale, setScale] = useState(defaultScale);\r\n  const [exportSelected, setExportSelected] = useState(someElementIsSelected);\r\n  const previewRef = useRef<HTMLDivElement>(null);\r\n  const { exportBackground, viewBackgroundColor } = appState;\r\n  const pngButton = useRef<HTMLButtonElement>(null);\r\n  const closeButton = useRef<HTMLButtonElement>(null);\r\n  const onlySelectedInput = useRef<HTMLInputElement>(null);\r\n\r\n  const exportedElements = exportSelected\r\n    ? getSelectedElements(elements)\r\n    : elements;\r\n\r\n  useEffect(() => {\r\n    setExportSelected(someElementIsSelected);\r\n  }, [someElementIsSelected]);\r\n\r\n  useEffect(() => {\r\n    const previewNode = previewRef.current;\r\n    const canvas = exportToCanvas(exportedElements, {\r\n      exportBackground,\r\n      viewBackgroundColor,\r\n      exportPadding,\r\n      scale,\r\n    });\r\n    previewNode?.appendChild(canvas);\r\n    return () => {\r\n      previewNode?.removeChild(canvas);\r\n    };\r\n  }, [\r\n    exportedElements,\r\n    exportBackground,\r\n    exportPadding,\r\n    viewBackgroundColor,\r\n    scale,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    pngButton.current?.focus();\r\n  }, []);\r\n\r\n  function handleKeyDown(e: React.KeyboardEvent) {\r\n    if (e.key === KEYS.TAB) {\r\n      const { activeElement } = document;\r\n      if (e.shiftKey) {\r\n        if (activeElement === pngButton.current) {\r\n          closeButton.current?.focus();\r\n          e.preventDefault();\r\n        }\r\n      } else {\r\n        if (activeElement === closeButton.current) {\r\n          pngButton.current?.focus();\r\n          e.preventDefault();\r\n        }\r\n        if (activeElement === onlySelectedInput.current) {\r\n          closeButton.current?.focus();\r\n          e.preventDefault();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"ExportDialog__dialog\" onKeyDown={handleKeyDown}>\r\n      <Island padding={4}>\r\n        <button\r\n          className=\"ExportDialog__close\"\r\n          onClick={onCloseRequest}\r\n          aria-label={t(\"buttons.close\")}\r\n          ref={closeButton}\r\n        >\r\n          ╳\r\n        </button>\r\n        <h2 id=\"export-title\">{t(\"buttons.export\")}</h2>\r\n        <div className=\"ExportDialog__preview\" ref={previewRef}></div>\r\n        <div className=\"ExportDialog__actions\">\r\n          <Stack.Col gap={1}>\r\n            <Stack.Row gap={2}>\r\n              <ToolButton\r\n                type=\"button\"\r\n                label=\"PNG\"\r\n                title={t(\"buttons.exportToPng\")}\r\n                aria-label={t(\"buttons.exportToPng\")}\r\n                onClick={() => onExportToPng(exportedElements, scale)}\r\n                ref={pngButton}\r\n              />\r\n              <ToolButton\r\n                type=\"button\"\r\n                label=\"SVG\"\r\n                title={t(\"buttons.exportToSvg\")}\r\n                aria-label={t(\"buttons.exportToSvg\")}\r\n                onClick={() => onExportToSvg(exportedElements, scale)}\r\n              />\r\n              {probablySupportsClipboardBlob && (\r\n                <ToolButton\r\n                  type=\"button\"\r\n                  icon={clipboard}\r\n                  title={t(\"buttons.copyToClipboard\")}\r\n                  aria-label={t(\"buttons.copyToClipboard\")}\r\n                  onClick={() => onExportToClipboard(exportedElements, scale)}\r\n                />\r\n              )}\r\n            </Stack.Row>\r\n          </Stack.Col>\r\n\r\n          {actionManager.renderAction(\"changeProjectName\")}\r\n          <Stack.Col gap={1}>\r\n            <div className=\"ExportDialog__scales\">\r\n              <Stack.Row gap={2} align=\"baseline\">\r\n                {scales.map(s => (\r\n                  <ToolButton\r\n                    key={s}\r\n                    size=\"s\"\r\n                    type=\"radio\"\r\n                    icon={`x${s}`}\r\n                    name=\"export-canvas-scale\"\r\n                    aria-label={`Scale ${s} x`}\r\n                    id=\"export-canvas-scale\"\r\n                    checked={scale === s}\r\n                    onChange={() => setScale(s)}\r\n                  />\r\n                ))}\r\n              </Stack.Row>\r\n            </div>\r\n            {actionManager.renderAction(\"changeExportBackground\")}\r\n            {someElementIsSelected && (\r\n              <div>\r\n                <label>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={exportSelected}\r\n                    onChange={e => setExportSelected(e.currentTarget.checked)}\r\n                    ref={onlySelectedInput}\r\n                  />{\" \"}\r\n                  {t(\"labels.onlySelected\")}\r\n                </label>\r\n              </div>\r\n            )}\r\n          </Stack.Col>\r\n        </div>\r\n      </Island>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function ExportDialog({\r\n  elements,\r\n  appState,\r\n  exportPadding = 10,\r\n  actionManager,\r\n  onExportToPng,\r\n  onExportToSvg,\r\n  onExportToClipboard,\r\n}: {\r\n  appState: AppState;\r\n  elements: readonly ExcalidrawElement[];\r\n  exportPadding?: number;\r\n  actionManager: ActionsManagerInterface;\r\n  onExportToPng: ExportCB;\r\n  onExportToSvg: ExportCB;\r\n  onExportToClipboard: ExportCB;\r\n}) {\r\n  const [modalIsShown, setModalIsShown] = useState(false);\r\n  const triggerButton = useRef<HTMLButtonElement>(null);\r\n\r\n  const handleClose = React.useCallback(() => {\r\n    setModalIsShown(false);\r\n    triggerButton.current?.focus();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <ToolButton\r\n        onClick={() => setModalIsShown(true)}\r\n        icon={exportFile}\r\n        type=\"button\"\r\n        aria-label={t(\"buttons.export\")}\r\n        title={t(\"buttons.export\")}\r\n        ref={triggerButton}\r\n      />\r\n      {modalIsShown && (\r\n        <Modal\r\n          maxWidth={800}\r\n          onCloseRequest={handleClose}\r\n          labelledBy=\"export-title\"\r\n        >\r\n          <ExportModal\r\n            elements={elements}\r\n            appState={appState}\r\n            exportPadding={exportPadding}\r\n            actionManager={actionManager}\r\n            onExportToPng={onExportToPng}\r\n            onExportToSvg={onExportToSvg}\r\n            onExportToClipboard={onExportToClipboard}\r\n            onCloseRequest={handleClose}\r\n          />\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { t } from \"../i18n\";\r\n\r\nexport function LanguageList<T>({\r\n  onChange,\r\n  languages,\r\n  currentLanguage,\r\n}: {\r\n  languages: { lng: string; label: string }[];\r\n  onChange: (value: string) => void;\r\n  currentLanguage: string;\r\n}) {\r\n  return (\r\n    <React.Fragment>\r\n      <select\r\n        className=\"language-select\"\r\n        onChange={({ target }) => onChange(target.value)}\r\n        value={currentLanguage}\r\n        aria-label={t(\"buttons.selectLanguage\")}\r\n      >\r\n        {languages.map(language => (\r\n          <option key={language.lng} value={language.lng}>\r\n            {language.label}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { t } from \"../i18n\";\r\nimport { ExcalidrawElement } from \"../element/types\";\r\nimport { getSelectedElements } from \"../scene\";\r\n\r\nimport \"./HintViewer.css\";\r\n\r\ninterface Hint {\r\n  elementType: string;\r\n  multiMode: boolean;\r\n  isResizing: boolean;\r\n  elements: readonly ExcalidrawElement[];\r\n}\r\n\r\nconst getHints = ({ elementType, multiMode, isResizing, elements }: Hint) => {\r\n  if (elementType === \"arrow\" || elementType === \"line\") {\r\n    if (!multiMode) {\r\n      return t(\"hints.linearElement\");\r\n    }\r\n    return t(\"hints.linearElementMulti\");\r\n  }\r\n\r\n  if (isResizing) {\r\n    const selectedElements = getSelectedElements(elements);\r\n    if (\r\n      selectedElements.length === 1 &&\r\n      (selectedElements[0].type === \"arrow\" ||\r\n        selectedElements[0].type === \"line\") &&\r\n      selectedElements[0].points.length > 2\r\n    ) {\r\n      return null;\r\n    }\r\n    return t(\"hints.resize\");\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const HintViewer = ({\r\n  elementType,\r\n  multiMode,\r\n  isResizing,\r\n  elements,\r\n}: Hint) => {\r\n  const hint = getHints({\r\n    elementType,\r\n    multiMode,\r\n    isResizing,\r\n    elements,\r\n  });\r\n  if (!hint) {\r\n    return null;\r\n  }\r\n\r\n  return <div className=\"HintViewer\">{hint}</div>;\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport rough from \"roughjs/bin/rough\";\r\nimport { RoughCanvas } from \"roughjs/bin/canvas\";\r\n\r\nimport {\r\n  newElement,\r\n  newTextElement,\r\n  duplicateElement,\r\n  resizeTest,\r\n  normalizeResizeHandle,\r\n  isInvisiblySmallElement,\r\n  isTextElement,\r\n  textWysiwyg,\r\n  getCommonBounds,\r\n  getCursorForResizingElement,\r\n  getPerfectElementSize,\r\n  normalizeDimensions,\r\n} from \"./element\";\r\nimport {\r\n  clearSelection,\r\n  deleteSelectedElements,\r\n  getElementsWithinSelection,\r\n  isOverScrollBars,\r\n  saveToLocalStorage,\r\n  getElementAtPosition,\r\n  createScene,\r\n  getElementContainingPosition,\r\n  hasBackground,\r\n  hasStroke,\r\n  hasText,\r\n  exportCanvas,\r\n  loadScene,\r\n  calculateScrollCenter,\r\n  loadFromBlob,\r\n  getZoomOrigin,\r\n  getNormalizedZoom,\r\n  getSelectedElements,\r\n  isSomeElementSelected,\r\n} from \"./scene\";\r\n\r\nimport { renderScene } from \"./renderer\";\r\nimport { AppState } from \"./types\";\r\nimport { ExcalidrawElement } from \"./element/types\";\r\n\r\nimport {\r\n  isWritableElement,\r\n  isInputLike,\r\n  isToolIcon,\r\n  debounce,\r\n  capitalizeString,\r\n  distance,\r\n  distance2d,\r\n  resetCursor,\r\n} from \"./utils\";\r\nimport { KEYS, isArrowKey } from \"./keys\";\r\n\r\nimport { findShapeByKey, shapesShortcutKeys, SHAPES } from \"./shapes\";\r\nimport { createHistory } from \"./history\";\r\n\r\nimport ContextMenu from \"./components/ContextMenu\";\r\n\r\nimport \"./styles.scss\";\r\nimport { getElementWithResizeHandler } from \"./element/resizeTest\";\r\nimport {\r\n  ActionManager,\r\n  actionDeleteSelected,\r\n  actionSendBackward,\r\n  actionBringForward,\r\n  actionSendToBack,\r\n  actionBringToFront,\r\n  actionSelectAll,\r\n  actionChangeStrokeColor,\r\n  actionChangeBackgroundColor,\r\n  actionChangeOpacity,\r\n  actionChangeStrokeWidth,\r\n  actionChangeFillStyle,\r\n  actionChangeSloppiness,\r\n  actionChangeFontSize,\r\n  actionChangeFontFamily,\r\n  actionChangeViewBackgroundColor,\r\n  actionClearCanvas,\r\n  actionZoomIn,\r\n  actionZoomOut,\r\n  actionResetZoom,\r\n  actionChangeProjectName,\r\n  actionChangeExportBackground,\r\n  actionLoadScene,\r\n  actionSaveScene,\r\n  actionCopyStyles,\r\n  actionPasteStyles,\r\n  actionFinalize,\r\n} from \"./actions\";\r\nimport { Action, ActionResult } from \"./actions/types\";\r\nimport { getDefaultAppState } from \"./appState\";\r\nimport { Island } from \"./components/Island\";\r\nimport Stack from \"./components/Stack\";\r\nimport { FixedSideContainer } from \"./components/FixedSideContainer\";\r\nimport { ToolButton } from \"./components/ToolButton\";\r\nimport { LockIcon } from \"./components/LockIcon\";\r\nimport { ExportDialog } from \"./components/ExportDialog\";\r\nimport { LanguageList } from \"./components/LanguageList\";\r\nimport { Point } from \"roughjs/bin/geometry\";\r\nimport { t, languages, setLanguage, getLanguage } from \"./i18n\";\r\nimport { HintViewer } from \"./components/HintViewer\";\r\n\r\nimport { copyToAppClipboard, getClipboardContent } from \"./clipboard\";\r\n\r\nlet { elements } = createScene();\r\nconst { history } = createHistory();\r\n\r\nfunction setCursorForShape(shape: string) {\r\n  if (shape === \"selection\") {\r\n    resetCursor();\r\n  } else {\r\n    document.documentElement.style.cursor =\r\n      shape === \"text\" ? CURSOR_TYPE.TEXT : CURSOR_TYPE.CROSSHAIR;\r\n  }\r\n}\r\n\r\nconst DRAGGING_THRESHOLD = 10; // 10px\r\nconst ELEMENT_SHIFT_TRANSLATE_AMOUNT = 5;\r\nconst ELEMENT_TRANSLATE_AMOUNT = 1;\r\nconst TEXT_TO_CENTER_SNAP_THRESHOLD = 30;\r\nconst CURSOR_TYPE = {\r\n  TEXT: \"text\",\r\n  CROSSHAIR: \"crosshair\",\r\n  GRABBING: \"grabbing\",\r\n};\r\nconst MOUSE_BUTTON = {\r\n  MAIN: 0,\r\n  WHEEL: 1,\r\n  SECONDARY: 2,\r\n};\r\n\r\nlet lastMouseUp: ((e: any) => void) | null = null;\r\n\r\nexport function viewportCoordsToSceneCoords(\r\n  { clientX, clientY }: { clientX: number; clientY: number },\r\n  {\r\n    scrollX,\r\n    scrollY,\r\n    zoom,\r\n  }: {\r\n    scrollX: number;\r\n    scrollY: number;\r\n    zoom: number;\r\n  },\r\n  canvas: HTMLCanvasElement | null,\r\n) {\r\n  const zoomOrigin = getZoomOrigin(canvas);\r\n  const clientXWithZoom = zoomOrigin.x + (clientX - zoomOrigin.x) / zoom;\r\n  const clientYWithZoom = zoomOrigin.y + (clientY - zoomOrigin.y) / zoom;\r\n\r\n  const x = clientXWithZoom - scrollX;\r\n  const y = clientYWithZoom - scrollY;\r\n\r\n  return { x, y };\r\n}\r\n\r\nexport function sceneCoordsToViewportCoords(\r\n  { sceneX, sceneY }: { sceneX: number; sceneY: number },\r\n  {\r\n    scrollX,\r\n    scrollY,\r\n    zoom,\r\n  }: {\r\n    scrollX: number;\r\n    scrollY: number;\r\n    zoom: number;\r\n  },\r\n  canvas: HTMLCanvasElement | null,\r\n) {\r\n  const zoomOrigin = getZoomOrigin(canvas);\r\n  const sceneXWithZoomAndScroll =\r\n    zoomOrigin.x - (zoomOrigin.x - sceneX - scrollX) * zoom;\r\n  const sceneYWithZoomAndScroll =\r\n    zoomOrigin.y - (zoomOrigin.y - sceneY - scrollY) * zoom;\r\n\r\n  const x = sceneXWithZoomAndScroll;\r\n  const y = sceneYWithZoomAndScroll;\r\n\r\n  return { x, y };\r\n}\r\n\r\nlet cursorX = 0;\r\nlet cursorY = 0;\r\nlet isHoldingSpace: boolean = false;\r\nlet isPanning: boolean = false;\r\nlet isHoldingMouseButton: boolean = false;\r\n\r\ninterface LayerUIProps {\r\n  actionManager: ActionManager;\r\n  appState: AppState;\r\n  canvas: HTMLCanvasElement | null;\r\n  setAppState: any;\r\n  elements: readonly ExcalidrawElement[];\r\n  language: string;\r\n  setElements: (elements: readonly ExcalidrawElement[]) => void;\r\n}\r\n\r\nconst LayerUI = React.memo(\r\n  ({\r\n    actionManager,\r\n    appState,\r\n    setAppState,\r\n    canvas,\r\n    elements,\r\n    language,\r\n    setElements,\r\n  }: LayerUIProps) => {\r\n    function renderCanvasActions() {\r\n      return (\r\n        <Stack.Col gap={4}>\r\n          <Stack.Row justifyContent={\"space-between\"}>\r\n            {actionManager.renderAction(\"loadScene\")}\r\n            {actionManager.renderAction(\"saveScene\")}\r\n            <ExportDialog\r\n              elements={elements}\r\n              appState={appState}\r\n              actionManager={actionManager}\r\n              onExportToPng={(exportedElements, scale) => {\r\n                if (canvas) {\r\n                  exportCanvas(\"png\", exportedElements, canvas, {\r\n                    exportBackground: appState.exportBackground,\r\n                    name: appState.name,\r\n                    viewBackgroundColor: appState.viewBackgroundColor,\r\n                    scale,\r\n                  });\r\n                }\r\n              }}\r\n              onExportToSvg={(exportedElements, scale) => {\r\n                if (canvas) {\r\n                  exportCanvas(\"svg\", exportedElements, canvas, {\r\n                    exportBackground: appState.exportBackground,\r\n                    name: appState.name,\r\n                    viewBackgroundColor: appState.viewBackgroundColor,\r\n                    scale,\r\n                  });\r\n                }\r\n              }}\r\n              onExportToClipboard={(exportedElements, scale) => {\r\n                if (canvas) {\r\n                  exportCanvas(\"clipboard\", exportedElements, canvas, {\r\n                    exportBackground: appState.exportBackground,\r\n                    name: appState.name,\r\n                    viewBackgroundColor: appState.viewBackgroundColor,\r\n                    scale,\r\n                  });\r\n                }\r\n              }}\r\n            />\r\n            {actionManager.renderAction(\"clearCanvas\")}\r\n          </Stack.Row>\r\n          {actionManager.renderAction(\"changeViewBackgroundColor\")}\r\n        </Stack.Col>\r\n      );\r\n    }\r\n\r\n    function renderSelectedShapeActions(\r\n      elements: readonly ExcalidrawElement[],\r\n    ) {\r\n      const { elementType, editingElement } = appState;\r\n      const targetElements = editingElement\r\n        ? [editingElement]\r\n        : getSelectedElements(elements);\r\n      if (!targetElements.length && elementType === \"selection\") {\r\n        return null;\r\n      }\r\n\r\n      return (\r\n        <Island padding={4}>\r\n          <div className=\"panelColumn\">\r\n            {actionManager.renderAction(\"changeStrokeColor\")}\r\n            {(hasBackground(elementType) ||\r\n              targetElements.some(element => hasBackground(element.type))) && (\r\n              <>\r\n                {actionManager.renderAction(\"changeBackgroundColor\")}\r\n\r\n                {actionManager.renderAction(\"changeFillStyle\")}\r\n              </>\r\n            )}\r\n\r\n            {(hasStroke(elementType) ||\r\n              targetElements.some(element => hasStroke(element.type))) && (\r\n              <>\r\n                {actionManager.renderAction(\"changeStrokeWidth\")}\r\n\r\n                {actionManager.renderAction(\"changeSloppiness\")}\r\n              </>\r\n            )}\r\n\r\n            {(hasText(elementType) ||\r\n              targetElements.some(element => hasText(element.type))) && (\r\n              <>\r\n                {actionManager.renderAction(\"changeFontSize\")}\r\n\r\n                {actionManager.renderAction(\"changeFontFamily\")}\r\n              </>\r\n            )}\r\n\r\n            {actionManager.renderAction(\"changeOpacity\")}\r\n\r\n            <fieldset>\r\n              <legend>{t(\"labels.layers\")}</legend>\r\n              <div className=\"buttonList\">\r\n                {actionManager.renderAction(\"sendToBack\")}\r\n                {actionManager.renderAction(\"sendBackward\")}\r\n                {actionManager.renderAction(\"bringToFront\")}\r\n                {actionManager.renderAction(\"bringForward\")}\r\n              </div>\r\n            </fieldset>\r\n\r\n            {actionManager.renderAction(\"deleteSelectedElements\")}\r\n          </div>\r\n        </Island>\r\n      );\r\n    }\r\n\r\n    function renderShapesSwitcher() {\r\n      return (\r\n        <>\r\n          {SHAPES.map(({ value, icon }, index) => {\r\n            const label = t(`toolBar.${value}`);\r\n            return (\r\n              <ToolButton\r\n                key={value}\r\n                type=\"radio\"\r\n                icon={icon}\r\n                checked={appState.elementType === value}\r\n                name=\"editor-current-shape\"\r\n                title={`${capitalizeString(label)} — ${\r\n                  capitalizeString(value)[0]\r\n                }, ${index + 1}`}\r\n                keyBindingLabel={`${index + 1}`}\r\n                aria-label={capitalizeString(label)}\r\n                aria-keyshortcuts={`${label[0]} ${index + 1}`}\r\n                onChange={() => {\r\n                  setAppState({ elementType: value, multiElement: null });\r\n                  setElements(clearSelection(elements));\r\n                  document.documentElement.style.cursor =\r\n                    value === \"text\" ? CURSOR_TYPE.TEXT : CURSOR_TYPE.CROSSHAIR;\r\n                  setAppState({});\r\n                }}\r\n              ></ToolButton>\r\n            );\r\n          })}\r\n        </>\r\n      );\r\n    }\r\n\r\n    function renderZoomActions() {\r\n      return (\r\n        <Stack.Col gap={1}>\r\n          <Stack.Row gap={1} align=\"center\">\r\n            {actionManager.renderAction(\"zoomIn\")}\r\n            {actionManager.renderAction(\"zoomOut\")}\r\n            <div style={{ marginLeft: 4 }}>\r\n              {(appState.zoom * 100).toFixed(0)}%\r\n            </div>\r\n          </Stack.Row>\r\n        </Stack.Col>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <FixedSideContainer side=\"top\">\r\n          <div className=\"App-menu App-menu_top\">\r\n            <Stack.Col gap={4} align=\"end\">\r\n              <section\r\n                className=\"App-right-menu\"\r\n                aria-labelledby=\"canvas-actions-title\"\r\n              >\r\n                <h2 className=\"visually-hidden\" id=\"canvas-actions-title\">\r\n                  {t(\"headings.canvasActions\")}\r\n                </h2>\r\n                <Island padding={4}>{renderCanvasActions()}</Island>\r\n              </section>\r\n              <section\r\n                className=\"App-right-menu\"\r\n                aria-labelledby=\"selected-shape-title\"\r\n              >\r\n                <h2 className=\"visually-hidden\" id=\"selected-shape-title\">\r\n                  {t(\"headings.selectedShapeActions\")}\r\n                </h2>\r\n                {renderSelectedShapeActions(elements)}\r\n              </section>\r\n            </Stack.Col>\r\n            <section aria-labelledby=\"shapes-title\">\r\n              <Stack.Col gap={4} align=\"start\">\r\n                <Stack.Row gap={1}>\r\n                  <Island padding={1}>\r\n                    <h2 className=\"visually-hidden\" id=\"shapes-title\">\r\n                      {t(\"headings.shapes\")}\r\n                    </h2>\r\n                    <Stack.Row gap={1}>{renderShapesSwitcher()}</Stack.Row>\r\n                  </Island>\r\n                  <LockIcon\r\n                    checked={appState.elementLocked}\r\n                    onChange={() => {\r\n                      setAppState({\r\n                        elementLocked: !appState.elementLocked,\r\n                        elementType: appState.elementLocked\r\n                          ? \"selection\"\r\n                          : appState.elementType,\r\n                      });\r\n                    }}\r\n                    title={t(\"toolBar.lock\")}\r\n                  />\r\n                </Stack.Row>\r\n              </Stack.Col>\r\n            </section>\r\n            <div />\r\n          </div>\r\n          <div className=\"App-menu App-menu_bottom\">\r\n            <Stack.Col gap={2}>\r\n              <section aria-labelledby=\"canvas-zoom-actions-title\">\r\n                <h2 className=\"visually-hidden\" id=\"canvas-zoom-actions-title\">\r\n                  {t(\"headings.canvasActions\")}\r\n                </h2>\r\n                <Island padding={1}>{renderZoomActions()}</Island>\r\n              </section>\r\n            </Stack.Col>\r\n          </div>\r\n        </FixedSideContainer>\r\n        <footer role=\"contentinfo\">\r\n          <HintViewer\r\n            elementType={appState.elementType}\r\n            multiMode={appState.multiElement !== null}\r\n            isResizing={appState.isResizing}\r\n            elements={elements}\r\n          />\r\n          <LanguageList\r\n            onChange={lng => {\r\n              setLanguage(lng);\r\n              setAppState({});\r\n            }}\r\n            languages={languages}\r\n            currentLanguage={language}\r\n          />\r\n          {appState.scrolledOutside && (\r\n            <button\r\n              className=\"scroll-back-to-content\"\r\n              onClick={() => {\r\n                setAppState({ ...calculateScrollCenter(elements) });\r\n              }}\r\n            >\r\n              {t(\"buttons.scrollBackToContent\")}\r\n            </button>\r\n          )}\r\n        </footer>\r\n      </>\r\n    );\r\n  },\r\n  (prev, next) => {\r\n    const getNecessaryObj = (appState: AppState): Partial<AppState> => {\r\n      const {\r\n        draggingElement,\r\n        resizingElement,\r\n        multiElement,\r\n        editingElement,\r\n        isResizing,\r\n        cursorX,\r\n        cursorY,\r\n        ...ret\r\n      } = appState;\r\n      return ret;\r\n    };\r\n    const prevAppState = getNecessaryObj(prev.appState);\r\n    const nextAppState = getNecessaryObj(next.appState);\r\n\r\n    const keys = Object.keys(prevAppState) as (keyof Partial<AppState>)[];\r\n\r\n    return (\r\n      prev.language === next.language &&\r\n      prev.elements === next.elements &&\r\n      keys.every(k => prevAppState[k] === nextAppState[k])\r\n    );\r\n  },\r\n);\r\n\r\nexport class App extends React.Component<any, AppState> {\r\n  canvas: HTMLCanvasElement | null = null;\r\n  rc: RoughCanvas | null = null;\r\n\r\n  actionManager: ActionManager;\r\n  canvasOnlyActions: Array<Action>;\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.actionManager = new ActionManager(\r\n      this.syncActionResult,\r\n      () => this.state,\r\n      () => elements,\r\n    );\r\n    this.actionManager.registerAction(actionFinalize);\r\n    this.actionManager.registerAction(actionDeleteSelected);\r\n    this.actionManager.registerAction(actionSendToBack);\r\n    this.actionManager.registerAction(actionBringToFront);\r\n    this.actionManager.registerAction(actionSendBackward);\r\n    this.actionManager.registerAction(actionBringForward);\r\n    this.actionManager.registerAction(actionSelectAll);\r\n\r\n    this.actionManager.registerAction(actionChangeStrokeColor);\r\n    this.actionManager.registerAction(actionChangeBackgroundColor);\r\n    this.actionManager.registerAction(actionChangeFillStyle);\r\n    this.actionManager.registerAction(actionChangeStrokeWidth);\r\n    this.actionManager.registerAction(actionChangeOpacity);\r\n    this.actionManager.registerAction(actionChangeSloppiness);\r\n    this.actionManager.registerAction(actionChangeFontSize);\r\n    this.actionManager.registerAction(actionChangeFontFamily);\r\n\r\n    this.actionManager.registerAction(actionChangeViewBackgroundColor);\r\n    this.actionManager.registerAction(actionClearCanvas);\r\n    this.actionManager.registerAction(actionZoomIn);\r\n    this.actionManager.registerAction(actionZoomOut);\r\n    this.actionManager.registerAction(actionResetZoom);\r\n\r\n    this.actionManager.registerAction(actionChangeProjectName);\r\n    this.actionManager.registerAction(actionChangeExportBackground);\r\n    this.actionManager.registerAction(actionSaveScene);\r\n    this.actionManager.registerAction(actionLoadScene);\r\n\r\n    this.actionManager.registerAction(actionCopyStyles);\r\n    this.actionManager.registerAction(actionPasteStyles);\r\n\r\n    this.canvasOnlyActions = [actionSelectAll];\r\n  }\r\n\r\n  private syncActionResult = (\r\n    res: ActionResult,\r\n    commitToHistory: boolean = true,\r\n  ) => {\r\n    if (this.unmounted) {\r\n      return;\r\n    }\r\n    if (res.elements) {\r\n      elements = res.elements;\r\n      if (commitToHistory) {\r\n        history.resumeRecording();\r\n      }\r\n      this.setState({});\r\n    }\r\n\r\n    if (res.appState) {\r\n      if (commitToHistory) {\r\n        history.resumeRecording();\r\n      }\r\n      this.setState({ ...res.appState });\r\n    }\r\n  };\r\n\r\n  private onCut = (e: ClipboardEvent) => {\r\n    if (isWritableElement(e.target)) {\r\n      return;\r\n    }\r\n    copyToAppClipboard(elements);\r\n    elements = deleteSelectedElements(elements);\r\n    history.resumeRecording();\r\n    this.setState({});\r\n    e.preventDefault();\r\n  };\r\n  private onCopy = (e: ClipboardEvent) => {\r\n    if (isWritableElement(e.target)) {\r\n      return;\r\n    }\r\n    copyToAppClipboard(elements);\r\n    e.preventDefault();\r\n  };\r\n\r\n  private onUnload = () => {\r\n    isHoldingSpace = false;\r\n    this.saveDebounced();\r\n    this.saveDebounced.flush();\r\n  };\r\n\r\n  private disableEvent: EventHandlerNonNull = e => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  private unmounted = false;\r\n  public async componentDidMount() {\r\n    document.addEventListener(\"copy\", this.onCopy);\r\n    document.addEventListener(\"paste\", this.pasteFromClipboard);\r\n    document.addEventListener(\"cut\", this.onCut);\r\n\r\n    document.addEventListener(\"keydown\", this.onKeyDown, false);\r\n    document.addEventListener(\"keyup\", this.onKeyUp, { passive: true });\r\n    document.addEventListener(\"mousemove\", this.updateCurrentCursorPosition);\r\n    window.addEventListener(\"resize\", this.onResize, false);\r\n    window.addEventListener(\"unload\", this.onUnload, false);\r\n    window.addEventListener(\"blur\", this.onUnload, false);\r\n    window.addEventListener(\"dragover\", this.disableEvent, false);\r\n    window.addEventListener(\"drop\", this.disableEvent, false);\r\n\r\n    const scene = await loadScene();\r\n    this.syncActionResult(scene);\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    this.unmounted = true;\r\n    document.removeEventListener(\"copy\", this.onCopy);\r\n    document.removeEventListener(\"paste\", this.pasteFromClipboard);\r\n    document.removeEventListener(\"cut\", this.onCut);\r\n\r\n    document.removeEventListener(\"keydown\", this.onKeyDown, false);\r\n    document.removeEventListener(\r\n      \"mousemove\",\r\n      this.updateCurrentCursorPosition,\r\n      false,\r\n    );\r\n    document.removeEventListener(\"keyup\", this.onKeyUp);\r\n    window.removeEventListener(\"resize\", this.onResize, false);\r\n    window.removeEventListener(\"unload\", this.onUnload, false);\r\n    window.removeEventListener(\"blur\", this.onUnload, false);\r\n    window.removeEventListener(\"dragover\", this.disableEvent, false);\r\n    window.removeEventListener(\"drop\", this.disableEvent, false);\r\n  }\r\n\r\n  public state: AppState = getDefaultAppState();\r\n\r\n  private onResize = () => {\r\n    this.setState({});\r\n  };\r\n\r\n  private updateCurrentCursorPosition = (e: MouseEvent) => {\r\n    cursorX = e.x;\r\n    cursorY = e.y;\r\n  };\r\n\r\n  private onKeyDown = (event: KeyboardEvent) => {\r\n    if (\r\n      (isWritableElement(event.target) && event.key !== KEYS.ESCAPE) ||\r\n      // case: using arrows to move between buttons\r\n      (isArrowKey(event.key) && isInputLike(event.target))\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (this.actionManager.handleKeyDown(event)) {\r\n      return;\r\n    }\r\n\r\n    const shape = findShapeByKey(event.key);\r\n\r\n    if (isArrowKey(event.key)) {\r\n      const step = event.shiftKey\r\n        ? ELEMENT_SHIFT_TRANSLATE_AMOUNT\r\n        : ELEMENT_TRANSLATE_AMOUNT;\r\n      elements = elements.map(el => {\r\n        if (el.isSelected) {\r\n          const element = { ...el };\r\n          if (event.key === KEYS.ARROW_LEFT) {\r\n            element.x -= step;\r\n          } else if (event.key === KEYS.ARROW_RIGHT) {\r\n            element.x += step;\r\n          } else if (event.key === KEYS.ARROW_UP) {\r\n            element.y -= step;\r\n          } else if (event.key === KEYS.ARROW_DOWN) {\r\n            element.y += step;\r\n          }\r\n          return element;\r\n        }\r\n        return el;\r\n      });\r\n      this.setState({});\r\n      event.preventDefault();\r\n    } else if (\r\n      shapesShortcutKeys.includes(event.key.toLowerCase()) &&\r\n      !event.ctrlKey &&\r\n      !event.altKey &&\r\n      !event.metaKey &&\r\n      this.state.draggingElement === null\r\n    ) {\r\n      this.selectShapeTool(shape);\r\n      // Undo action\r\n    } else if (event[KEYS.META] && /z/i.test(event.key)) {\r\n      event.preventDefault();\r\n\r\n      if (\r\n        this.state.multiElement ||\r\n        this.state.resizingElement ||\r\n        this.state.editingElement ||\r\n        this.state.draggingElement\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      if (event.shiftKey) {\r\n        // Redo action\r\n        const data = history.redoOnce();\r\n        if (data !== null) {\r\n          elements = data.elements;\r\n          this.setState({ ...data.appState });\r\n        }\r\n      } else {\r\n        // undo action\r\n        const data = history.undoOnce();\r\n        if (data !== null) {\r\n          elements = data.elements;\r\n          this.setState({ ...data.appState });\r\n        }\r\n      }\r\n    } else if (event.key === KEYS.SPACE && !isHoldingMouseButton) {\r\n      isHoldingSpace = true;\r\n      document.documentElement.style.cursor = CURSOR_TYPE.GRABBING;\r\n    }\r\n  };\r\n\r\n  private onKeyUp = (event: KeyboardEvent) => {\r\n    if (event.key === KEYS.SPACE) {\r\n      if (this.state.elementType === \"selection\") {\r\n        resetCursor();\r\n      } else {\r\n        elements = clearSelection(elements);\r\n        document.documentElement.style.cursor =\r\n          this.state.elementType === \"text\"\r\n            ? CURSOR_TYPE.TEXT\r\n            : CURSOR_TYPE.CROSSHAIR;\r\n        this.setState({});\r\n      }\r\n      isHoldingSpace = false;\r\n    }\r\n  };\r\n\r\n  private copyToAppClipboard = () => {\r\n    copyToAppClipboard(elements);\r\n  };\r\n\r\n  private pasteFromClipboard = async (e: ClipboardEvent | null) => {\r\n    // #686\r\n    const target = document.activeElement;\r\n    const elementUnderCursor = document.elementFromPoint(cursorX, cursorY);\r\n    if (\r\n      // if no ClipboardEvent supplied, assume we're pasting via contextMenu\r\n      //  thus these checks don't make sense\r\n      !e ||\r\n      (elementUnderCursor instanceof HTMLCanvasElement &&\r\n        !isWritableElement(target))\r\n    ) {\r\n      const data = await getClipboardContent(e);\r\n      if (data.elements) {\r\n        this.addElementsFromPaste(data.elements);\r\n      } else if (data.text) {\r\n        const { x, y } = viewportCoordsToSceneCoords(\r\n          { clientX: cursorX, clientY: cursorY },\r\n          this.state,\r\n          this.canvas,\r\n        );\r\n\r\n        const element = newTextElement(\r\n          newElement(\r\n            \"text\",\r\n            x,\r\n            y,\r\n            this.state.currentItemStrokeColor,\r\n            this.state.currentItemBackgroundColor,\r\n            this.state.currentItemFillStyle,\r\n            this.state.currentItemStrokeWidth,\r\n            this.state.currentItemRoughness,\r\n            this.state.currentItemOpacity,\r\n          ),\r\n          data.text,\r\n          this.state.currentItemFont,\r\n        );\r\n\r\n        element.isSelected = true;\r\n\r\n        elements = [...clearSelection(elements), element];\r\n        history.resumeRecording();\r\n      }\r\n      this.selectShapeTool(\"selection\");\r\n      e?.preventDefault();\r\n    }\r\n  };\r\n\r\n  private selectShapeTool(elementType: AppState[\"elementType\"]) {\r\n    if (!isHoldingSpace) {\r\n      setCursorForShape(elementType);\r\n    }\r\n    if (isToolIcon(document.activeElement)) {\r\n      document.activeElement.blur();\r\n    }\r\n    if (elementType !== \"selection\") {\r\n      elements = clearSelection(elements);\r\n    }\r\n    this.setState({ elementType });\r\n  }\r\n\r\n  setAppState = (obj: any) => {\r\n    this.setState(obj);\r\n  };\r\n\r\n  setElements = (elements_: readonly ExcalidrawElement[]) => {\r\n    elements = elements_;\r\n    this.setState({});\r\n  };\r\n\r\n  public render() {\r\n    const canvasDOMWidth = window.innerWidth;\r\n    const canvasDOMHeight = window.innerHeight;\r\n\r\n    const canvasScale = window.devicePixelRatio;\r\n\r\n    const canvasWidth = canvasDOMWidth * canvasScale;\r\n    const canvasHeight = canvasDOMHeight * canvasScale;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <LayerUI\r\n          canvas={this.canvas}\r\n          appState={this.state}\r\n          setAppState={this.setAppState}\r\n          actionManager={this.actionManager}\r\n          elements={elements}\r\n          setElements={this.setElements}\r\n          language={getLanguage()}\r\n        />\r\n        <main>\r\n          <canvas\r\n            id=\"canvas\"\r\n            style={{\r\n              width: canvasDOMWidth,\r\n              height: canvasDOMHeight,\r\n            }}\r\n            width={canvasWidth}\r\n            height={canvasHeight}\r\n            ref={canvas => {\r\n              // canvas is null when unmounting\r\n              if (canvas !== null) {\r\n                this.canvas = canvas;\r\n                this.rc = rough.canvas(this.canvas);\r\n\r\n                this.canvas.addEventListener(\"wheel\", this.handleWheel, {\r\n                  passive: false,\r\n                });\r\n\r\n                this.canvas\r\n                  .getContext(\"2d\")\r\n                  ?.setTransform(canvasScale, 0, 0, canvasScale, 0, 0);\r\n              } else {\r\n                this.canvas?.removeEventListener(\"wheel\", this.handleWheel);\r\n              }\r\n            }}\r\n            onContextMenu={e => {\r\n              e.preventDefault();\r\n\r\n              const { x, y } = viewportCoordsToSceneCoords(\r\n                e,\r\n                this.state,\r\n                this.canvas,\r\n              );\r\n\r\n              const element = getElementAtPosition(\r\n                elements,\r\n                x,\r\n                y,\r\n                this.state.zoom,\r\n              );\r\n              if (!element) {\r\n                ContextMenu.push({\r\n                  options: [\r\n                    navigator.clipboard && {\r\n                      label: t(\"labels.paste\"),\r\n                      action: () => this.pasteFromClipboard(null),\r\n                    },\r\n                    ...this.actionManager.getContextMenuItems(action =>\r\n                      this.canvasOnlyActions.includes(action),\r\n                    ),\r\n                  ],\r\n                  top: e.clientY,\r\n                  left: e.clientX,\r\n                });\r\n                return;\r\n              }\r\n\r\n              if (!element.isSelected) {\r\n                elements = clearSelection(elements);\r\n                element.isSelected = true;\r\n                this.setState({});\r\n              }\r\n\r\n              ContextMenu.push({\r\n                options: [\r\n                  navigator.clipboard && {\r\n                    label: t(\"labels.copy\"),\r\n                    action: this.copyToAppClipboard,\r\n                  },\r\n                  navigator.clipboard && {\r\n                    label: t(\"labels.paste\"),\r\n                    action: () => this.pasteFromClipboard(null),\r\n                  },\r\n                  ...this.actionManager.getContextMenuItems(\r\n                    action => !this.canvasOnlyActions.includes(action),\r\n                  ),\r\n                ],\r\n                top: e.clientY,\r\n                left: e.clientX,\r\n              });\r\n            }}\r\n            onMouseDown={e => {\r\n              if (lastMouseUp !== null) {\r\n                // Unfortunately, sometimes we don't get a mouseup after a mousedown,\r\n                // this can happen when a contextual menu or alert is triggered. In order to avoid\r\n                // being in a weird state, we clean up on the next mousedown\r\n                lastMouseUp(e);\r\n              }\r\n\r\n              if (isPanning) {\r\n                return;\r\n              }\r\n\r\n              // pan canvas on wheel button drag or space+drag\r\n              if (\r\n                !isHoldingMouseButton &&\r\n                (e.button === MOUSE_BUTTON.WHEEL ||\r\n                  (e.button === MOUSE_BUTTON.MAIN && isHoldingSpace))\r\n              ) {\r\n                isHoldingMouseButton = true;\r\n                isPanning = true;\r\n                document.documentElement.style.cursor = CURSOR_TYPE.GRABBING;\r\n                let { clientX: lastX, clientY: lastY } = e;\r\n                const onMouseMove = (e: MouseEvent) => {\r\n                  const deltaX = lastX - e.clientX;\r\n                  const deltaY = lastY - e.clientY;\r\n                  lastX = e.clientX;\r\n                  lastY = e.clientY;\r\n\r\n                  this.setState({\r\n                    scrollX: this.state.scrollX - deltaX / this.state.zoom,\r\n                    scrollY: this.state.scrollY - deltaY / this.state.zoom,\r\n                  });\r\n                };\r\n                const teardown = (lastMouseUp = () => {\r\n                  lastMouseUp = null;\r\n                  isPanning = false;\r\n                  isHoldingMouseButton = false;\r\n                  if (!isHoldingSpace) {\r\n                    setCursorForShape(this.state.elementType);\r\n                  }\r\n                  window.removeEventListener(\"mousemove\", onMouseMove);\r\n                  window.removeEventListener(\"mouseup\", teardown);\r\n                  window.removeEventListener(\"blur\", teardown);\r\n                });\r\n                window.addEventListener(\"blur\", teardown);\r\n                window.addEventListener(\"mousemove\", onMouseMove, {\r\n                  passive: true,\r\n                });\r\n                window.addEventListener(\"mouseup\", teardown);\r\n                return;\r\n              }\r\n\r\n              // only handle left mouse button\r\n              if (e.button !== MOUSE_BUTTON.MAIN) {\r\n                return;\r\n              }\r\n              // fixes mousemove causing selection of UI texts #32\r\n              e.preventDefault();\r\n              // Preventing the event above disables default behavior\r\n              //  of defocusing potentially focused element, which is what we\r\n              //  want when clicking inside the canvas.\r\n              if (document.activeElement instanceof HTMLElement) {\r\n                document.activeElement.blur();\r\n              }\r\n\r\n              // Handle scrollbars dragging\r\n              const {\r\n                isOverHorizontalScrollBar,\r\n                isOverVerticalScrollBar,\r\n              } = isOverScrollBars(\r\n                elements,\r\n                e.clientX / window.devicePixelRatio,\r\n                e.clientY / window.devicePixelRatio,\r\n                canvasWidth / window.devicePixelRatio,\r\n                canvasHeight / window.devicePixelRatio,\r\n                this.state,\r\n              );\r\n\r\n              const { x, y } = viewportCoordsToSceneCoords(\r\n                e,\r\n                this.state,\r\n                this.canvas,\r\n              );\r\n\r\n              const originX = x;\r\n              const originY = y;\r\n\r\n              let element = newElement(\r\n                this.state.elementType,\r\n                x,\r\n                y,\r\n                this.state.currentItemStrokeColor,\r\n                this.state.currentItemBackgroundColor,\r\n                this.state.currentItemFillStyle,\r\n                this.state.currentItemStrokeWidth,\r\n                this.state.currentItemRoughness,\r\n                this.state.currentItemOpacity,\r\n              );\r\n\r\n              if (isTextElement(element)) {\r\n                element = newTextElement(\r\n                  element,\r\n                  \"\",\r\n                  this.state.currentItemFont,\r\n                );\r\n              }\r\n\r\n              type ResizeTestType = ReturnType<typeof resizeTest>;\r\n              let resizeHandle: ResizeTestType = false;\r\n              let isResizingElements = false;\r\n              let draggingOccurred = false;\r\n              let hitElement: ExcalidrawElement | null = null;\r\n              let elementIsAddedToSelection = false;\r\n              if (this.state.elementType === \"selection\") {\r\n                const resizeElement = getElementWithResizeHandler(\r\n                  elements,\r\n                  { x, y },\r\n                  this.state.zoom,\r\n                );\r\n\r\n                const selectedElements = getSelectedElements(elements);\r\n                if (selectedElements.length === 1 && resizeElement) {\r\n                  this.setState({\r\n                    resizingElement: resizeElement\r\n                      ? resizeElement.element\r\n                      : null,\r\n                  });\r\n\r\n                  resizeHandle = resizeElement.resizeHandle;\r\n                  document.documentElement.style.cursor = getCursorForResizingElement(\r\n                    resizeElement,\r\n                  );\r\n                  isResizingElements = true;\r\n                } else {\r\n                  hitElement = getElementAtPosition(\r\n                    elements,\r\n                    x,\r\n                    y,\r\n                    this.state.zoom,\r\n                  );\r\n                  // clear selection if shift is not clicked\r\n                  if (!hitElement?.isSelected && !e.shiftKey) {\r\n                    elements = clearSelection(elements);\r\n                  }\r\n\r\n                  // If we click on something\r\n                  if (hitElement) {\r\n                    // deselect if item is selected\r\n                    // if shift is not clicked, this will always return true\r\n                    // otherwise, it will trigger selection based on current\r\n                    // state of the box\r\n                    if (!hitElement.isSelected) {\r\n                      hitElement.isSelected = true;\r\n                      elements = elements.slice();\r\n                      elementIsAddedToSelection = true;\r\n                    }\r\n\r\n                    // We duplicate the selected element if alt is pressed on Mouse down\r\n                    if (e.altKey) {\r\n                      elements = [\r\n                        ...elements.map(element => ({\r\n                          ...element,\r\n                          isSelected: false,\r\n                        })),\r\n                        ...getSelectedElements(elements).map(element => {\r\n                          const newElement = duplicateElement(element);\r\n                          newElement.isSelected = true;\r\n                          return newElement;\r\n                        }),\r\n                      ];\r\n                    }\r\n                  }\r\n                }\r\n              } else {\r\n                elements = clearSelection(elements);\r\n              }\r\n\r\n              if (isTextElement(element)) {\r\n                // if we're currently still editing text, clicking outside\r\n                //  should only finalize it, not create another (irrespective\r\n                //  of state.elementLocked)\r\n                if (this.state.editingElement?.type === \"text\") {\r\n                  return;\r\n                }\r\n                let textX = e.clientX;\r\n                let textY = e.clientY;\r\n                if (!e.altKey) {\r\n                  const snappedToCenterPosition = this.getTextWysiwygSnappedToCenterPosition(\r\n                    x,\r\n                    y,\r\n                  );\r\n                  if (snappedToCenterPosition) {\r\n                    element.x = snappedToCenterPosition.elementCenterX;\r\n                    element.y = snappedToCenterPosition.elementCenterY;\r\n                    textX = snappedToCenterPosition.wysiwygX;\r\n                    textY = snappedToCenterPosition.wysiwygY;\r\n                  }\r\n                }\r\n\r\n                const resetSelection = () => {\r\n                  this.setState({\r\n                    draggingElement: null,\r\n                    editingElement: null,\r\n                  });\r\n                };\r\n\r\n                textWysiwyg({\r\n                  initText: \"\",\r\n                  x: textX,\r\n                  y: textY,\r\n                  strokeColor: this.state.currentItemStrokeColor,\r\n                  opacity: this.state.currentItemOpacity,\r\n                  font: this.state.currentItemFont,\r\n                  zoom: this.state.zoom,\r\n                  onSubmit: text => {\r\n                    if (text) {\r\n                      elements = [\r\n                        ...elements,\r\n                        {\r\n                          ...newTextElement(\r\n                            element,\r\n                            text,\r\n                            this.state.currentItemFont,\r\n                          ),\r\n                          isSelected: true,\r\n                        },\r\n                      ];\r\n                    }\r\n                    if (this.state.elementLocked) {\r\n                      setCursorForShape(this.state.elementType);\r\n                    }\r\n                    history.resumeRecording();\r\n                    resetSelection();\r\n                  },\r\n                  onCancel: () => {\r\n                    resetSelection();\r\n                  },\r\n                });\r\n                resetCursor();\r\n                if (!this.state.elementLocked) {\r\n                  this.setState({\r\n                    editingElement: element,\r\n                    elementType: \"selection\",\r\n                  });\r\n                } else {\r\n                  this.setState({\r\n                    editingElement: element,\r\n                  });\r\n                }\r\n                return;\r\n              } else if (\r\n                this.state.elementType === \"arrow\" ||\r\n                this.state.elementType === \"line\"\r\n              ) {\r\n                if (this.state.multiElement) {\r\n                  const { multiElement } = this.state;\r\n                  const { x: rx, y: ry } = multiElement;\r\n                  multiElement.isSelected = true;\r\n                  multiElement.points.push([x - rx, y - ry]);\r\n                  multiElement.shape = null;\r\n                } else {\r\n                  element.isSelected = false;\r\n                  element.points.push([0, 0]);\r\n                  element.shape = null;\r\n                  elements = [...elements, element];\r\n                  this.setState({\r\n                    draggingElement: element,\r\n                  });\r\n                }\r\n              } else if (element.type === \"selection\") {\r\n                this.setState({\r\n                  selectionElement: element,\r\n                  draggingElement: element,\r\n                });\r\n              } else {\r\n                elements = [...elements, element];\r\n                this.setState({ multiElement: null, draggingElement: element });\r\n              }\r\n\r\n              let lastX = x;\r\n              let lastY = y;\r\n\r\n              if (isOverHorizontalScrollBar || isOverVerticalScrollBar) {\r\n                lastX = e.clientX;\r\n                lastY = e.clientY;\r\n              }\r\n\r\n              let resizeArrowFn:\r\n                | ((\r\n                    element: ExcalidrawElement,\r\n                    p1: Point,\r\n                    deltaX: number,\r\n                    deltaY: number,\r\n                    mouseX: number,\r\n                    mouseY: number,\r\n                    perfect: boolean,\r\n                  ) => void)\r\n                | null = null;\r\n\r\n              const arrowResizeOrigin = (\r\n                element: ExcalidrawElement,\r\n                p1: Point,\r\n                deltaX: number,\r\n                deltaY: number,\r\n                mouseX: number,\r\n                mouseY: number,\r\n                perfect: boolean,\r\n              ) => {\r\n                if (perfect) {\r\n                  const absPx = p1[0] + element.x;\r\n                  const absPy = p1[1] + element.y;\r\n\r\n                  const { width, height } = getPerfectElementSize(\r\n                    element.type,\r\n                    mouseX - element.x - p1[0],\r\n                    mouseY - element.y - p1[1],\r\n                  );\r\n\r\n                  const dx = element.x + width + p1[0];\r\n                  const dy = element.y + height + p1[1];\r\n                  element.x = dx;\r\n                  element.y = dy;\r\n                  p1[0] = absPx - element.x;\r\n                  p1[1] = absPy - element.y;\r\n                } else {\r\n                  element.x += deltaX;\r\n                  element.y += deltaY;\r\n                  p1[0] -= deltaX;\r\n                  p1[1] -= deltaY;\r\n                }\r\n              };\r\n\r\n              const arrowResizeEnd = (\r\n                element: ExcalidrawElement,\r\n                p1: Point,\r\n                deltaX: number,\r\n                deltaY: number,\r\n                mouseX: number,\r\n                mouseY: number,\r\n                perfect: boolean,\r\n              ) => {\r\n                if (perfect) {\r\n                  const { width, height } = getPerfectElementSize(\r\n                    element.type,\r\n                    mouseX - element.x,\r\n                    mouseY - element.y,\r\n                  );\r\n                  p1[0] = width;\r\n                  p1[1] = height;\r\n                } else {\r\n                  p1[0] += deltaX;\r\n                  p1[1] += deltaY;\r\n                }\r\n              };\r\n\r\n              const onMouseMove = (e: MouseEvent) => {\r\n                const target = e.target;\r\n                if (!(target instanceof HTMLElement)) {\r\n                  return;\r\n                }\r\n\r\n                if (isOverHorizontalScrollBar) {\r\n                  const x = e.clientX;\r\n                  const dx = x - lastX;\r\n                  this.setState({\r\n                    scrollX: this.state.scrollX - dx / this.state.zoom,\r\n                  });\r\n                  lastX = x;\r\n                  return;\r\n                }\r\n\r\n                if (isOverVerticalScrollBar) {\r\n                  const y = e.clientY;\r\n                  const dy = y - lastY;\r\n                  this.setState({\r\n                    scrollY: this.state.scrollY - dy / this.state.zoom,\r\n                  });\r\n                  lastY = y;\r\n                  return;\r\n                }\r\n\r\n                // for arrows, don't start dragging until a given threshold\r\n                //  to ensure we don't create a 2-point arrow by mistake when\r\n                //  user clicks mouse in a way that it moves a tiny bit (thus\r\n                //  triggering mousemove)\r\n                if (\r\n                  !draggingOccurred &&\r\n                  (this.state.elementType === \"arrow\" ||\r\n                    this.state.elementType === \"line\")\r\n                ) {\r\n                  const { x, y } = viewportCoordsToSceneCoords(\r\n                    e,\r\n                    this.state,\r\n                    this.canvas,\r\n                  );\r\n                  if (distance2d(x, y, originX, originY) < DRAGGING_THRESHOLD) {\r\n                    return;\r\n                  }\r\n                }\r\n\r\n                if (isResizingElements && this.state.resizingElement) {\r\n                  this.setState({ isResizing: true });\r\n                  const el = this.state.resizingElement;\r\n                  const selectedElements = getSelectedElements(elements);\r\n                  if (selectedElements.length === 1) {\r\n                    const { x, y } = viewportCoordsToSceneCoords(\r\n                      e,\r\n                      this.state,\r\n                      this.canvas,\r\n                    );\r\n                    const deltaX = x - lastX;\r\n                    const deltaY = y - lastY;\r\n                    const element = selectedElements[0];\r\n                    const isLinear =\r\n                      element.type === \"line\" || element.type === \"arrow\";\r\n                    switch (resizeHandle) {\r\n                      case \"nw\":\r\n                        if (isLinear && element.points.length === 2) {\r\n                          const [, p1] = element.points;\r\n\r\n                          if (!resizeArrowFn) {\r\n                            if (p1[0] < 0 || p1[1] < 0) {\r\n                              resizeArrowFn = arrowResizeEnd;\r\n                            } else {\r\n                              resizeArrowFn = arrowResizeOrigin;\r\n                            }\r\n                          }\r\n                          resizeArrowFn(\r\n                            element,\r\n                            p1,\r\n                            deltaX,\r\n                            deltaY,\r\n                            x,\r\n                            y,\r\n                            e.shiftKey,\r\n                          );\r\n                        } else {\r\n                          element.width -= deltaX;\r\n                          element.x += deltaX;\r\n\r\n                          if (e.shiftKey) {\r\n                            element.y += element.height - element.width;\r\n                            element.height = element.width;\r\n                          } else {\r\n                            element.height -= deltaY;\r\n                            element.y += deltaY;\r\n                          }\r\n                        }\r\n                        break;\r\n                      case \"ne\":\r\n                        if (isLinear && element.points.length === 2) {\r\n                          const [, p1] = element.points;\r\n                          if (!resizeArrowFn) {\r\n                            if (p1[0] >= 0) {\r\n                              resizeArrowFn = arrowResizeEnd;\r\n                            } else {\r\n                              resizeArrowFn = arrowResizeOrigin;\r\n                            }\r\n                          }\r\n                          resizeArrowFn(\r\n                            element,\r\n                            p1,\r\n                            deltaX,\r\n                            deltaY,\r\n                            x,\r\n                            y,\r\n                            e.shiftKey,\r\n                          );\r\n                        } else {\r\n                          element.width += deltaX;\r\n                          if (e.shiftKey) {\r\n                            element.y += element.height - element.width;\r\n                            element.height = element.width;\r\n                          } else {\r\n                            element.height -= deltaY;\r\n                            element.y += deltaY;\r\n                          }\r\n                        }\r\n                        break;\r\n                      case \"sw\":\r\n                        if (isLinear && element.points.length === 2) {\r\n                          const [, p1] = element.points;\r\n                          if (!resizeArrowFn) {\r\n                            if (p1[0] <= 0) {\r\n                              resizeArrowFn = arrowResizeEnd;\r\n                            } else {\r\n                              resizeArrowFn = arrowResizeOrigin;\r\n                            }\r\n                          }\r\n                          resizeArrowFn(\r\n                            element,\r\n                            p1,\r\n                            deltaX,\r\n                            deltaY,\r\n                            x,\r\n                            y,\r\n                            e.shiftKey,\r\n                          );\r\n                        } else {\r\n                          element.width -= deltaX;\r\n                          element.x += deltaX;\r\n                          if (e.shiftKey) {\r\n                            element.height = element.width;\r\n                          } else {\r\n                            element.height += deltaY;\r\n                          }\r\n                        }\r\n                        break;\r\n                      case \"se\":\r\n                        if (isLinear && element.points.length === 2) {\r\n                          const [, p1] = element.points;\r\n                          if (!resizeArrowFn) {\r\n                            if (p1[0] > 0 || p1[1] > 0) {\r\n                              resizeArrowFn = arrowResizeEnd;\r\n                            } else {\r\n                              resizeArrowFn = arrowResizeOrigin;\r\n                            }\r\n                          }\r\n                          resizeArrowFn(\r\n                            element,\r\n                            p1,\r\n                            deltaX,\r\n                            deltaY,\r\n                            x,\r\n                            y,\r\n                            e.shiftKey,\r\n                          );\r\n                        } else {\r\n                          if (e.shiftKey) {\r\n                            element.width += deltaX;\r\n                            element.height = element.width;\r\n                          } else {\r\n                            element.width += deltaX;\r\n                            element.height += deltaY;\r\n                          }\r\n                        }\r\n                        break;\r\n                      case \"n\": {\r\n                        element.height -= deltaY;\r\n                        element.y += deltaY;\r\n\r\n                        if (element.points.length > 0) {\r\n                          const len = element.points.length;\r\n\r\n                          const points = [...element.points].sort(\r\n                            (a, b) => a[1] - b[1],\r\n                          );\r\n\r\n                          for (let i = 1; i < points.length; ++i) {\r\n                            const pnt = points[i];\r\n                            pnt[1] -= deltaY / (len - i);\r\n                          }\r\n                        }\r\n                        break;\r\n                      }\r\n                      case \"w\": {\r\n                        element.width -= deltaX;\r\n                        element.x += deltaX;\r\n\r\n                        if (element.points.length > 0) {\r\n                          const len = element.points.length;\r\n                          const points = [...element.points].sort(\r\n                            (a, b) => a[0] - b[0],\r\n                          );\r\n\r\n                          for (let i = 0; i < points.length; ++i) {\r\n                            const pnt = points[i];\r\n                            pnt[0] -= deltaX / (len - i);\r\n                          }\r\n                        }\r\n                        break;\r\n                      }\r\n                      case \"s\": {\r\n                        element.height += deltaY;\r\n                        if (element.points.length > 0) {\r\n                          const len = element.points.length;\r\n                          const points = [...element.points].sort(\r\n                            (a, b) => a[1] - b[1],\r\n                          );\r\n\r\n                          for (let i = 1; i < points.length; ++i) {\r\n                            const pnt = points[i];\r\n                            pnt[1] += deltaY / (len - i);\r\n                          }\r\n                        }\r\n                        break;\r\n                      }\r\n                      case \"e\": {\r\n                        element.width += deltaX;\r\n                        if (element.points.length > 0) {\r\n                          const len = element.points.length;\r\n                          const points = [...element.points].sort(\r\n                            (a, b) => a[0] - b[0],\r\n                          );\r\n\r\n                          for (let i = 1; i < points.length; ++i) {\r\n                            const pnt = points[i];\r\n                            pnt[0] += deltaX / (len - i);\r\n                          }\r\n                        }\r\n                        break;\r\n                      }\r\n                    }\r\n\r\n                    if (resizeHandle) {\r\n                      resizeHandle = normalizeResizeHandle(\r\n                        element,\r\n                        resizeHandle,\r\n                      );\r\n                    }\r\n                    normalizeDimensions(element);\r\n\r\n                    document.documentElement.style.cursor = getCursorForResizingElement(\r\n                      { element, resizeHandle },\r\n                    );\r\n                    el.x = element.x;\r\n                    el.y = element.y;\r\n                    el.shape = null;\r\n\r\n                    lastX = x;\r\n                    lastY = y;\r\n                    this.setState({});\r\n                    return;\r\n                  }\r\n                }\r\n\r\n                if (hitElement?.isSelected) {\r\n                  // Marking that click was used for dragging to check\r\n                  // if elements should be deselected on mouseup\r\n                  draggingOccurred = true;\r\n                  const selectedElements = getSelectedElements(elements);\r\n                  if (selectedElements.length > 0) {\r\n                    const { x, y } = viewportCoordsToSceneCoords(\r\n                      e,\r\n                      this.state,\r\n                      this.canvas,\r\n                    );\r\n\r\n                    selectedElements.forEach(element => {\r\n                      element.x += x - lastX;\r\n                      element.y += y - lastY;\r\n                    });\r\n                    lastX = x;\r\n                    lastY = y;\r\n                    this.setState({});\r\n                    return;\r\n                  }\r\n                }\r\n\r\n                // It is very important to read this.state within each move event,\r\n                // otherwise we would read a stale one!\r\n                const draggingElement = this.state.draggingElement;\r\n                if (!draggingElement) {\r\n                  return;\r\n                }\r\n\r\n                const { x, y } = viewportCoordsToSceneCoords(\r\n                  e,\r\n                  this.state,\r\n                  this.canvas,\r\n                );\r\n\r\n                let width = distance(originX, x);\r\n                let height = distance(originY, y);\r\n\r\n                const isLinear =\r\n                  this.state.elementType === \"line\" ||\r\n                  this.state.elementType === \"arrow\";\r\n\r\n                if (isLinear) {\r\n                  draggingOccurred = true;\r\n                  const points = draggingElement.points;\r\n                  let dx = x - draggingElement.x;\r\n                  let dy = y - draggingElement.y;\r\n\r\n                  if (e.shiftKey && points.length === 2) {\r\n                    ({ width: dx, height: dy } = getPerfectElementSize(\r\n                      this.state.elementType,\r\n                      dx,\r\n                      dy,\r\n                    ));\r\n                  }\r\n\r\n                  if (points.length === 1) {\r\n                    points.push([dx, dy]);\r\n                  } else if (points.length > 1) {\r\n                    const pnt = points[points.length - 1];\r\n                    pnt[0] = dx;\r\n                    pnt[1] = dy;\r\n                  }\r\n                } else {\r\n                  if (e.shiftKey) {\r\n                    ({ width, height } = getPerfectElementSize(\r\n                      this.state.elementType,\r\n                      width,\r\n                      y < originY ? -height : height,\r\n                    ));\r\n\r\n                    if (height < 0) {\r\n                      height = -height;\r\n                    }\r\n                  }\r\n\r\n                  draggingElement.x = x < originX ? originX - width : originX;\r\n                  draggingElement.y = y < originY ? originY - height : originY;\r\n\r\n                  draggingElement.width = width;\r\n                  draggingElement.height = height;\r\n                }\r\n\r\n                draggingElement.shape = null;\r\n\r\n                if (this.state.elementType === \"selection\") {\r\n                  if (!e.shiftKey && isSomeElementSelected(elements)) {\r\n                    elements = clearSelection(elements);\r\n                  }\r\n                  const elementsWithinSelection = getElementsWithinSelection(\r\n                    elements,\r\n                    draggingElement,\r\n                  );\r\n                  elementsWithinSelection.forEach(element => {\r\n                    element.isSelected = true;\r\n                  });\r\n                }\r\n                this.setState({});\r\n              };\r\n\r\n              const onMouseUp = (e: MouseEvent) => {\r\n                const {\r\n                  draggingElement,\r\n                  resizingElement,\r\n                  multiElement,\r\n                  elementType,\r\n                  elementLocked,\r\n                } = this.state;\r\n\r\n                this.setState({\r\n                  isResizing: false,\r\n                  resizingElement: null,\r\n                  selectionElement: null,\r\n                });\r\n\r\n                resizeArrowFn = null;\r\n                lastMouseUp = null;\r\n                isHoldingMouseButton = false;\r\n                window.removeEventListener(\"mousemove\", onMouseMove);\r\n                window.removeEventListener(\"mouseup\", onMouseUp);\r\n\r\n                if (elementType === \"arrow\" || elementType === \"line\") {\r\n                  if (draggingElement!.points.length > 1) {\r\n                    history.resumeRecording();\r\n                    this.setState({});\r\n                  }\r\n                  if (!draggingOccurred && draggingElement && !multiElement) {\r\n                    const { x, y } = viewportCoordsToSceneCoords(\r\n                      e,\r\n                      this.state,\r\n                      this.canvas,\r\n                    );\r\n                    draggingElement.points.push([\r\n                      x - draggingElement.x,\r\n                      y - draggingElement.y,\r\n                    ]);\r\n                    draggingElement.shape = null;\r\n                    this.setState({ multiElement: this.state.draggingElement });\r\n                  } else if (draggingOccurred && !multiElement) {\r\n                    this.state.draggingElement!.isSelected = true;\r\n                    if (!elementLocked) {\r\n                      resetCursor();\r\n                      this.setState({\r\n                        draggingElement: null,\r\n                        elementType: \"selection\",\r\n                      });\r\n                    } else {\r\n                      this.setState({\r\n                        draggingElement: null,\r\n                      });\r\n                    }\r\n                  }\r\n                  return;\r\n                }\r\n\r\n                if (\r\n                  elementType !== \"selection\" &&\r\n                  draggingElement &&\r\n                  isInvisiblySmallElement(draggingElement)\r\n                ) {\r\n                  // remove invisible element which was added in onMouseDown\r\n                  elements = elements.slice(0, -1);\r\n                  this.setState({\r\n                    draggingElement: null,\r\n                  });\r\n                  return;\r\n                }\r\n\r\n                if (normalizeDimensions(draggingElement)) {\r\n                  this.setState({});\r\n                }\r\n\r\n                if (resizingElement) {\r\n                  history.resumeRecording();\r\n                  this.setState({});\r\n                }\r\n\r\n                if (\r\n                  resizingElement &&\r\n                  isInvisiblySmallElement(resizingElement)\r\n                ) {\r\n                  elements = elements.filter(\r\n                    el => el.id !== resizingElement.id,\r\n                  );\r\n                }\r\n\r\n                // If click occurred on already selected element\r\n                // it is needed to remove selection from other elements\r\n                // or if SHIFT or META key pressed remove selection\r\n                // from hitted element\r\n                //\r\n                // If click occurred and elements were dragged or some element\r\n                // was added to selection (on mousedown phase) we need to keep\r\n                // selection unchanged\r\n                if (\r\n                  hitElement &&\r\n                  !draggingOccurred &&\r\n                  !elementIsAddedToSelection\r\n                ) {\r\n                  if (e.shiftKey) {\r\n                    hitElement.isSelected = false;\r\n                  } else {\r\n                    elements = clearSelection(elements);\r\n                    hitElement.isSelected = true;\r\n                  }\r\n                }\r\n\r\n                if (draggingElement === null) {\r\n                  // if no element is clicked, clear the selection and redraw\r\n                  elements = clearSelection(elements);\r\n                  this.setState({});\r\n                  return;\r\n                }\r\n\r\n                if (!elementLocked) {\r\n                  draggingElement.isSelected = true;\r\n                }\r\n\r\n                if (\r\n                  elementType !== \"selection\" ||\r\n                  isSomeElementSelected(elements)\r\n                ) {\r\n                  history.resumeRecording();\r\n                }\r\n\r\n                if (!elementLocked) {\r\n                  resetCursor();\r\n                  this.setState({\r\n                    draggingElement: null,\r\n                    elementType: \"selection\",\r\n                  });\r\n                } else {\r\n                  this.setState({\r\n                    draggingElement: null,\r\n                  });\r\n                }\r\n              };\r\n\r\n              lastMouseUp = onMouseUp;\r\n\r\n              window.addEventListener(\"mousemove\", onMouseMove);\r\n              window.addEventListener(\"mouseup\", onMouseUp);\r\n            }}\r\n            onDoubleClick={e => {\r\n              resetCursor();\r\n\r\n              const { x, y } = viewportCoordsToSceneCoords(\r\n                e,\r\n                this.state,\r\n                this.canvas,\r\n              );\r\n\r\n              const elementAtPosition = getElementAtPosition(\r\n                elements,\r\n                x,\r\n                y,\r\n                this.state.zoom,\r\n              );\r\n\r\n              const element =\r\n                elementAtPosition && isTextElement(elementAtPosition)\r\n                  ? elementAtPosition\r\n                  : newTextElement(\r\n                      newElement(\r\n                        \"text\",\r\n                        x,\r\n                        y,\r\n                        this.state.currentItemStrokeColor,\r\n                        this.state.currentItemBackgroundColor,\r\n                        this.state.currentItemFillStyle,\r\n                        this.state.currentItemStrokeWidth,\r\n                        this.state.currentItemRoughness,\r\n                        this.state.currentItemOpacity,\r\n                      ),\r\n                      \"\", // default text\r\n                      this.state.currentItemFont, // default font\r\n                    );\r\n\r\n              this.setState({ editingElement: element });\r\n\r\n              let textX = e.clientX;\r\n              let textY = e.clientY;\r\n\r\n              if (elementAtPosition && isTextElement(elementAtPosition)) {\r\n                elements = elements.filter(\r\n                  element => element.id !== elementAtPosition.id,\r\n                );\r\n                this.setState({});\r\n\r\n                const centerElementX =\r\n                  elementAtPosition.x + elementAtPosition.width / 2;\r\n                const centerElementY =\r\n                  elementAtPosition.y + elementAtPosition.height / 2;\r\n\r\n                const {\r\n                  x: centerElementXInViewport,\r\n                  y: centerElementYInViewport,\r\n                } = sceneCoordsToViewportCoords(\r\n                  { sceneX: centerElementX, sceneY: centerElementY },\r\n                  this.state,\r\n                  this.canvas,\r\n                );\r\n\r\n                textX = centerElementXInViewport;\r\n                textY = centerElementYInViewport;\r\n\r\n                // x and y will change after calling newTextElement function\r\n                element.x = centerElementX;\r\n                element.y = centerElementY;\r\n              } else if (!e.altKey) {\r\n                const snappedToCenterPosition = this.getTextWysiwygSnappedToCenterPosition(\r\n                  x,\r\n                  y,\r\n                );\r\n\r\n                if (snappedToCenterPosition) {\r\n                  element.x = snappedToCenterPosition.elementCenterX;\r\n                  element.y = snappedToCenterPosition.elementCenterY;\r\n                  textX = snappedToCenterPosition.wysiwygX;\r\n                  textY = snappedToCenterPosition.wysiwygY;\r\n                }\r\n              }\r\n\r\n              const resetSelection = () => {\r\n                this.setState({\r\n                  draggingElement: null,\r\n                  editingElement: null,\r\n                });\r\n              };\r\n\r\n              textWysiwyg({\r\n                initText: element.text,\r\n                x: textX,\r\n                y: textY,\r\n                strokeColor: element.strokeColor,\r\n                font: element.font,\r\n                opacity: this.state.currentItemOpacity,\r\n                zoom: this.state.zoom,\r\n                onSubmit: text => {\r\n                  if (text) {\r\n                    elements = [\r\n                      ...elements,\r\n                      {\r\n                        // we need to recreate the element to update dimensions &\r\n                        //  position\r\n                        ...newTextElement(element, text, element.font),\r\n                        isSelected: true,\r\n                      },\r\n                    ];\r\n                  }\r\n                  history.resumeRecording();\r\n                  resetSelection();\r\n                },\r\n                onCancel: () => {\r\n                  resetSelection();\r\n                },\r\n              });\r\n            }}\r\n            onMouseMove={e => {\r\n              if (isHoldingSpace || isPanning) {\r\n                return;\r\n              }\r\n              const hasDeselectedButton = Boolean(e.buttons);\r\n\r\n              const { x, y } = viewportCoordsToSceneCoords(\r\n                e,\r\n                this.state,\r\n                this.canvas,\r\n              );\r\n              if (this.state.multiElement) {\r\n                const { multiElement } = this.state;\r\n                const originX = multiElement.x;\r\n                const originY = multiElement.y;\r\n                const points = multiElement.points;\r\n                const pnt = points[points.length - 1];\r\n                pnt[0] = x - originX;\r\n                pnt[1] = y - originY;\r\n                multiElement.shape = null;\r\n                this.setState({});\r\n                return;\r\n              }\r\n\r\n              if (\r\n                hasDeselectedButton ||\r\n                this.state.elementType !== \"selection\"\r\n              ) {\r\n                return;\r\n              }\r\n\r\n              const selectedElements = getSelectedElements(elements);\r\n              if (selectedElements.length === 1) {\r\n                const resizeElement = getElementWithResizeHandler(\r\n                  elements,\r\n                  { x, y },\r\n                  this.state.zoom,\r\n                );\r\n                if (resizeElement && resizeElement.resizeHandle) {\r\n                  document.documentElement.style.cursor = getCursorForResizingElement(\r\n                    resizeElement,\r\n                  );\r\n                  return;\r\n                }\r\n              }\r\n              const hitElement = getElementAtPosition(\r\n                elements,\r\n                x,\r\n                y,\r\n                this.state.zoom,\r\n              );\r\n              document.documentElement.style.cursor = hitElement ? \"move\" : \"\";\r\n            }}\r\n            onDrop={e => {\r\n              const file = e.dataTransfer.files[0];\r\n              if (file?.type === \"application/json\") {\r\n                loadFromBlob(file)\r\n                  .then(({ elements, appState }) =>\r\n                    this.syncActionResult({ elements, appState }),\r\n                  )\r\n                  .catch(err => console.error(err));\r\n              }\r\n            }}\r\n          >\r\n            {t(\"labels.drawingCanvas\")}\r\n          </canvas>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private handleWheel = (e: WheelEvent) => {\r\n    e.preventDefault();\r\n    const { deltaX, deltaY } = e;\r\n\r\n    if (e[KEYS.META]) {\r\n      const sign = Math.sign(deltaY);\r\n      const MAX_STEP = 10;\r\n      let delta = Math.abs(deltaY);\r\n      if (delta > MAX_STEP) {\r\n        delta = MAX_STEP;\r\n      }\r\n      delta *= sign;\r\n      this.setState(({ zoom }) => ({\r\n        zoom: getNormalizedZoom(zoom - delta / 100),\r\n      }));\r\n      return;\r\n    }\r\n\r\n    this.setState(({ zoom, scrollX, scrollY }) => ({\r\n      scrollX: scrollX - deltaX / zoom,\r\n      scrollY: scrollY - deltaY / zoom,\r\n    }));\r\n  };\r\n\r\n  private addElementsFromPaste = (\r\n    clipboardElements: readonly ExcalidrawElement[],\r\n  ) => {\r\n    elements = clearSelection(elements);\r\n\r\n    const [minX, minY, maxX, maxY] = getCommonBounds(clipboardElements);\r\n\r\n    const elementsCenterX = distance(minX, maxX) / 2;\r\n    const elementsCenterY = distance(minY, maxY) / 2;\r\n\r\n    const { x, y } = viewportCoordsToSceneCoords(\r\n      { clientX: cursorX, clientY: cursorY },\r\n      this.state,\r\n      this.canvas,\r\n    );\r\n\r\n    const dx = x - elementsCenterX;\r\n    const dy = y - elementsCenterY;\r\n\r\n    elements = [\r\n      ...elements,\r\n      ...clipboardElements.map(clipboardElements => {\r\n        const duplicate = duplicateElement(clipboardElements);\r\n        duplicate.x += dx - minX;\r\n        duplicate.y += dy - minY;\r\n        return duplicate;\r\n      }),\r\n    ];\r\n    history.resumeRecording();\r\n    this.setState({});\r\n  };\r\n\r\n  private getTextWysiwygSnappedToCenterPosition(x: number, y: number) {\r\n    const elementClickedInside = getElementContainingPosition(elements, x, y);\r\n    if (elementClickedInside) {\r\n      const elementCenterX =\r\n        elementClickedInside.x + elementClickedInside.width / 2;\r\n      const elementCenterY =\r\n        elementClickedInside.y + elementClickedInside.height / 2;\r\n      const distanceToCenter = Math.hypot(\r\n        x - elementCenterX,\r\n        y - elementCenterY,\r\n      );\r\n      const isSnappedToCenter =\r\n        distanceToCenter < TEXT_TO_CENTER_SNAP_THRESHOLD;\r\n      if (isSnappedToCenter) {\r\n        const wysiwygX =\r\n          this.state.scrollX +\r\n          elementClickedInside.x +\r\n          elementClickedInside.width / 2;\r\n        const wysiwygY =\r\n          this.state.scrollY +\r\n          elementClickedInside.y +\r\n          elementClickedInside.height / 2;\r\n        return { wysiwygX, wysiwygY, elementCenterX, elementCenterY };\r\n      }\r\n    }\r\n  }\r\n\r\n  private saveDebounced = debounce(() => {\r\n    saveToLocalStorage(\r\n      elements.filter(x => x.type !== \"selection\"),\r\n      this.state,\r\n    );\r\n  }, 300);\r\n\r\n  componentDidUpdate() {\r\n    const atLeastOneVisibleElement = renderScene(\r\n      elements,\r\n      this.state.selectionElement,\r\n      this.rc!,\r\n      this.canvas!,\r\n      {\r\n        scrollX: this.state.scrollX,\r\n        scrollY: this.state.scrollY,\r\n        viewBackgroundColor: this.state.viewBackgroundColor,\r\n        zoom: this.state.zoom,\r\n      },\r\n    );\r\n    const scrolledOutside = !atLeastOneVisibleElement && elements.length > 0;\r\n    if (this.state.scrolledOutside !== scrolledOutside) {\r\n      this.setState({ scrolledOutside: scrolledOutside });\r\n    }\r\n    this.saveDebounced();\r\n    if (history.isRecording()) {\r\n      history.pushEntry(this.state, elements);\r\n      history.skipRecording();\r\n    }\r\n  }\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\nclass TopErrorBoundary extends React.Component {\r\n  state = { hasError: false, stack: \"\", localStorage: \"\" };\r\n\r\n  static getDerivedStateFromError(error: any) {\r\n    console.error(error);\r\n    return {\r\n      hasError: true,\r\n      localStorage: JSON.stringify({ ...localStorage }),\r\n      stack: error.stack,\r\n    };\r\n  }\r\n\r\n  private selectTextArea(event: React.MouseEvent<HTMLTextAreaElement>) {\r\n    (event.target as HTMLTextAreaElement).select();\r\n  }\r\n\r\n  private async createGithubIssue() {\r\n    let body = \"\";\r\n    try {\r\n      const templateStr = (await import(\"./bug-issue-template\")).default;\r\n      if (typeof templateStr === \"string\") {\r\n        body = encodeURIComponent(templateStr);\r\n      }\r\n    } catch {}\r\n\r\n    window.open(\r\n      `https://github.com/excalidraw/excalidraw/issues/new?body=${body}`,\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return (\r\n        <div className=\"ErrorSplash\">\r\n          <div className=\"ErrorSplash-messageContainer\">\r\n            <div className=\"ErrorSplash-paragraph bigger\">\r\n              Encountered an error. Please{\" \"}\r\n              <button onClick={() => window.location.reload()}>\r\n                reload the page\r\n              </button>\r\n              .\r\n            </div>\r\n            <div className=\"ErrorSplash-paragraph\">\r\n              If reloading doesn't work. Try{\" \"}\r\n              <button\r\n                onClick={() => {\r\n                  localStorage.clear();\r\n                  window.location.reload();\r\n                }}\r\n              >\r\n                clearing the canvas\r\n              </button>\r\n              .<br />\r\n              <div className=\"smaller\">\r\n                (This will unfortunately result in loss of work.)\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <div className=\"ErrorSplash-paragraph\">\r\n                Before doing so, we'd appreciate if you opened an issue on our{\" \"}\r\n                <button onClick={this.createGithubIssue}>bug tracker</button>.\r\n                Please include the following error stack trace & localStorage\r\n                content (provided it's not private):\r\n              </div>\r\n              <div className=\"ErrorSplash-paragraph\">\r\n                <div className=\"ErrorSplash-details\">\r\n                  <label>Error stack trace:</label>\r\n                  <textarea\r\n                    rows={10}\r\n                    onClick={this.selectTextArea}\r\n                    defaultValue={this.state.stack}\r\n                  />\r\n                  <label>LocalStorage content:</label>\r\n                  <textarea\r\n                    rows={5}\r\n                    onClick={this.selectTextArea}\r\n                    defaultValue={this.state.localStorage}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  <TopErrorBoundary>\r\n    <App />\r\n  </TopErrorBoundary>,\r\n  rootElement,\r\n);\r\n"],"sourceRoot":""}